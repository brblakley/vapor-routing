{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler\/stopTLS(promise:)"},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Instance Method","symbolKind":"method","externalID":"s:6NIOSSL13NIOSSLHandlerC7stopTLS7promisey7NIOCore16EventLoopPromiseVyytGSg_tF","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"stopTLS"},{"kind":"text","text":"("},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","text":"EventLoopPromise"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">?)"}],"extendedModule":"NIOSSL","title":"stopTLS(promise:)","modules":[{"name":"NIOSSL"}]},"abstract":[{"text":"Called to instruct this handler to perform an orderly TLS shutdown and then remove itself","type":"text"},{"text":" ","type":"text"},{"text":"from the pipeline. This will leave the connection established, but remove the TLS wrapper","type":"text"},{"text":" ","type":"text"},{"text":"from it.","type":"text"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niossl\/niosslhandler\/stoptls(promise:)"]}],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"stopTLS"},{"kind":"text","text":"("},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","kind":"typeIdentifier","text":"EventLoopPromise"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">?)"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"EventLoopPromise"},{"type":"text","text":" that will be completed when the unwrapping has"},{"type":"text","text":" "},{"type":"text","text":"completed."}]}],"name":"promise"}]},{"content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will send a "},{"code":"CLOSE_NOTIFY","type":"codeVoice"},{"type":"text","text":" and wait for the corresponding "},{"code":"CLOSE_NOTIFY","type":"codeVoice"},{"type":"text","text":". When that next"},{"type":"text","text":" "},{"code":"CLOSE_NOTIFY","type":"codeVoice"},{"type":"text","text":" is received, this handler will pass on all pending writes and remove itself"},{"type":"text","text":" "},{"type":"text","text":"from the channel pipeline. If the shutdown times out then an error will fire down the"},{"type":"text","text":" "},{"type":"text","text":"pipeline, this handler will remove itself from the pipeline, but the channel will not be"},{"type":"text","text":" "},{"type":"text","text":"automatically closed."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This function "},{"type":"strong","inlineContent":[{"type":"text","text":"is not thread-safe"}]},{"type":"text","text":": you "},{"type":"strong","inlineContent":[{"type":"text","text":"must"}]},{"type":"text","text":" call it from the correct event"},{"type":"text","text":" "},{"type":"text","text":"loop thread."}]}],"kind":"content"}],"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopPromise":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopPromise"}],"abstract":[{"type":"text","text":"A promise to provide a result later."}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopPromise"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","title":"EventLoopPromise","role":"symbol","type":"topic","url":"\/documentation\/niocore\/eventlooppromise","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLHandler/stopTLS(promise:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler\/stopTLS(promise:)","abstract":[{"type":"text","text":"Called to instruct this handler to perform an orderly TLS shutdown and then remove itself"},{"type":"text","text":" "},{"text":"from the pipeline. This will leave the connection established, but remove the TLS wrapper","type":"text"},{"text":" ","type":"text"},{"text":"from it.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"stopTLS","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"promise"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore16EventLoopPromiseV","text":"EventLoopPromise"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">?)"}],"title":"stopTLS(promise:)","kind":"symbol","url":"\/documentation\/niossl\/niosslhandler\/stoptls(promise:)","role":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL/NIOSSLHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL\/NIOSSLHandler","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSSLHandler","kind":"identifier"}],"navigatorTitle":[{"text":"NIOSSLHandler","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/niossl\/niosslhandler","abstract":[{"text":"The base class for all NIOSSL handlers.","type":"text"}],"title":"NIOSSLHandler","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOSSL":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOSSL","type":"topic","kind":"symbol","url":"\/documentation\/niossl","abstract":[],"title":"NIOSSL","role":"collection"}}}