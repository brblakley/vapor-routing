{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"text":")","kind":"text"}],"languages":["swift"]}],"kind":"declarations"}],"kind":"symbol","abstract":[{"type":"text","text":"Allocates a buffer that can hold up to "},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" elements and initialise an empty ring backed by"},{"type":"text","text":" "},{"type":"text","text":"the buffer. When the ring grows to more than "},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" elements the buffer will be expanded."}],"metadata":{"externalID":"s:7NIOCore14CircularBufferV15initialCapacityACyxGSi_tcfc","symbolKind":"init","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"initialCapacity","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":")","kind":"text"}],"extendedModule":"NIOCore","role":"symbol","roleHeading":"Initializer","modules":[{"name":"NIOCore"}],"title":"init(initialCapacity:)"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer"]]},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer/init(initialCapacity:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"initialCapacity"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}],"type":"topic","role":"symbol","title":"init(initialCapacity:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer\/init(initialCapacity:)","abstract":[{"text":"Allocates a buffer that can hold up to ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements and initialise an empty ring backed by","type":"text"},{"text":" ","type":"text"},{"text":"the buffer. When the ring grows to more than ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"text":" elements the buffer will be expanded.","type":"text"}],"kind":"symbol","url":"\/documentation\/niocore\/circularbuffer\/init(initialcapacity:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"abstract":[{"text":"An automatically expanding ring buffer implementation backed by a ","type":"text"},{"code":"ContiguousArray","type":"codeVoice"},{"text":". Even though this implementation","type":"text"},{"text":" ","type":"text"},{"text":"will automatically expand if more elements than ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" are stored, itâ€™s advantageous to prevent"},{"type":"text","text":" "},{"type":"text","text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen."}],"kind":"symbol","title":"CircularBuffer","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","url":"\/documentation\/niocore\/circularbuffer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CircularBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"CircularBuffer"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"}}}