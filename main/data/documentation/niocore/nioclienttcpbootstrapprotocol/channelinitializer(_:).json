{"variants":[{"paths":["\/documentation\/niocore\/nioclienttcpbootstrapprotocol\/channelinitializer(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol"]]},"metadata":{"externalID":"s:7NIOCore29NIOClientTCPBootstrapProtocolP18channelInitializeryxAA15EventLoopFutureCyytGAA7Channel_pcF","required":true,"roleHeading":"Instance Method","role":"symbol","symbolKind":"method","modules":[{"name":"NIOCore"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelInitializer","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"title":"channelInitializer(_:)"},"sections":[],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelInitializer"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"handler"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier","text":"Channel"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"name":"handler","content":[{"inlineContent":[{"text":"A closure that initializes the provided ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The connected "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" will operate on "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" as inbound and "},{"type":"codeVoice","code":"IOData"},{"type":"text","text":" as outbound messages."}]},{"type":"aside","style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"handler"},{"type":"text","text":" closure may be invoked "},{"inlineContent":[{"text":"multiple times","type":"text"}],"type":"emphasis"},{"type":"text","text":" so it’s usually the right choice to instantiate"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s within "},{"type":"codeVoice","code":"handler"},{"type":"text","text":". The reason "},{"type":"codeVoice","code":"handler"},{"type":"text","text":" may be invoked multiple times is that to"},{"type":"text","text":" "},{"type":"text","text":"successfully set up a connection multiple connections might be setup in the process. Assuming a"},{"type":"text","text":" "},{"type":"text","text":"hostname that resolves to both IPv4 and IPv6 addresses, NIO will follow"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs"},{"type":"text","text":" and race both an IPv4 and an IPv6"},{"type":"text","text":" "},{"type":"text","text":"connection. It is possible that both connections get fully established before the IPv4 connection"},{"type":"text","text":" "},{"type":"text","text":"will be closed again because the IPv6 connection ‘won the race’. Therefore the "},{"type":"codeVoice","code":"channelInitializer"},{"type":"text","text":" "},{"type":"text","text":"might be called multiple times and it’s important not to share stateful "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s in more"},{"type":"text","text":" "},{"type":"text","text":"than one "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":"."}]}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol\/channelInitializer(_:)","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"Initialize the connected "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" with "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s to the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"url":"\/documentation\/niocore\/channel","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"title":"Channel","role":"symbol","abstract":[{"type":"text","text":"A "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol/channelInitializer(_:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol\/channelInitializer(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelInitializer"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Initialize the connected "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" with "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s to the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol\/channelinitializer(_:)","title":"channelInitializer(_:)","type":"topic","required":true},"https://en.wikipedia.org/wiki/Happy_Eyeballs":{"identifier":"https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs","url":"https:\/\/en.wikipedia.org\/wiki\/Happy_Eyeballs","title":"Happy Eyeballs","type":"link","titleInlineContent":[{"type":"emphasis","inlineContent":[{"text":"Happy Eyeballs","type":"text"}]}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol":{"url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","abstract":[{"code":"NIOClientTCPBootstrapProtocol","type":"codeVoice"},{"text":" is implemented by various underlying transport mechanisms. Typically,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this will be the BSD Sockets API implemented by "},{"type":"codeVoice","code":"ClientBootstrap"},{"text":".","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"type":"topic","title":"NIOClientTCPBootstrapProtocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"}}}