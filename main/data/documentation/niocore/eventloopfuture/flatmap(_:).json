{"metadata":{"modules":[{"name":"NIOCore"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"flatMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","externalID":"s:7NIOCore15EventLoopFutureC7flatMapyACyqd__GAExclF","extendedModule":"NIOCore","title":"flatMap(_:)","roleHeading":"Instance Method","symbolKind":"method"},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"flatMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"callback"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"NewValue"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"Function that will receive the value of this "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" and return"},{"type":"text","text":" "},{"type":"text","text":"a new "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"callback"}]},{"kind":"content","content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"A future that will receive the eventual value.","type":"text"}]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This allows you to dynamically dispatch new asynchronous tasks as phases in a"},{"type":"text","text":" "},{"type":"text","text":"longer series of processing steps. Note that you can use the results of the"},{"type":"text","text":" "},{"type":"text","text":"current "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" when determining how to dispatch the next operation."}],"type":"paragraph"},{"inlineContent":[{"text":"This works well when you have APIs that already know how to return ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":"s.","type":"text"},{"text":" ","type":"text"},{"text":"You can do something with the result of one and just return the next future:","type":"text"}],"type":"paragraph"},{"code":["let d1 = networkRequest(args).future()","let d2 = d1.flatMap { t -> EventLoopFuture<NewValue> in","    . . . something with t . . .","    return netWorkRequest(args)","}","d2.whenSuccess { u in","    NSLog(\"Result of second request: \\(u)\")","}"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Note: In a sense, the "},{"code":"EventLoopFuture<NewValue>","type":"codeVoice"},{"type":"text","text":" is returned before itâ€™s created."}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/flatMap(_:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/niocore\/eventloopfuture\/flatmap(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"]]},"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"When the current "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" is fulfilled, run the provided callback,"},{"type":"text","text":" "},{"type":"text","text":"which will provide a new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"."}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture/flatMap(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"flatMap"},{"kind":"text","text":"<"},{"text":"NewValue","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewValue","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture\/flatMap(_:)","kind":"symbol","abstract":[{"type":"text","text":"When the current "},{"type":"codeVoice","code":"EventLoopFuture<Value>"},{"type":"text","text":" is fulfilled, run the provided callback,"},{"type":"text","text":" "},{"type":"text","text":"which will provide a new "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/niocore\/eventloopfuture\/flatmap(_:)","title":"flatMap(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"}}}