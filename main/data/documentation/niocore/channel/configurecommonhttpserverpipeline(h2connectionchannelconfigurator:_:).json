{"variants":[{"paths":["\/documentation\/niocore\/channel\/configurecommonhttpserverpipeline(h2connectionchannelconfigurator:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"configureCommonHTTPServerPipeline","kind":"identifier"},{"text":"(","kind":"text"},{"text":"h2ConnectionChannelConfigurator","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">)?, (","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"role":"symbol","modules":[{"name":"NIOCore"}],"roleHeading":"Instance Method","title":"configureCommonHTTPServerPipeline(h2ConnectionChannelConfigurator:_:)","externalID":"s:7NIOCore7ChannelP8NIOHTTP2E33configureCommonHTTPServerPipeline012h2ConnectionB12Configurator_AA15EventLoopFutureCyytGAiaB_pcSg_AiaB_pctF","extendedModule":"NIOCore"},"abstract":[{"text":"Configures a ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":" to speak either HTTP or HTTP\/2 according to what can be negotiated with the client.","type":"text"}],"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"configureCommonHTTPServerPipeline"},{"kind":"text","text":"("},{"kind":"externalParam","text":"h2ConnectionChannelConfigurator"},{"kind":"text","text":": (("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","text":"Channel"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">)? = nil, ","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"configurator","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"An optional callback that will be invoked only","type":"text"},{"text":" ","type":"text"},{"text":"when the negotiated protocol is H2 to configure the connection channel.","type":"text"}],"type":"paragraph"}],"name":"h2ConnectionChannelConfigurator"},{"content":[{"inlineContent":[{"type":"text","text":"A callback that will be invoked after a protocol has been negotiated."},{"type":"text","text":" "},{"type":"text","text":"The callback only needs to add application-specific handlers and must return a future"},{"type":"text","text":" "},{"type":"text","text":"that completes when the channel has been fully mutated."}],"type":"paragraph"}],"name":"configurator"}],"kind":"parameters"},{"content":[{"text":"Return Value","level":2,"anchor":"return-value","type":"heading"},{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"EventLoopFuture<Void>"},{"type":"text","text":" that completes when the channel is ready."}],"type":"paragraph"}],"kind":"content"},{"content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"text":"This helper takes care of configuring the server pipeline such that it negotiates whether to","type":"text"},{"text":" ","type":"text"},{"text":"use HTTP\/1.1 or HTTP\/2. Once the protocol to use for the channel has been negotiated, the","type":"text"},{"text":" ","type":"text"},{"text":"provided callback will configure the application-specific handlers in a protocol-agnostic way.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This function doesnâ€™t configure the TLS handler. Callers of this function need to add a TLS"},{"type":"text","text":" "},{"type":"text","text":"handler appropriately configured to perform protocol negotiation."}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel\/configureCommonHTTPServerPipeline(h2ConnectionChannelConfigurator:_:)","interfaceLanguage":"swift"},"sections":[],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel/configureCommonHTTPServerPipeline(h2ConnectionChannelConfigurator:_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel\/configureCommonHTTPServerPipeline(h2ConnectionChannelConfigurator:_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"configureCommonHTTPServerPipeline","kind":"identifier"},{"text":"(","kind":"text"},{"text":"h2ConnectionChannelConfigurator","kind":"externalParam"},{"text":": ((","kind":"text"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">)?, ("},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":">"}],"abstract":[{"text":"Configures a ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":" to speak either HTTP or HTTP\/2 according to what can be negotiated with the client.","type":"text"}],"type":"topic","role":"symbol","kind":"symbol","title":"configureCommonHTTPServerPipeline(h2ConnectionChannelConfigurator:_:)","url":"\/documentation\/niocore\/channel\/configurecommonhttpserverpipeline(h2connectionchannelconfigurator:_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"url":"\/documentation\/niocore\/channel","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"title":"Channel","role":"symbol","abstract":[{"type":"text","text":"A "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"type":"topic"}}}