{"abstract":[{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,","type":"text"},{"text":" ","type":"text"},{"text":"NIO Transport Services, or other ways.","type":"text"}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOClientTCPBootstrap"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"Usually, to bootstrap a connection with SwiftNIO, you have to match the right ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":", the right bootstrap,","type":"text"},{"text":" ","type":"text"},{"text":"and the right TLS implementation. Typical choices involve:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"MultiThreadedEventLoopGroup"},{"type":"text","text":", "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":", and "},{"type":"codeVoice","code":"NIOSSLClientHandler"},{"type":"text","text":" (from"},{"type":"text","text":" "},{"type":"reference","identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","isActive":true},{"type":"text","text":") for NIO on BSD sockets."}]}]},{"content":[{"inlineContent":[{"code":"NIOTSEventLoopGroup","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"NIOTSConnectionBootstrap"},{"type":"text","text":", and the Network.framework TLS implementation (all from"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-nio-transport-services"},{"type":"text","text":"."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"Bootstrapping connections that way works but is quite tedious for packages that support multiple ways of","type":"text"},{"text":" ","type":"text"},{"text":"bootstrapping. The idea behind ","type":"text"},{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"text":" is to do all configuration in one place (when you initialize","type":"text"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"text":") and then have a common API that works for all use-cases.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Example:"}],"type":"paragraph"},{"code":["\/\/ This function combines the right pieces and returns you a \"universal client bootstrap\"","\/\/ (`NIOClientTCPBootstrap`). This allows you to bootstrap connections (with or without TLS) using either the","\/\/ NIO on sockets (`NIO`) or NIO on Network.framework (`NIOTransportServices`) stacks.","\/\/ The remainder of the code should be platform-independent.","func makeUniversalBootstrap(serverHostname: String) throws -> (NIOClientTCPBootstrap, EventLoopGroup) {","    func useNIOOnSockets() throws -> (NIOClientTCPBootstrap, EventLoopGroup) {","        let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","        let sslContext = try NIOSSLContext(configuration: TLSConfiguration.forClient())","        let bootstrap = try NIOClientTCPBootstrap(ClientBootstrap(group: group),","                                                  tls: NIOSSLClientTLSProvider(context: sslContext,","                                                                               serverHostname: serverHostname))","        return (bootstrap, group)","    }","","    #if canImport(Network)","    if #available(macOS 10.14, iOS 12, tvOS 12, watchOS 3, *) {","        \/\/ We run on a new-enough Darwin so we can use Network.framework","","        let group = NIOTSEventLoopGroup()","        let bootstrap = NIOClientTCPBootstrap(NIOTSConnectionBootstrap(group: group),","                                              tls: NIOTSClientTLSProvider())","        return (bootstrap, group)","    } else {","        \/\/ We're on Darwin but not new enough for Network.framework, so we fall back on NIO on BSD sockets.","        return try useNIOOnSockets()","    }","    #else","    \/\/ We are on a non-Darwin platform, so we'll use BSD sockets.","    return try useNIOOnSockets()","    #endif","}","","let (bootstrap, group) = try makeUniversalBootstrap(serverHostname: \"example.com\")","let connection = try bootstrap","        .channelInitializer { channel in","            channel.pipeline.addHandler(PrintEverythingHandler { _ in })","        }","        .enableTLS()","        .connect(host: \"example.com\", port: 443)","        .wait()"],"syntax":null,"type":"codeListing"}],"kind":"content"}],"metadata":{"role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"modules":[{"name":"NIOCore"}],"roleHeading":"Structure","navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"externalID":"s:7NIOCore21NIOClientTCPBootstrapV","title":"NIOClientTCPBootstrap","symbolKind":"struct"},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/init(_:tls:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/underlyingBootstrap"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelConvenienceOptions(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelInitializer(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelOption(_:value:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(host:port:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(unixDomainSocketPath:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connectTimeout(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/enableTLS()"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/nioclienttcpbootstrap"]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","interfaceLanguage":"swift"},"sections":[],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/enableTLS()":{"role":"symbol","kind":"symbol","title":"enableTLS()","abstract":[],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"enableTLS"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"NIOClientTCPBootstrap","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/enableTLS()","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/enabletls()","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(host:port:)":{"abstract":[{"type":"text","text":"Specify the "},{"type":"codeVoice","code":"host"},{"type":"text","text":" and "},{"type":"codeVoice","code":"port"},{"type":"text","text":" to connect to for the TCP "},{"type":"codeVoice","code":"Channel"},{"text":" that will be established.","type":"text"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(host:port:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"host","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"port"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel"},{"kind":"text","text":">"}],"url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(host:port:)","type":"topic","title":"connect(host:port:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap":{"url":"\/documentation\/niocore\/nioclienttcpbootstrap","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","abstract":[{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"NIO Transport Services, or other ways."}],"kind":"symbol","navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"type":"topic","title":"NIOClientTCPBootstrap","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelConvenienceOptions(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelConvenienceOptions(_:)","abstract":[{"text":"Specifies some ","type":"text"},{"code":"TCPConvenienceOption","type":"codeVoice"},{"text":"s to be applied to the channel.","type":"text"},{"text":" ","type":"text"},{"text":"These are preferred over regular channel options as they are easier to use and restrict","type":"text"},{"text":" ","type":"text"},{"text":"options to those which a normal user would consider.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelConvenienceOptions","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ChannelOptions","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore14ChannelOptionsV"},{"text":".","kind":"text"},{"text":"TCPConvenienceOptions","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore14ChannelOptionsV014TCPConvenienceC0V"},{"text":") -> ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV"}],"kind":"symbol","title":"channelConvenienceOptions(_:)","type":"topic","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelconvenienceoptions(_:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/underlyingBootstrap":{"fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"underlyingBootstrap","kind":"identifier"},{"text":": ","kind":"text"},{"text":"NIOClientTCPBootstrapProtocol","preciseIdentifier":"s:7NIOCore29NIOClientTCPBootstrapProtocolP","kind":"typeIdentifier"}],"role":"symbol","title":"underlyingBootstrap","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/underlyingBootstrap","abstract":[],"type":"topic","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/underlyingbootstrap","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(unixDomainSocketPath:)":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(unixDomainSocketPath:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(unixdomainsocketpath:)","title":"connect(unixDomainSocketPath:)","abstract":[{"type":"text","text":"Specify the "},{"type":"codeVoice","code":"unixDomainSocket"},{"type":"text","text":" path to connect to for the UDS "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that will be established."}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"text":"unixDomainSocketPath","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connectTimeout(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connectTimeout(_:)","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connecttimeout(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connectTimeout"},{"kind":"text","text":"("},{"preciseIdentifier":"s:7NIOCore10TimeAmountV","kind":"typeIdentifier","text":"TimeAmount"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","kind":"typeIdentifier","text":"NIOClientTCPBootstrap"}],"type":"topic","role":"symbol","abstract":[],"title":"connectTimeout(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/connect(to:)":{"role":"symbol","abstract":[{"type":"text","text":"Specify the "},{"type":"codeVoice","code":"address"},{"text":" to connect to for the TCP ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that will be established.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/connect(to:)","kind":"symbol","type":"topic","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/connect(to:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"SocketAddress","preciseIdentifier":"s:7NIOCore13SocketAddressO"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":">"}],"title":"connect(to:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/init(_:tls:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Bootstrap"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"TLS"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Bootstrap"},{"kind":"text","text":", "},{"kind":"externalParam","text":"tls"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"TLS"},{"kind":"text","text":")"}],"abstract":[{"type":"text","text":"Initialize a "},{"type":"codeVoice","code":"NIOClientTCPBootstrap"},{"type":"text","text":" using the underlying "},{"type":"codeVoice","code":"Bootstrap"},{"type":"text","text":" alongside a compatible "},{"type":"codeVoice","code":"TLS"},{"type":"text","text":" "},{"type":"text","text":"implementation."}],"url":"\/documentation\/niocore\/nioclienttcpbootstrap\/init(_:tls:)","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/init(_:tls:)","kind":"symbol","title":"init(_:tls:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelInitializer(_:)":{"title":"channelInitializer(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelInitializer","kind":"identifier"},{"text":"((","kind":"text"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">) -> ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV"}],"type":"topic","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channelinitializer(_:)","abstract":[{"type":"text","text":"Initialize the connected "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" with "},{"type":"codeVoice","code":"initializer"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s to the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelInitializer(_:)","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap/channelOption(_:value:)":{"abstract":[{"type":"text","text":"Specifies a "},{"code":"ChannelOption","type":"codeVoice"},{"type":"text","text":" to be applied to the "},{"code":"SocketChannel","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","url":"\/documentation\/niocore\/nioclienttcpbootstrap\/channeloption(_:value:)","title":"channelOption(_:value:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap\/channelOption(_:value:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelOption"},{"text":"<","kind":"text"},{"text":"Option","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"value","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Option","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore21NIOClientTCPBootstrapV","text":"NIOClientTCPBootstrap","kind":"typeIdentifier"}],"kind":"symbol"},"https://github.com/apple/swift-nio-transport-services":{"url":"https:\/\/github.com\/apple\/swift-nio-transport-services","titleInlineContent":[{"type":"codeVoice","code":"swift-nio-transport-services"}],"identifier":"https:\/\/github.com\/apple\/swift-nio-transport-services","type":"link","title":"swift-nio-transport-services"},"https://github.com/apple/swift-nio-ssl":{"url":"https:\/\/github.com\/apple\/swift-nio-ssl","titleInlineContent":[{"type":"codeVoice","code":"swift-nio-ssl"}],"identifier":"https:\/\/github.com\/apple\/swift-nio-ssl","type":"link","title":"swift-nio-ssl"}}}