{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-2lpuq"},"abstract":[{"type":"text","text":"Returns any "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" from the "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":", a common choice is the current "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"."}],"defaultImplementationsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop\/any()"],"title":"EventLoop Implementations"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-7m1zy"],"title":"EventLoopGroup Implementations"}],"variants":[{"paths":["\/documentation\/niocore\/eventloopgroup\/any()-2lpuq"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"typeIdentifier","text":"EventLoop"}],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","level":2,"anchor":"discussion"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You cannot rely on the returned "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" being the current one, not all "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":"s support"},{"type":"text","text":" "},{"type":"text","text":"choosing the current one. Use this method only if you are truly happy with "},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" of this"},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoopGroup"},{"type":"text","text":" instance."}]}],"type":"aside","name":"Warning","style":"warning"},{"content":[{"inlineContent":[{"text":"You will only receive the current ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" here iff the current ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" belongs to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":" you call ","type":"text"},{"type":"codeVoice","code":"any()"},{"text":" on.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method is useful having access to an "},{"code":"EventLoopGroup","type":"codeVoice"},{"type":"text","text":" without the knowledge of which "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" would be"},{"type":"text","text":" "},{"type":"text","text":"the best one to select to create a new "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":". This commonly happens in libraries where the user"},{"type":"text","text":" "},{"type":"text","text":"cannot indicate what "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" they would like their futures on."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically, it is faster to kick off a new operation on the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"current"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" because that minimised thread"},{"type":"text","text":" "},{"type":"text","text":"switches. Hence, if situations where you don’t need precise knowledge of what "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" some code is running"},{"type":"text","text":" "},{"type":"text","text":"on, use "},{"type":"codeVoice","code":"any()"},{"type":"text","text":" to indicate this."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The rule of thumb is: If you are trying to do "},{"type":"emphasis","inlineContent":[{"text":"load balancing","type":"text"}]},{"type":"text","text":", use "},{"type":"codeVoice","code":"next()"},{"type":"text","text":". If you just want to create a new"},{"type":"text","text":" "},{"type":"text","text":"future or kick off some operation, use "},{"type":"codeVoice","code":"any()"},{"type":"text","text":"."}]}]}],"kind":"symbol","metadata":{"required":true,"role":"symbol","title":"any()","externalID":"s:7NIOCore14EventLoopGroupP3anyAA0bC0_pyF","modules":[{"name":"NIOCore"}],"roleHeading":"Instance Method","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"kind":"text","text":"() -> "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"}]},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup/any()-7m1zy":{"url":"\/documentation\/niocore\/eventloopgroup\/any()-7m1zy","title":"any()","abstract":[{"type":"text","text":"The default implementation of "},{"code":"any()","type":"codeVoice"},{"type":"text","text":" just returns the "},{"code":"next()","type":"codeVoice"},{"type":"text","text":" EventLoop but it’s highly recommended to"},{"type":"text","text":" "},{"type":"text","text":"override this and return the current "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" if possible."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-7m1zy","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"any","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup":{"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EventLoopGroup"}],"url":"\/documentation\/niocore\/eventloopgroup","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"title":"EventLoopGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup/any()-2lpuq":{"url":"\/documentation\/niocore\/eventloopgroup\/any()-2lpuq","title":"any()","defaultImplementations":2,"abstract":[{"type":"text","text":"Returns any "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" from the "},{"code":"EventLoopGroup","type":"codeVoice"},{"type":"text","text":", a common choice is the current "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup\/any()-2lpuq","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"type":"topic","kind":"symbol","required":true,"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop/any()":{"url":"\/documentation\/niocore\/eventloop\/any()","title":"any()","abstract":[{"type":"text","text":"An "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" forms a singular "},{"code":"EventLoopGroup","type":"codeVoice"},{"type":"text","text":", returning itself as ‘any’ "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop\/any()","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"any"},{"text":"() -> ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"}],"type":"topic","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","type":"topic","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s until it’s closed."}]}}}