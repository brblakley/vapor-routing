{"sections":[],"kind":"symbol","metadata":{"externalID":"s:7NIOCore10ByteBufferV19NIOFoundationCompatE8readData6length10Foundation0G0VSgSi_tF","extendedModule":"NIOCore","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readData","kind":"identifier"},{"text":"(","kind":"text"},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Data","preciseIdentifier":"s:10Foundation4DataV","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"modules":[{"name":"NIOCore"}],"roleHeading":"Instance Method","title":"readData(length:)","symbolKind":"method"},"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"mutating"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readData"},{"kind":"text","text":"("},{"kind":"externalParam","text":"length"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Data","preciseIdentifier":"s:10Foundation4DataV"},{"kind":"text","text":"?"}]}]},{"parameters":[{"name":"length","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of bytes to be read from this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}]}]}],"kind":"parameters"},{"content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"code":"Data","type":"codeVoice"},{"text":" value containing ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if there aren’t at least ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" bytes readable.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" will use a heuristic to decide whether to copy the bytes or whether to reference "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"’s"},{"type":"text","text":" "},{"type":"text","text":"underlying storage from the returned "},{"type":"codeVoice","code":"Data"},{"type":"text","text":" value. If you want manual control over the byte transferring"},{"type":"text","text":" "},{"type":"text","text":"behaviour, please use "},{"type":"codeVoice","code":"readData(length:byteTransferStrategy:)"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/bytebuffer\/readdata(length:)"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/readData(length:)"},"abstract":[{"text":"Read ","type":"text"},{"type":"codeVoice","code":"length"},{"text":" bytes off this ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", move the reader index forward by ","type":"text"},{"type":"codeVoice","code":"length"},{"text":" bytes and return the result","type":"text"},{"text":" ","type":"text"},{"text":"as ","type":"text"},{"type":"codeVoice","code":"Data"},{"text":".","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"url":"\/documentation\/niocore\/bytebuffer","title":"ByteBuffer","kind":"symbol","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/readData(length:)":{"url":"\/documentation\/niocore\/bytebuffer\/readdata(length:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"readData"},{"kind":"text","text":"("},{"text":"length","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Data","preciseIdentifier":"s:10Foundation4DataV","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"kind":"symbol","role":"symbol","type":"topic","title":"readData(length:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/readData(length:)","abstract":[{"type":"text","text":"Read "},{"code":"length","type":"codeVoice"},{"type":"text","text":" bytes off this "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":", move the reader index forward by "},{"code":"length","type":"codeVoice"},{"type":"text","text":" bytes and return the result"},{"type":"text","text":" "},{"type":"text","text":"as "},{"code":"Data","type":"codeVoice"},{"type":"text","text":"."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"}}}