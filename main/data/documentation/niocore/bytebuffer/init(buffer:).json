{"metadata":{"role":"symbol","extendedModule":"NIOCore","roleHeading":"Initializer","title":"init(buffer:)","modules":[{"name":"NIOCore"}],"symbolKind":"init","externalID":"s:7NIOCore10ByteBufferV6bufferA2C_tcfc","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"buffer","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":")","kind":"text"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"buffer"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"kind":"text","text":")"}]}]},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"inlineContent":[{"text":"This may allocate a new ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with enough space to fit ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":" and potentially some extra space using","type":"text"},{"text":" ","type":"text"},{"text":"the default allocator.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"info: If you have access to a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":", "},{"type":"codeVoice","code":"ChannelHandlerContext"},{"type":"text","text":", or "},{"type":"codeVoice","code":"ByteBufferAllocator"},{"type":"text","text":" we"},{"type":"text","text":" "},{"type":"text","text":"recommend using "},{"type":"codeVoice","code":"channel.allocator.buffer(buffer:)"},{"type":"text","text":". Or if you want to write multiple items into the"},{"type":"text","text":" "},{"type":"text","text":"buffer use "},{"type":"codeVoice","code":"channel.allocator.buffer(capacity: ...)"},{"type":"text","text":" to allocate a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" of the right"},{"type":"text","text":" "},{"type":"text","text":"size followed by a "},{"type":"codeVoice","code":"writeImmutableBuffer"},{"type":"text","text":" instead of using this method. This allows SwiftNIO to do"},{"type":"text","text":" "},{"type":"text","text":"accounting and optimisations of resources acquired for operations on a given "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" in the future."}],"type":"paragraph"}]}]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this method only if you deliberately want to reallocate a potentially smaller "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" than the"},{"type":"text","text":" "},{"type":"text","text":"one you already have. Given that "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" is a value type, defensive copies are not necessary. If"},{"type":"text","text":" "},{"type":"text","text":"you have a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" but would like the "},{"type":"codeVoice","code":"readerIndex"},{"type":"text","text":" to start at "},{"type":"codeVoice","code":"0"},{"type":"text","text":", consider "},{"type":"codeVoice","code":"readSlice"},{"type":"text","text":" instead."}]}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/niocore\/bytebuffer\/init(buffer:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)"},"sections":[],"kind":"symbol","abstract":[{"text":"Create a fresh ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" containing the readable bytes of ","type":"text"},{"code":"buffer","type":"codeVoice"},{"text":".","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"url":"\/documentation\/niocore\/bytebuffer","title":"ByteBuffer","kind":"symbol","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer/init(buffer:)":{"role":"symbol","kind":"symbol","title":"init(buffer:)","type":"topic","abstract":[{"type":"text","text":"Create a fresh "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" containing the readable bytes of "},{"type":"codeVoice","code":"buffer"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer\/init(buffer:)","url":"\/documentation\/niocore\/bytebuffer\/init(buffer:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"buffer","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":")","kind":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"}}}