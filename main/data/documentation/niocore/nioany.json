{"metadata":{"roleHeading":"Structure","symbolKind":"struct","modules":[{"name":"NIOCore"}],"title":"NIOAny","externalID":"s:7NIOCore6NIOAnyV","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}]},"abstract":[{"code":"NIOAny","type":"codeVoice"},{"text":" is an opaque container for values of ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"text":" type, similar to Swift’s builtin ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":", ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"AddressEnvelope<ByteBuffer>"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" just like "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" will contain them within an existential container."}],"relationshipsSections":[{"type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP"],"title":"Conforms To"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations"],"generated":true,"title":"Default Implementations"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}],"platforms":["Linux"]}]},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"The most important use-cases for ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" are values travelling through the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" whose type can’t","type":"text"},{"text":" ","type":"text"},{"text":"be calculated at compile time. For example:","type":"text"}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"the ","type":"text"},{"code":"channelRead","type":"codeVoice"},{"text":" of any ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"text":"the ","type":"text"},{"type":"codeVoice","code":"write"},{"text":" method of a ","type":"text"},{"type":"codeVoice","code":"ChannelOutboundHandler"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The abstraction that delivers a "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" to user code must provide a mechanism to unwrap a "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a"},{"type":"text","text":" "},{"type":"text","text":"certain type known at run-time. Canonical example:"}]},{"type":"codeListing","code":["class SandwichHandler: ChannelInboundHandler {","    typealias InboundIn = Bacon \/* we expected to be delivered `Bacon` ... *\/","    typealias InboundOut = Sandwich \/* ... and we will make and deliver a `Sandwich` from that *\/","","    func channelRead(context: ChannelHandlerContext, data: NIOAny) {","         \/* we receive the `Bacon` as a `NIOAny` as at compile-time the exact configuration of the channel","            pipeline can't be computed. The pipeline can't be computed at compile time as it can change","            dynamically at run-time. Yet, we assert that in any configuration the channel handler before","            `SandwichHandler` does actually send us a stream of `Bacon`.","         *\/","         let bacon = self.unwrapInboundIn(data) \/* `Bacon` or crash *\/","         let sandwich = makeSandwich(bacon)","         context.fireChannelRead(self.wrapInboundOut(sandwich)) \/* as promised we deliver a wrapped `Sandwich` *\/","    }","}"],"syntax":null}],"kind":"content"}],"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/niocore\/nioany"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"role":"symbol","kind":"symbol","abstract":[{"code":"NIOAny","type":"codeVoice"},{"text":" is an opaque container for values of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" type, similar to Swift’s builtin ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","url":"\/documentation\/niocore\/nioany","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"title":"NIOAny","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/CustomStringConvertible-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/CustomStringConvertible-Implementations","url":"\/documentation\/niocore\/nioany\/customstringconvertible-implementations","type":"topic","role":"collectionGroup","abstract":[],"title":"CustomStringConvertible Implementations","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny/init(_:)":{"abstract":[{"text":"Wrap a value in a ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":". In most cases you should not create a ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" directly using this constructor.","type":"text"},{"text":" ","type":"text"},{"text":"The abstraction that accepts values of type ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" must also provide a mechanism to do the wrapping. An","type":"text"},{"text":" ","type":"text"},{"text":"example is a ","type":"text"},{"type":"codeVoice","code":"ChannelInboundHandler"},{"text":" which provides ","type":"text"},{"type":"codeVoice","code":"self.wrapInboundOut(aValueOfTypeInboundOut)"},{"text":".","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"T","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/niocore\/nioany\/init(_:)","title":"init(_:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/s23CustomStringConvertibleP":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/s23CustomStringConvertibleP","type":"unresolvable","title":"Swift.CustomStringConvertible"}}}