{"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type = T.self) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"languages":["swift"]}]},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" to unwrap.","type":"text"}]}],"name":"data"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The type to extract from the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"as"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"The content of the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if the type is incorrect.","type":"text"}]}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","level":2,"type":"heading"},{"inlineContent":[{"text":"This method is intended for use when writing custom ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"text":" implementations.","type":"text"},{"text":" ","type":"text"},{"text":"This can safely be called in methods like ","type":"text"},{"code":"write0","type":"codeVoice"},{"text":" to extract data from the ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" ","type":"text"},{"text":"provided in those cases.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If the unwrap fails, this will return "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":" implementations should almost"},{"type":"text","text":" "},{"type":"text","text":"always support only one runtime type, so in general they should avoid using this and prefer"},{"type":"text","text":" "},{"type":"text","text":"using "},{"type":"codeVoice","code":"unwrapData"},{"type":"text","text":" instead. This method exists for rare use-cases where tolerating type"},{"type":"text","text":" "},{"type":"text","text":"mismatches is acceptable."}],"type":"paragraph"},{"style":"warning","name":"Warning","content":[{"type":"paragraph","inlineContent":[{"text":"If you are implementing a ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"text":", you should use ","type":"text"},{"code":"unwrapData","type":"codeVoice"},{"text":" unless you","type":"text"},{"text":" ","type":"text"},{"text":"are doing something ","type":"text"},{"inlineContent":[{"type":"text","text":"extremely"}],"type":"emphasis"},{"text":" unusual.","type":"text"}]}],"type":"aside"}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)"},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore"]]},"abstract":[{"type":"text","text":"Attempts to unwrap the given "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a specific concrete type."}],"metadata":{"title":"tryUnwrapData(_:as:)","roleHeading":"Instance Method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"modules":[{"name":"NIOCore"}],"role":"symbol","externalID":"s:7NIOCore11ChannelCorePAAE13tryUnwrapData_2asqd__SgAA6NIOAnyV_qd__mtlF","symbolKind":"method","extendedModule":"NIOCore"},"variants":[{"paths":["\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"role":"symbol","kind":"symbol","abstract":[{"code":"NIOAny","type":"codeVoice"},{"text":" is an opaque container for values of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" type, similar to Swiftâ€™s builtin ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","url":"\/documentation\/niocore\/nioany","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"title":"NIOAny","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore/tryUnwrapData(_:as:)":{"title":"tryUnwrapData(_:as:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"tryUnwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":"?"}],"kind":"symbol","url":"\/documentation\/niocore\/channelcore\/tryunwrapdata(_:as:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/tryUnwrapData(_:as:)","type":"topic","abstract":[{"type":"text","text":"Attempts to unwrap the given "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" as a specific concrete type."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"url":"\/documentation\/niocore\/channelcore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","abstract":[{"text":"The core ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" methods that are for internal use of the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" implementation only."}],"kind":"symbol","navigatorTitle":[{"text":"ChannelCore","kind":"identifier"}],"type":"topic","title":"ChannelCore","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelCore","kind":"identifier"}]}}}