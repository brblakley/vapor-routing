{"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"data"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV","text":"NIOAny"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type = T.self) -> "},{"kind":"typeIdentifier","text":"T"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" to unwrap.","type":"text"}]}],"name":"data"},{"content":[{"inlineContent":[{"type":"text","text":"The type to extract from the "},{"code":"NIOAny","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"as"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"return-value","text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The content of the "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":"."}]}]},{"kind":"content","content":[{"text":"Discussion","level":2,"type":"heading","anchor":"discussion"},{"inlineContent":[{"type":"text","text":"This method is intended for use when writing custom "},{"type":"codeVoice","code":"ChannelCore"},{"type":"text","text":" implementations."},{"type":"text","text":" "},{"type":"text","text":"This can safely be called in methods like "},{"type":"codeVoice","code":"write0"},{"type":"text","text":" to extract data from the "},{"type":"codeVoice","code":"NIOAny"},{"type":"text","text":" "},{"type":"text","text":"provided in those cases."}],"type":"paragraph"},{"inlineContent":[{"text":"Note that if the unwrap fails, this will cause a runtime trap. ","type":"text"},{"code":"ChannelCore","type":"codeVoice"},{"text":" ","type":"text"},{"text":"implementations should be concrete about what types they support writing. If multiple","type":"text"},{"text":" ","type":"text"},{"text":"types are supported, consider using a tagged union to store the type information like","type":"text"},{"text":" ","type":"text"},{"text":"NIO’s own ","type":"text"},{"code":"IOData","type":"codeVoice"},{"text":", which will minimise the amount of runtime type checking.","type":"text"}],"type":"paragraph"}]}],"kind":"symbol","metadata":{"modules":[{"name":"NIOCore"}],"symbolKind":"method","externalID":"s:7NIOCore11ChannelCorePAAE10unwrapData_2asqd__AA6NIOAnyV_qd__mtlF","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwrapData"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"T"},{"kind":"text","text":">("},{"text":"NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"text":", ","kind":"text"},{"text":"as","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"}],"extendedModule":"NIOCore","role":"symbol","title":"unwrapData(_:as:)","roleHeading":"Instance Method"},"variants":[{"paths":["\/documentation\/niocore\/channelcore\/unwrapdata(_:as:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Unwraps the given ","type":"text"},{"type":"codeVoice","code":"NIOAny"},{"text":" as a specific concrete type.","type":"text"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/unwrapData(_:as:)","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"url":"\/documentation\/niocore\/channelcore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","abstract":[{"text":"The core ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" methods that are for internal use of the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" implementation only."}],"kind":"symbol","navigatorTitle":[{"text":"ChannelCore","kind":"identifier"}],"type":"topic","title":"ChannelCore","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelCore","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore/unwrapData(_:as:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unwrapData"},{"kind":"text","text":"<"},{"text":"T","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"NIOAny","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore6NIOAnyV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"as"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"T"},{"kind":"text","text":".Type) -> "},{"kind":"typeIdentifier","text":"T"}],"role":"symbol","title":"unwrapData(_:as:)","type":"topic","kind":"symbol","url":"\/documentation\/niocore\/channelcore\/unwrapdata(_:as:)","abstract":[{"type":"text","text":"Unwraps the given "},{"type":"codeVoice","code":"NIOAny"},{"text":" as a specific concrete type.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore\/unwrapData(_:as:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"role":"symbol","kind":"symbol","abstract":[{"code":"NIOAny","type":"codeVoice"},{"text":" is an opaque container for values of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" type, similar to Swift’s builtin ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","url":"\/documentation\/niocore\/nioany","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"title":"NIOAny","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}]}}}