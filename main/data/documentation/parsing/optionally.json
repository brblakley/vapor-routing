{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally"},"kind":"symbol","sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optionally"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Wrapped"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier","text":"Parser","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"}],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this parser when you are parsing into an output data model that contains "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"When the wrapped parser fails ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally"},{"text":" will backtrack any consumption of the input so","type":"text"},{"text":" ","type":"text"},{"text":"that later parsers can attempt to parser the input:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ nil 1️⃣","try parser.parse(\"Hello, true world!\") \/\/ true"]},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally","isActive":true,"type":"reference"},{"text":" did not backtrack then 1️⃣ would fail because it would consume a space,","type":"text"},{"text":" ","type":"text"},{"text":"causing the ","type":"text"},{"code":"\" world!\"","type":"codeVoice"},{"text":" parser to fail since there is no longer any space to consume.","type":"text"},{"text":" ","type":"text"},{"text":"Read the article ","type":"text"},{"text":"doc:Backtracking","type":"text"},{"text":" to learn more about how backtracking works.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you are optionally parsing input that should coalesce into some default, you can skip the","type":"text"},{"text":" ","type":"text"},{"text":"optionality and instead use ","type":"text"},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/replaceError(with:)","isActive":true},{"text":" with a default:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["Optionally { Int.parser() }","  .map { $0 ?? 0 }","","\/\/ vs.","","Int.parser()","  .replaceError(with: 0)"]}],"kind":"content"}],"metadata":{"title":"Optionally","modules":[{"name":"Parsing"}],"role":"symbol","externalID":"s:7Parsing10OptionallyV","symbolKind":"struct","navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}],"roleHeading":"Structure"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/optionally"]}],"relationshipsSections":[{"title":"Conforms To","type":"conformsTo","kind":"relationships","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"]}],"abstract":[{"type":"text","text":"A parser that runs the given parser and succeeds with "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if it fails."}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/wrapped"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/parse(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/ParserPrinter-Implementations"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/ParserPrinter-Implementations":{"abstract":[],"title":"ParserPrinter Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/ParserPrinter-Implementations","url":"\/documentation\/parsing\/optionally\/parserprinter-implementations","type":"topic","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"abstract":[{"type":"text","text":"A "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","type":"reference","isActive":true},{"type":"text","text":" that can incrementally “print” an output value back into an input."}],"url":"\/documentation\/parsing\/parserprinter","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Wrapped","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ParserPrinter","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"title":"ParserPrinter","role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/init(_:)":{"title":"init(_:)","role":"symbol","abstract":[],"type":"topic","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(() -> ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/init(_:)","url":"\/documentation\/parsing\/optionally\/init(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/replaceError(with:)":{"role":"symbol","type":"topic","url":"\/documentation\/parsing\/optionally\/replaceerror(with:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","text":"ReplaceError","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"replaceError(with:)","abstract":[{"type":"text","text":"A parser that replaces its error with a provided output."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/replaceError(with:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/wrapped":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/wrapped","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrapped"},{"kind":"text","text":": "},{"text":"Wrapped","kind":"typeIdentifier"}],"abstract":[],"title":"wrapped","url":"\/documentation\/parsing\/optionally\/wrapped","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","type":"topic","kind":"symbol","url":"\/documentation\/parsing","abstract":[],"title":"Parsing","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally":{"url":"\/documentation\/parsing\/optionally","title":"Optionally","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally","navigatorTitle":[{"kind":"identifier","text":"Optionally"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optionally"}],"abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if it fails.","type":"text"}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/parse(_:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/parse(_:)","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"title":"parse(_:)","url":"\/documentation\/parsing\/optionally\/parse(_:)","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Optionally/Parser-Implementations":{"url":"\/documentation\/parsing\/optionally\/parser-implementations","title":"Parser Implementations","role":"collectionGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Optionally\/Parser-Implementations","abstract":[],"type":"topic","kind":"article"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"}}}