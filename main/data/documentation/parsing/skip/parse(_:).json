{"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Skip\/parse(_:)","interfaceLanguage":"swift"},"metadata":{"externalID":"s:7Parsing4SkipV5parseyy5InputQzzKF","modules":[{"name":"Parsing"}],"role":"symbol","title":"parse(_:)","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"roleHeading":"Instance Method"},"variants":[{"paths":["\/documentation\/parsing\/skip\/parse(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"code":"Parser","type":"codeVoice"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Skip"]]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"input","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"platforms":["Linux"]}]},{"parameters":[{"name":"input","content":[{"type":"paragraph","inlineContent":[{"text":"A nebulous, mutable piece of data to be incrementally parsed.","type":"text"}]}]}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A more well-structured value parsed from the given input."}]}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Skip":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Skip"}],"title":"Skip","url":"\/documentation\/parsing\/skip","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Skip"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Skip","abstract":[{"type":"text","text":"A parser that discards the output of another parser."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","type":"topic","kind":"symbol","url":"\/documentation\/parsing","abstract":[],"title":"Parsing","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Skip/parse(_:)":{"url":"\/documentation\/parsing\/skip\/parse(_:)","type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Skip\/parse(_:)","role":"symbol","title":"parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"}],"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}]}}}