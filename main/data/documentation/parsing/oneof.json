{"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Parsers","kind":"genericParameter"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:7Parsing6ParserP","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","text":"Parser"}],"platforms":["Linux"]}]},{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this parser to list out a number of parsers in a "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOfBuilder","isActive":true,"type":"reference"},{"type":"text","text":" result builder block."}]},{"type":"paragraph","inlineContent":[{"text":"The following example uses ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" to parse an enum value. To do so, it spells out a list of","type":"text"},{"text":" ","type":"text"},{"text":"parsers to ","type":"text"},{"code":"OneOf","type":"codeVoice"},{"text":", one for each case:","type":"text"}]},{"code":["enum Currency { case eur, gbp, usd }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This parser fails if every parser inside fails:","type":"text"}]},{"code":["var input = \"London, Hello!\"[...]","try OneOf { \"New York\"; \"Berlin\" }.parse(&input)","","\/\/ error: multiple failures occurred","\/\/","\/\/ error: unexpected input","\/\/  --> input:1:1","\/\/ 1 | London, Hello!","\/\/   | ^ expected \"New York\"","\/\/   | ^ expected \"Berlin\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are parsing input that should coalesce into some default, avoid using a final "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always"},{"type":"text","text":" "},{"type":"text","text":"parser, and instead opt for a trailing "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)"},{"type":"text","text":", which returns a parser that"},{"type":"text","text":" "},{"type":"text","text":"cannot fail:"}]},{"code":["enum Currency { case eur, gbp, usd, unknown }","","let currency = OneOf {","  \"€\".map { Currency.eur }","  \"£\".map { Currency.gbp }","  \"$\".map { Currency.usd }","}",".replaceError(with: Currency.unknown)","","currency.parse(\"$\")  \/\/ Currency.usd","currency.parse(\"฿\")  \/\/ Currency.unknown"],"type":"codeListing","syntax":"swift"},{"type":"heading","level":2,"anchor":"Specificity","text":"Specificity"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The order of the parsers in the above "},{"type":"reference","isActive":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf"},{"type":"text","text":" does not matter because each of “€”, “£” and “$”"},{"type":"text","text":" "},{"type":"text","text":"are mutually exclusive, i.e. at most one will succeed on any given input."}]},{"type":"paragraph","inlineContent":[{"text":"However, that is not always true, and when the parsers are not mutually exclusive (i.e. multiple","type":"text"},{"text":" ","type":"text"},{"text":"can succeed on a given input) you must order them from most specific to least specific. That is,","type":"text"},{"text":" ","type":"text"},{"text":"the first parser should succeed on the fewest number of inputs and the last parser should","type":"text"},{"text":" ","type":"text"},{"text":"succeed on the most number of inputs.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose you wanted to parse a simple CSV format into a doubly-nested array of","type":"text"},{"text":" ","type":"text"},{"text":"strings, and the fields in the CSV are allowed to contain commas themselves as long as they","type":"text"},{"text":" ","type":"text"},{"text":"are quoted:","type":"text"}]},{"code":["let input = #\"\"\"","lastName,firstName","McBlob,Blob","\"McBlob, Esq.\",Blob Jr.","\"McBlob, MD\",Blob Sr.","\"\"\"#"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we have a list of last and first names separated by a comma, and some of the last names are"},{"type":"text","text":" "},{"type":"text","text":"quoted because they contain commas."}]},{"type":"paragraph","inlineContent":[{"text":"In order to safely parse this we must first try parsing a field as a quoted field, and then only","type":"text"},{"text":" ","type":"text"},{"text":"if that fails we can parse a plain field that takes everything up until the next comma or","type":"text"},{"text":" ","type":"text"},{"text":"newline:","type":"text"}]},{"code":["let quotedField = Parse {","  \"\\\"\"","  Prefix { $0 != \"\\\"\" }","  \"\\\"\"","}","let plainField = Prefix { $0 != \",\" && $0 != \"\\n\" }","","let field = OneOf {","  quotedField","  plainField","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Then we can parse many fields to form an array of fields making up a line, and then parse many","type":"text"},{"text":" ","type":"text"},{"text":"lines to make up a full, doubly-nested array for the CSV:","type":"text"}]},{"code":["let line = Many { field } separator: { \",\" }","let csv = Many { line } separator: { \"\\n\" }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Running this parser on the input shows that it properly isolates each field of the CSV, even","type":"text"},{"text":" ","type":"text"},{"text":"fields that are quoted and contain a comma:","type":"text"}]},{"code":["XCTAssertEqual(","  try csv.parse(input),","  [","    [\"lastName\", \"firstName\"],","    [\"McBlob\", \"Blob\"],","    [\"McBlob, Esq.\", \"Blob Jr.\"],","    [\"McBlob, MD\", \"Blob Sr.\"],","  ]",")","\/\/ ✅"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The reason this parser works is because the ","type":"text"},{"type":"codeVoice","code":"quotedField"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"plainField"},{"text":" parsers are listed in","type":"text"},{"text":" ","type":"text"},{"text":"a very specific order inside the ","type":"text"},{"type":"codeVoice","code":"OneOf"},{"text":":","type":"text"}]},{"code":["let field = OneOf {","  quotedField","  plainField","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser is a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"more","type":"text"}]},{"text":" specific parser in that it will succeed on fewer inputs","type":"text"},{"text":" ","type":"text"},{"text":"than the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser does. For example:","type":"text"}]},{"code":["try quotedField.parse(\"Blob Jr.\") \/\/ ❌","try plainField.parse(\"Blob Jr.\")  \/\/ ✅"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Whereas the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser will happily succeed on anything the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser will","type":"text"},{"text":" ","type":"text"},{"text":"succeed on:","type":"text"}]},{"code":["try quotedField.parse(\"\\\"Blob, Esq\\\"\") \/\/ ✅","try plainField.parse(\"\\\"Blob, Esq\\\"\")  \/\/ ✅"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For this reason the ","type":"text"},{"code":"quotedField","type":"codeVoice"},{"text":" parser must be listed first so that it can try its logic","type":"text"},{"text":" ","type":"text"},{"text":"first, which succeeds less frequently, before then trying the ","type":"text"},{"code":"plainField","type":"codeVoice"},{"text":" parser, which","type":"text"},{"text":" ","type":"text"},{"text":"succeeds more often.","type":"text"}]},{"type":"heading","level":2,"anchor":"Backtracking","text":"Backtracking"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","isActive":true,"type":"reference"},{"text":" parser is the primary tool for introducing backtracking into your parsers,","type":"text"},{"text":" ","type":"text"},{"text":"which means to undo the consumption of a parser when it fails. For more information, see the","type":"text"},{"text":" ","type":"text"},{"text":"article ","type":"text"},{"text":"doc:Backtracking","type":"text"},{"text":".","type":"text"}]}],"kind":"content"}],"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/init(_:)"]},{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parsers"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parse(_:)"]},{"title":"Default Implementations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"],"generated":true}],"abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"metadata":{"navigatorTitle":[{"text":"OneOf","kind":"identifier"}],"modules":[{"name":"Parsing"}],"roleHeading":"Structure","externalID":"s:7Parsing5OneOfV","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"OneOf","kind":"identifier"}],"role":"symbol","title":"OneOf","symbolKind":"struct"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/oneof"]}],"kind":"symbol","sections":[],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"],"type":"conformsTo"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Always":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Always"}],"title":"Always","url":"\/documentation\/parsing\/always","type":"topic","navigatorTitle":[{"kind":"identifier","text":"Always"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Always","abstract":[{"type":"text","text":"A parser that always succeeds with the given value, and does not consume any input."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/parsers":{"abstract":[],"title":"parsers","url":"\/documentation\/parsing\/oneof\/parsers","role":"symbol","fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"parsers"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Parsers"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parsers"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/init(_:)":{"abstract":[],"title":"init(_:)","url":"\/documentation\/parsing\/oneof\/init(_:)","role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":")"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/init(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/parse(_:)":{"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"code":"Parser","type":"codeVoice"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"title":"parse(_:)","url":"\/documentation\/parsing\/oneof\/parse(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/parse(_:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/ParserPrinter":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Parsers","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ParserPrinter","type":"codeVoice"},{"text":".","type":"text"}]},"abstract":[{"text":"A ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","isActive":true,"type":"reference"},{"text":" that can incrementally “print” an output value back into an input.","type":"text"}],"title":"ParserPrinter","url":"\/documentation\/parsing\/parserprinter","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ParserPrinter"}],"type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ParserPrinter"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/ParserPrinter"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/ParserPrinter-Implementations":{"abstract":[],"title":"ParserPrinter Implementations","url":"\/documentation\/parsing\/oneof\/parserprinter-implementations","role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/ParserPrinter-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/replaceError(with:)":{"abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"title":"replaceError(with:)","url":"\/documentation\/parsing\/oneof\/replaceerror(with:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"replaceError"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7Parsing7ParsersO","kind":"typeIdentifier","text":"Parsers"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV","kind":"typeIdentifier","text":"ReplaceError"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"type":"topic","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/replaceError(with:)"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOfBuilder":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOfBuilder","type":"topic","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOfBuilder"}],"navigatorTitle":[{"kind":"identifier","text":"OneOfBuilder"}],"kind":"symbol","url":"\/documentation\/parsing\/oneofbuilder","abstract":[{"type":"text","text":"A custom parameter attribute that constructs parsers from closures. The constructed parser"},{"type":"text","text":" "},{"type":"text","text":"runs each parser in the closure, one after another, till one succeeds with an output."}],"title":"OneOfBuilder","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf/Parser-Implementations":{"abstract":[],"title":"Parser Implementations","url":"\/documentation\/parsing\/oneof\/parser-implementations","role":"collectionGroup","type":"topic","kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf\/Parser-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Parsing/OneOf":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"title":"OneOf","url":"\/documentation\/parsing\/oneof","type":"topic","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/OneOf","abstract":[{"type":"text","text":"A parser that attempts to run a number of parsers till one succeeds."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","type":"topic","kind":"symbol","url":"\/documentation\/parsing","abstract":[],"title":"Parsing","role":"collection"}}}