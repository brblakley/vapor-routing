{"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"modules":[{"name":"Parsing"}],"title":"parse(_:)","extendedModule":"Parsing","roleHeading":"Instance Method","symbolKind":"method","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"externalID":"s:7Parsing6ParserPAAE5parsey6OutputQzqd__KSlRd__11SubSequenceQyd__5InputRtzlF"},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0","interfaceLanguage":"swift"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"input"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":" "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":" : "},{"preciseIdentifier":"s:Sl","kind":"typeIdentifier","text":"Collection"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"SubSequence"}],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"input","content":[{"type":"paragraph","inlineContent":[{"text":"A nebulous collection of data to be parsed.","type":"text"}]}]}]},{"content":[{"level":2,"type":"heading","text":"Return Value","anchor":"return-value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A more well-structured value parsed from the given input."}]}],"kind":"content"},{"content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"text":"Rather than having to create a mutable subsequence value, such as a ","type":"text"},{"code":"Substring","type":"codeVoice"},{"text":", and feed it","type":"text"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true,"type":"reference"},{"text":" method like this:","type":"text"}]},{"code":["var input = \"123,true\"[...]","let output = try Parse {","  Int.parser()","  \",\"","  Bool.parser()","}",".parse(&input) \/\/ (123, true)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can just feed a plain ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" input directly:","type":"text"}]},{"code":["let output = try Parse {","  Int.parser()","  \",\"","  Bool.parser()","}",".parse(\"123,true\") \/\/ (123, true)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method will fail if the parser does not consume the entirety of the input."},{"type":"text","text":" "},{"type":"text","text":"For example:"}]},{"code":["let output = try Parse {"," Int.parser()"," \",\""," Bool.parser()","}",".parse(\"123,true    \")","","\/\/ error: unexpected input","\/\/  --> input:1:9","\/\/ 1 | 123,true␣␣␣␣","\/\/   |         ^ expected end of input"],"type":"codeListing","syntax":"swift"},{"name":"Tip","style":"tip","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"If your input can have trailing whitespace that you would like to consume and discard","type":"text"},{"text":" ","type":"text"},{"text":"you can do so like this:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let output = try Parse {","  Int.parser()","  \",\".utf8","  Bool.parser()","  Whitespace()","}",".parse(\"123,true    \") \/\/ (123, true)"]}]}],"kind":"content"}],"variants":[{"paths":["\/documentation\/parsing\/parser\/parse(_:)-6h1d0"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw"]]},"sections":[],"kind":"symbol","abstract":[{"type":"text","text":"Parse a collection into an output using a parser that works on the collection’s "},{"type":"codeVoice","code":"SubSequence"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This method is more ergnomic to use than "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true},{"type":"text","text":" because it accepts a"},{"type":"text","text":" "},{"type":"text","text":"collection directly rather than its subsequence, and the input does not need to be "},{"type":"codeVoice","code":"inout"},{"type":"text","text":"."}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","type":"topic","kind":"symbol","url":"\/documentation\/parsing","abstract":[],"title":"Parsing","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser":{"abstract":[{"text":"Declares a type that can incrementally parse an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value from an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value.","type":"text"}],"title":"Parser","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}],"url":"\/documentation\/parsing\/parser","type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-76tcw":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","title":"parse(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"("},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"kind":"symbol","type":"topic","role":"symbol","required":true,"defaultImplementations":3,"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"url":"\/documentation\/parsing\/parser\/parse(_:)-76tcw"},"doc://co.pointfree.VaporRouting/documentation/Parsing/Parser/parse(_:)-6h1d0":{"url":"\/documentation\/parsing\/parser\/parse(_:)-6h1d0","abstract":[{"text":"Parse a collection into an output using a parser that works on the collection’s ","type":"text"},{"type":"codeVoice","code":"SubSequence"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This method is more ergnomic to use than ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-76tcw","isActive":true,"type":"reference"},{"text":" because it accepts a","type":"text"},{"text":" ","type":"text"},{"text":"collection directly rather than its subsequence, and the input does not need to be ","type":"text"},{"type":"codeVoice","code":"inout"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Parser\/parse(_:)-6h1d0","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"parse"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}],"role":"symbol","title":"parse(_:)","type":"topic"}}}