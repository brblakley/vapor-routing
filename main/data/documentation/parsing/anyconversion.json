{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion"},"metadata":{"externalID":"s:7Parsing13AnyConversionV","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"role":"symbol","modules":[{"name":"Parsing"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}],"title":"AnyConversion","roleHeading":"Structure","symbolKind":"struct"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AnyConversion"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Input"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"Output"},{"kind":"text","text":">"}],"languages":["swift"]}]},{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"This conversion forwards its "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/apply(_:)"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/unapply(_:)"},{"type":"text","text":" methods to an arbitrary"},{"type":"text","text":" "},{"type":"text","text":"underlying conversion having the same "},{"code":"Input","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Output","type":"codeVoice"},{"type":"text","text":" types, hiding the specifics of the"},{"type":"text","text":" "},{"type":"text","text":"underlying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"AnyConversion"},{"type":"text","text":" to wrap a conversion whose type has details you don’t want to expose across"},{"type":"text","text":" "},{"type":"text","text":"API boundaries, such as different modules. When you use type erasure this way, you can change"},{"type":"text","text":" "},{"type":"text","text":"the underlying conversion over time without affecting existing clients."}],"type":"paragraph"},{"inlineContent":[{"code":"AnyConversion","type":"codeVoice"},{"text":" can also be useful for experimenting with ad hoc conversions in a lightweight","type":"text"},{"text":" ","type":"text"},{"text":"manner. One can avoid the upfront ceremony of defining a whole new type and instead create a","type":"text"},{"text":" ","type":"text"},{"text":"“conformance” inline by specifying the ","type":"text"},{"code":"apply","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"unapply","type":"codeVoice"},{"text":" functions directly","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["Prefix { $0.isNumber }","  .map(","    AnyConversion(","      apply: { Int(String($0)) },","      unapply: { String($0)[...] {","    )","  )","","\/\/ vs.","","struct SubstringToInt: Conversion {","  func apply(_ input: Substring) throws -> Int {","    guard let int = Int(String(input)) else {","      struct ConvertingError: Error {}","      throw ConvertingError()","    }","    return int","  }","","  func unapply(_ output: Int) -> Substring {","    String(output)[...]","  }","}","","Prefix { $0.isNumber }","  .map(SubstringToInt())"]},{"inlineContent":[{"text":"If performance is a consideration of your parser-printer, you should avoid ","type":"text"},{"code":"AnyConversion","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"text":"instead create custom types that conform to the ","type":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","isActive":true,"type":"reference"},{"text":" protocol.","type":"text"}],"type":"paragraph"}]}],"abstract":[{"type":"text","text":"A type-erased "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","isActive":true},{"type":"text","text":"."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing\/anyconversion"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing"]]},"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion"],"title":"Conforms To"}],"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/init(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/apply(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/unapply(_:)"],"title":"Instance Methods"},{"generated":true,"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations"],"title":"Default Implementations"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/apply(_:)":{"role":"symbol","title":"apply(_:)","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"apply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Output"}],"url":"\/documentation\/parsing\/anyconversion\/apply(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/apply(_:)","abstract":[{"type":"text","text":"Attempts to transform an input into an output."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/Conversion-Implementations":{"role":"collectionGroup","title":"Conversion Implementations","type":"topic","kind":"article","url":"\/documentation\/parsing\/anyconversion\/conversion-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/Conversion-Implementations","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion":{"abstract":[{"type":"text","text":"A type-erased "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"topic","title":"AnyConversion","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AnyConversion"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AnyConversion"}],"url":"\/documentation\/parsing\/anyconversion"},"doc://co.pointfree.VaporRouting/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing","type":"topic","kind":"symbol","url":"\/documentation\/parsing","abstract":[],"title":"Parsing","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/unapply(_:)":{"role":"symbol","title":"unapply(_:)","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"unapply"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Input"}],"url":"\/documentation\/parsing\/anyconversion\/unapply(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/unapply(_:)","abstract":[{"type":"text","text":"Attempts to transform an output back into an input."}]},"doc://co.pointfree.VaporRouting/documentation/Parsing/Conversion":{"abstract":[{"text":"Declares a type that can transform an ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":" value into an ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"text":" transform an","type":"text"},{"text":" ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" value back into an ","type":"text"},{"code":"Input","type":"codeVoice"},{"type":"text","text":" value."}],"title":"Conversion","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conversion"}],"url":"\/documentation\/parsing\/conversion","type":"topic","kind":"symbol","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Conversion"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/Conversion"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/init(apply:unapply:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/init(apply:unapply:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"apply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?, "},{"kind":"externalParam","text":"unapply"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":"?)"}],"url":"\/documentation\/parsing\/anyconversion\/init(apply:unapply:)","abstract":[{"type":"text","text":"Creates a conversion that wraps the given closures in its "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/apply(_:)","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/unapply(_:)","isActive":true},{"type":"text","text":" "},{"type":"text","text":"methods, throwing an error when "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" is returned."}],"kind":"symbol","title":"init(apply:unapply:)","type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Parsing/AnyConversion/init(_:)":{"kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"C"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"C"},{"kind":"text","text":")"}],"title":"init(_:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Parsing\/AnyConversion\/init(_:)","url":"\/documentation\/parsing\/anyconversion\/init(_:)","abstract":[{"type":"text","text":"Creates a type-erasing conversion to wrap the given conversion."}]}}}