{"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogHandler","kind":"identifier"},{"text":" : ","kind":"text"},{"text":"_SwiftLogSendableLogHandler","kind":"typeIdentifier"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"This type is an implementation detail and should not normally be used, unless implementing your own logging backend.","type":"text"},{"text":" ","type":"text"},{"text":"To use the SwiftLog API, please refer to the documentation of ","type":"text"},{"type":"codeVoice","code":"Logger"},{"text":".","type":"text"}],"type":"paragraph"},{"level":1,"anchor":"Implementation-requirements","type":"heading","text":"Implementation requirements"},{"inlineContent":[{"type":"text","text":"To implement your own "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" you should respect a few requirements that are necessary so applications work"},{"type":"text","text":" "},{"type":"text","text":"as expected regardless of the selected "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" implementation."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" must be a "},{"type":"codeVoice","code":"struct"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The metadata and ","type":"text"},{"code":"logLevel","type":"codeVoice"},{"text":" properties must be implemented so that setting them on a ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" does not affect","type":"text"},{"text":" ","type":"text"},{"text":"other ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":"s.","type":"text"}]}]}]},{"level":3,"anchor":"Treat-log-level--metadata-as-values","type":"heading","text":"Treat log level & metadata as values"},{"inlineContent":[{"type":"text","text":"When developing your "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":", please make sure the following test works."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["LoggingSystem.bootstrap(MyLogHandler.init) \/\/ your LogHandler might have a different bootstrapping step","var logger1 = Logger(label: \"first logger\")","logger1.logLevel = .debug","logger1[metadataKey: \"only-on\"] = \"first\"","","var logger2 = logger1","logger2.logLevel = .error                  \/\/ this must not override `logger1`'s log level","logger2[metadataKey: \"only-on\"] = \"second\" \/\/ this must not override `logger1`'s metadata","","XCTAssertEqual(.debug, logger1.logLevel)","XCTAssertEqual(.error, logger2.logLevel)","XCTAssertEqual(\"first\", logger1[metadataKey: \"only-on\"])","XCTAssertEqual(\"second\", logger2[metadataKey: \"only-on\"])"]},{"level":3,"anchor":"Special-cases","type":"heading","text":"Special cases"},{"inlineContent":[{"text":"In certain special cases, the log level behaving like a value on ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" might not be what you want. For example,","type":"text"},{"text":" ","type":"text"},{"text":"you might want to set the log level across ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"text":" ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":"s to ","type":"text"},{"code":".debug","type":"codeVoice"},{"text":" when say a signal (eg. ","type":"text"},{"code":"SIGUSR1","type":"codeVoice"},{"text":") is received","type":"text"},{"text":" ","type":"text"},{"text":"to be able to debug special failures in production. This special case is acceptable but we urge you to create a","type":"text"},{"text":" ","type":"text"},{"text":"solution specific to your ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" implementation to achieve that. Please find an example implementation of this","type":"text"},{"text":" ","type":"text"},{"text":"behavior below, on reception of the signal you would call","type":"text"},{"text":" ","type":"text"},{"code":"LogHandlerWithGlobalLogLevelOverride.overrideGlobalLogLevel = .debug","type":"codeVoice"},{"text":", for example.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["import class Foundation.NSLock","","public struct LogHandlerWithGlobalLogLevelOverride: LogHandler {","    \/\/ the static properties hold the globally overridden log level (if overridden)","    private static let overrideLock = NSLock()","    private static var overrideLogLevel: Logger.Level? = nil","","    \/\/ this holds the log level if not overridden","    private var _logLevel: Logger.Level = .info","","    \/\/ metadata storage","    public var metadata: Logger.Metadata = [:]","","    public init(label: String) {","        \/\/ [...]","    }","","    public var logLevel: Logger.Level {","        \/\/ when we get asked for the log level, we check if it was globally overridden or not","        get {","            LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","            defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","            return LogHandlerWithGlobalLogLevelOverride.overrideLogLevel ?? self._logLevel","        }","        \/\/ we set the log level whenever we're asked (note: this might not have an effect if globally","        \/\/ overridden)","        set {","            self._logLevel = newValue","        }","    }","","    public func log(level: Logger.Level, message: Logger.Message, metadata: Logger.Metadata?,","                    source: String, file: String, function: String, line: UInt) {","        \/\/ [...]","    }","","    public subscript(metadataKey metadataKey: String) -> Logger.Metadata.Value? {","        get {","            return self.metadata[metadataKey]","        }","        set(newValue) {","            self.metadata[metadataKey] = newValue","        }","    }","","    \/\/ this is the function to globally override the log level, it is not part of the `LogHandler` protocol","    public static func overrideGlobalLogLevel(_ logLevel: Logger.Level) {","        LogHandlerWithGlobalLogLevelOverride.overrideLock.lock()","        defer { LogHandlerWithGlobalLogLevelOverride.overrideLock.unlock() }","        LogHandlerWithGlobalLogLevelOverride.overrideLogLevel = logLevel","    }","}"]},{"inlineContent":[{"text":"Please note that the above ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" will still pass the ‘log level is a value’ test above it iff the global log","type":"text"},{"text":" ","type":"text"},{"text":"level has not been overridden. And most importantly it passes the requirement listed above: A change to the log","type":"text"},{"text":" ","type":"text"},{"text":"level on one ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" should not affect the log level of another ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" variable.","type":"text"}],"type":"paragraph"}]}],"relationshipsSections":[{"kind":"relationships","title":"Conforming Types","type":"conformingTypes","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler"]}],"variants":[{"paths":["\/documentation\/logging\/loghandler"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"A ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" is an implementation of a logging backend.","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","metadata":{"modules":[{"name":"Logging"}],"externalID":"s:7Logging10LogHandlerP","role":"symbol","title":"LogHandler","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LogHandler","kind":"identifier"}],"roleHeading":"Protocol","navigatorTitle":[{"text":"LogHandler","kind":"identifier"}],"symbolKind":"protocol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging"]]},"sections":[],"topicSections":[{"title":"Instance Properties","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7"]},{"title":"Subscripts","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/subscript(metadataKey:)":{"type":"topic","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/subscript(metadataKey:)","fragments":[{"kind":"keyword","text":"subscript"},{"kind":"text","text":"("},{"kind":"externalParam","text":"metadataKey"},{"kind":"text","text":" _: "},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","preciseIdentifier":"s:SD5Valuea","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Add, remove, or change the logging metadata."}],"url":"\/documentation\/logging\/loghandler\/subscript(metadatakey:)","title":"subscript(metadataKey:)"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/logLevel":{"type":"topic","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/logLevel","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"logLevel"},{"kind":"text","text":": "},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Level","preciseIdentifier":"s:7Logging6LoggerV5LevelO","kind":"typeIdentifier"}],"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Get or set the configured log level."}],"url":"\/documentation\/logging\/loghandler\/loglevel","title":"logLevel"},"doc://co.pointfree.VaporRouting/documentation/Logging":{"title":"Logging","role":"collection","type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging","url":"\/documentation\/logging","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Logging/MultiplexLogHandler":{"navigatorTitle":[{"text":"MultiplexLogHandler","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/MultiplexLogHandler","url":"\/documentation\/logging\/multiplexloghandler","kind":"symbol","role":"symbol","abstract":[{"text":"A pseudo-","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":" that can be used to send messages to multiple other ","type":"text"},{"code":"LogHandler","type":"codeVoice"},{"text":"s.","type":"text"}],"title":"MultiplexLogHandler","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MultiplexLogHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/SwiftLogNoOpLogHandler":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"SwiftLogNoOpLogHandler"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/SwiftLogNoOpLogHandler","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"SwiftLogNoOpLogHandler"}],"abstract":[{"type":"text","text":"No operation LogHandler, used when no logging is required"}],"title":"SwiftLogNoOpLogHandler","url":"\/documentation\/logging\/swiftlognooploghandler"},"doc://co.pointfree.VaporRouting/documentation/Logging/StreamLogHandler":{"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"StreamLogHandler"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/StreamLogHandler","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"StreamLogHandler"}],"abstract":[{"code":"StreamLogHandler","type":"codeVoice"},{"type":"text","text":" is a simple implementation of "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" for directing"},{"type":"text","text":" "},{"code":"Logger","type":"codeVoice"},{"type":"text","text":" output to either "},{"code":"stderr","type":"codeVoice"},{"type":"text","text":" or "},{"code":"stdout","type":"codeVoice"},{"type":"text","text":" via the factory methods."}],"title":"StreamLogHandler","url":"\/documentation\/logging\/streamloghandler"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:source:file:function:line:)-8kgt7":{"type":"topic","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"log","kind":"identifier"},{"text":"(","kind":"text"},{"text":"level","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Level","preciseIdentifier":"s:7Logging6LoggerV5LevelO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"message","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Message","preciseIdentifier":"s:7Logging6LoggerV7MessageV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"metadata","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"source","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"function"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":")"}],"defaultImplementations":1,"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"This method is called when a "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" must emit a log message. There is no need for the "},{"type":"codeVoice","code":"LogHandler"},{"type":"text","text":" to"},{"text":" ","type":"text"},{"text":"check if the ","type":"text"},{"code":"level","type":"codeVoice"},{"text":" is above or below the configured ","type":"text"},{"code":"logLevel","type":"codeVoice"},{"text":" as ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" already performed this check and","type":"text"},{"text":" ","type":"text"},{"text":"determined that a message should be logged.","type":"text"}],"url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:source:file:function:line:)-8kgt7","title":"log(level:message:metadata:source:file:function:line:)"},"doc://co.pointfree.VaporRouting/documentation/ConsoleKit/ConsoleLogger":{"type":"topic","abstract":[{"type":"text","text":"Outputs logs to a "},{"type":"codeVoice","code":"Console"},{"type":"text","text":"."}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/ConsoleKit\/ConsoleLogger","navigatorTitle":[{"kind":"identifier","text":"ConsoleLogger"}],"kind":"symbol","title":"ConsoleLogger","url":"\/documentation\/consolekit\/consolelogger","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ConsoleLogger"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler":{"type":"topic","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"LogHandler"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"LogHandler"}],"abstract":[{"type":"text","text":"A "},{"code":"LogHandler","type":"codeVoice"},{"type":"text","text":" is an implementation of a logging backend."}],"title":"LogHandler","url":"\/documentation\/logging\/loghandler"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/metadata":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"metadata"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier","text":"Logger"},{"kind":"text","text":"."},{"preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier","text":"Metadata"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/metadata","required":true,"kind":"symbol","abstract":[{"type":"text","text":"Get or set the entire metadata storage as a dictionary."}],"role":"symbol","title":"metadata","url":"\/documentation\/logging\/loghandler\/metadata","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Logging/LogHandler/log(level:message:metadata:file:function:line:)-89rya":{"type":"topic","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/LogHandler\/log(level:message:metadata:file:function:line:)-89rya","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"log","kind":"identifier"},{"text":"(","kind":"text"},{"text":"level","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Level","preciseIdentifier":"s:7Logging6LoggerV5LevelO","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"message","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Message","preciseIdentifier":"s:7Logging6LoggerV7MessageV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"metadata","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Metadata","preciseIdentifier":"s:7Logging6LoggerV8Metadataa","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"function","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":")","kind":"text"}],"defaultImplementations":1,"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"SwiftLog 1.0 compatibility method. Please do "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" implement, implement"},{"type":"text","text":" "},{"code":"log(level:message:metadata:source:file:function:line:)","type":"codeVoice"},{"text":" instead.","type":"text"}],"url":"\/documentation\/logging\/loghandler\/log(level:message:metadata:file:function:line:)-89rya","title":"log(level:message:metadata:file:function:line:)","deprecated":true}}}