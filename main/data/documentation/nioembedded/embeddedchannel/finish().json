{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioembedded\/embeddedchannel\/finish()"]}],"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","text":"EmbeddedChannel","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel"},{"text":".","kind":"text"},{"text":"LeftOverState","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO"}],"platforms":["Linux"],"languages":["swift"]}]},{"content":[{"type":"heading","text":"Return Value","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"LeftOverState"},{"type":"text","text":" of the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":". If all the inbound and outbound events have been"},{"type":"text","text":" "},{"type":"text","text":"consumed (using "},{"type":"codeVoice","code":"readInbound"},{"type":"text","text":" \/ "},{"type":"codeVoice","code":"readOutbound"},{"type":"text","text":") and there are no pending outbound events (unflushed"},{"type":"text","text":" "},{"type":"text","text":"writes) this will be "},{"type":"codeVoice","code":".clean"},{"type":"text","text":". If there are any unconsumed inbound, outbound, or pending outbound"},{"type":"text","text":" "},{"type":"text","text":"events, the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" will returns those as "},{"type":"codeVoice","code":".leftOvers(inbound:outbound:pendingOutbound:)"},{"type":"text","text":"."}]}],"kind":"content"},{"content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method will throw if the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" hit any unconsumed errors or if the "},{"type":"codeVoice","code":"close"},{"type":"text","text":" fails. Errors in the"},{"type":"text","text":" "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" can be consumed using "},{"type":"codeVoice","code":"throwIfErrorCaught"},{"type":"text","text":"."}]}],"kind":"content"}],"sections":[],"metadata":{"externalID":"s:11NIOEmbedded15EmbeddedChannelC6finishAC13LeftOverStateOyKF","modules":[{"name":"NIOEmbedded"}],"role":"symbol","title":"finish()","symbolKind":"method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"finish"},{"kind":"text","text":"() "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"EmbeddedChannel","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"LeftOverState","preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO"}],"roleHeading":"Instance Method"},"abstract":[{"type":"text","text":"Synchronously closes the "},{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":"."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish()"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/LeftOverState":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/LeftOverState","navigatorTitle":[{"kind":"identifier","text":"LeftOverState"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"LeftOverState"}],"abstract":[{"code":"LeftOverState","type":"codeVoice"},{"text":" represents any left-over inbound, outbound, and pending outbound events that hit the","type":"text"},{"text":" ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" and were not consumed when ","type":"text"},{"code":"finish","type":"codeVoice"},{"text":" was called on the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","role":"symbol","title":"EmbeddedChannel.LeftOverState","url":"\/documentation\/nioembedded\/embeddedchannel\/leftoverstate"},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel/finish()":{"url":"\/documentation\/nioembedded\/embeddedchannel\/finish()","title":"finish()","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel\/finish()","abstract":[{"text":"Synchronously closes the ","type":"text"},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"finish","kind":"identifier"},{"text":"() ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC","text":"EmbeddedChannel","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:11NIOEmbedded15EmbeddedChannelC13LeftOverStateO","text":"LeftOverState","kind":"typeIdentifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded/EmbeddedChannel":{"kind":"symbol","role":"symbol","title":"EmbeddedChannel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded\/EmbeddedChannel","abstract":[{"type":"codeVoice","code":"EmbeddedChannel"},{"type":"text","text":" is a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" implementation that does neither any"},{"type":"text","text":" "},{"type":"text","text":"actual IO nor has a proper eventing mechanism. The prime use-case for"},{"type":"text","text":" "},{"code":"EmbeddedChannel","type":"codeVoice"},{"text":" is in unit tests when you want to feed the inbound events","type":"text"},{"text":" ","type":"text"},{"text":"and check the outbound events manually.","type":"text"}],"url":"\/documentation\/nioembedded\/embeddedchannel","type":"topic","navigatorTitle":[{"text":"EmbeddedChannel","kind":"identifier"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EmbeddedChannel","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOEmbedded":{"kind":"symbol","role":"collection","title":"NIOEmbedded","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOEmbedded","abstract":[],"url":"\/documentation\/nioembedded","type":"topic"}}}