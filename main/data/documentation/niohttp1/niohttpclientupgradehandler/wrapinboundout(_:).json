{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/ChannelInboundHandler-Implementations"]]},"abstract":[{"text":"Wrap the provided ","type":"text"},{"code":"InboundOut","type":"codeVoice"},{"text":" that will be passed to the next ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"text":" by calling ","type":"text"},{"code":"ChannelHandlerContext.fireChannelRead","type":"codeVoice"},{"text":".","type":"text"}],"variants":[{"paths":["\/documentation\/niohttp1\/niohttpclientupgradehandler\/wrapinboundout(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"kind":"symbol","schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrapInboundOut"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InboundOut"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"}],"roleHeading":"Instance Method","modules":[{"name":"NIOHTTP1"}],"role":"symbol","symbolKind":"method","extendedModule":"NIOCore","externalID":"s:7NIOCore21ChannelInboundHandlerPAAE04wrapC3OutyAA6NIOAnyV0cF0QzF::SYNTHESIZED::s:8NIOHTTP127NIOHTTPClientUpgradeHandlerC","title":"wrapInboundOut(_:)"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrapInboundOut","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"value","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"InboundOut","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NIOAny","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"}]}],"kind":"declarations"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/wrapInboundOut(_:)","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/ChannelInboundHandler-Implementations":{"abstract":[],"kind":"article","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/ChannelInboundHandler-Implementations","role":"collectionGroup","type":"topic","title":"ChannelInboundHandler Implementations","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/channelinboundhandler-implementations"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1":{"role":"collection","url":"\/documentation\/niohttp1","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1","type":"topic","abstract":[],"title":"NIOHTTP1","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"role":"symbol","kind":"symbol","abstract":[{"code":"NIOAny","type":"codeVoice"},{"text":" is an opaque container for values of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" type, similar to Swiftâ€™s builtin ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","url":"\/documentation\/niocore\/nioany","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"title":"NIOAny","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}]},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler/wrapInboundOut(_:)":{"type":"topic","title":"wrapInboundOut(_:)","abstract":[{"type":"text","text":"Wrap the provided "},{"type":"codeVoice","code":"InboundOut"},{"type":"text","text":" that will be passed to the next "},{"type":"codeVoice","code":"ChannelInboundHandler"},{"type":"text","text":" by calling "},{"type":"codeVoice","code":"ChannelHandlerContext.fireChannelRead"},{"type":"text","text":"."}],"role":"symbol","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler\/wrapinboundout(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"wrapInboundOut"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"InboundOut"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"NIOAny","preciseIdentifier":"s:7NIOCore6NIOAnyV"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler\/wrapInboundOut(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOHTTP1/NIOHTTPClientUpgradeHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOHTTP1\/NIOHTTPClientUpgradeHandler","url":"\/documentation\/niohttp1\/niohttpclientupgradehandler","type":"topic","kind":"symbol","role":"symbol","title":"NIOHTTPClientUpgradeHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOHTTPClientUpgradeHandler","kind":"identifier"}],"abstract":[{"text":"A client-side channel handler that sends a HTTP upgrade handshake request to perform a HTTP-upgrade.","type":"text"},{"text":" ","type":"text"},{"text":"When the first HTTP request is sent, this handler will add all appropriate headers to perform an upgrade to","type":"text"},{"text":" ","type":"text"},{"text":"the a protocol. It may add headers for a set of protocols in preference order.","type":"text"},{"text":" ","type":"text"},{"text":"If the upgrade fails (i.e. response is not 101 Switching Protocols), this handler simply","type":"text"},{"text":" ","type":"text"},{"text":"removes itself from the pipeline. If the upgrade is successful, it upgrades the pipeline to the new protocol.","type":"text"}],"navigatorTitle":[{"text":"NIOHTTPClientUpgradeHandler","kind":"identifier"}]}}}