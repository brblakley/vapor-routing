{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/clientbootstrap"]}],"kind":"symbol","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ClientBootstrap"},{"type":"text","text":" is an easy way to bootstrap a "},{"type":"codeVoice","code":"SocketChannel"},{"type":"text","text":" when creating network clients."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix"]]},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(group:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(validatingGroup:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/bind(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelInitializer(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelOption(_:value:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(host:port:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(to:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(unixDomainSocketPath:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connectTimeout(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/protocolHandlers(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/resolver(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(_:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(descriptor:)"],"title":"Instance Methods"}],"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol"],"kind":"relationships","title":"Conforms To"}],"schemaVersion":{"major":0,"patch":0,"minor":3},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"final"},{"kind":"text","text":" "},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ClientBootstrap"}]}],"kind":"declarations"},{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Usually you re-use a ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":" once you set it up and called ","type":"text"},{"code":"connect","type":"codeVoice"},{"text":" multiple times on it.","type":"text"},{"text":" ","type":"text"},{"text":"This way you ensure that the same ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":"s will be shared across all your connections.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Example:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["    let group = MultiThreadedEventLoopGroup(numberOfThreads: 1)","    defer {","        try! group.syncShutdownGracefully()","    }","    let bootstrap = ClientBootstrap(group: group)","        \/\/ Enable SO_REUSEADDR.","        .channelOption(ChannelOptions.socketOption(.so_reuseaddr), value: 1)","        .channelInitializer { channel in","            \/\/ always instantiate the handler _within_ the closure as","            \/\/ it may be called multiple times (for example if the hostname","            \/\/ resolves to both IPv4 and IPv6 addresses, cf. Happy Eyeballs).","            channel.pipeline.addHandler(MyChannelHandler())","        }","    try! bootstrap.connect(host: \"example.org\", port: 12345).wait()","    \/* the Channel is now connected *\/"]},{"type":"paragraph","inlineContent":[{"text":"The connected ","type":"text"},{"type":"codeVoice","code":"SocketChannel"},{"text":" will operate on ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" as inbound and on ","type":"text"},{"type":"codeVoice","code":"IOData"},{"text":" as outbound messages.","type":"text"}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap","interfaceLanguage":"swift"},"sections":[],"metadata":{"role":"symbol","externalID":"s:8NIOPosix15ClientBootstrapC","navigatorTitle":[{"text":"ClientBootstrap","kind":"identifier"}],"symbolKind":"class","modules":[{"name":"NIOPosix"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClientBootstrap","kind":"identifier"}],"roleHeading":"Class","title":"ClientBootstrap"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/bind(to:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bind","kind":"identifier"},{"text":"(","kind":"text"},{"text":"to","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"SocketAddress","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13SocketAddressO"},{"text":") -> ","kind":"text"},{"text":"ClientBootstrap","kind":"typeIdentifier","preciseIdentifier":"s:8NIOPosix15ClientBootstrapC"}],"role":"symbol","title":"bind(to:)","url":"\/documentation\/nioposix\/clientbootstrap\/bind(to:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/bind(to:)","type":"topic","abstract":[{"type":"text","text":"Bind the "},{"type":"codeVoice","code":"SocketChannel"},{"text":" to ","type":"text"},{"code":"address","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connect(to:)":{"type":"topic","title":"connect(to:)","url":"\/documentation\/nioposix\/clientbootstrap\/connect(to:)","role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Specify the "},{"type":"codeVoice","code":"address"},{"type":"text","text":" to connect to for the TCP "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" that will be established."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"to"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13SocketAddressO","text":"SocketAddress"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel"},{"kind":"text","text":">"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(to:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/protocolHandlers(_:)":{"title":"protocolHandlers(_:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/protocolHandlers(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"protocolHandlers","kind":"identifier"},{"text":"(() -> [","kind":"text"},{"preciseIdentifier":"s:7NIOCore14ChannelHandlerP","text":"ChannelHandler","kind":"typeIdentifier"},{"text":"]) -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"abstract":[{"text":"Sets the protocol handlers that will be added to the front of the ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":" right after the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"channelInitializer"},{"text":" has been called.","type":"text"}],"url":"\/documentation\/nioposix\/clientbootstrap\/protocolhandlers(_:)","kind":"symbol","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connect(unixDomainSocketPath:)":{"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(unixDomainSocketPath:)","kind":"symbol","abstract":[{"text":"Specify the ","type":"text"},{"type":"codeVoice","code":"unixDomainSocket"},{"text":" path to connect to for the UDS ","type":"text"},{"type":"codeVoice","code":"Channel"},{"text":" that will be established.","type":"text"}],"type":"topic","title":"connect(unixDomainSocketPath:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connect","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"unixDomainSocketPath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel"},{"kind":"text","text":">"}],"url":"\/documentation\/nioposix\/clientbootstrap\/connect(unixdomainsocketpath:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/withConnectedSocket(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withConnectedSocket","kind":"identifier"},{"text":"(","kind":"text"},{"text":"NIOBSDSocket","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore12NIOBSDSocketO"},{"text":".","kind":"text"},{"text":"Handle","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore12NIOBSDSocketO6Handlea"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Channel","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP"},{"text":">","kind":"text"}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(_:)","type":"topic","role":"symbol","url":"\/documentation\/nioposix\/clientbootstrap\/withconnectedsocket(_:)","abstract":[{"text":"Use the existing connected socket file descriptor.","type":"text"}],"title":"withConnectedSocket(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connect(host:port:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"connect"},{"kind":"text","text":"("},{"kind":"externalParam","text":"host"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":", "},{"kind":"externalParam","text":"port"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP"},{"kind":"text","text":">"}],"abstract":[{"text":"Specify the ","type":"text"},{"code":"host","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"port","type":"codeVoice"},{"text":" to connect to for the TCP ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that will be established.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","title":"connect(host:port:)","url":"\/documentation\/nioposix\/clientbootstrap\/connect(host:port:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connect(host:port:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/channelInitializer(_:)":{"abstract":[{"type":"text","text":"Initialize the connected "},{"code":"SocketChannel","type":"codeVoice"},{"type":"text","text":" with "},{"code":"initializer","type":"codeVoice"},{"type":"text","text":". The most common task in initializer is to add"},{"type":"text","text":" "},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":"s to the "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":"."}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelInitializer(_:)","kind":"symbol","title":"channelInitializer(_:)","url":"\/documentation\/nioposix\/clientbootstrap\/channelinitializer(_:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"channelInitializer"},{"kind":"text","text":"(("},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore7ChannelP","text":"Channel"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Self"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ClientBootstrap","kind":"identifier"}],"abstract":[{"text":"A ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":" is an easy way to bootstrap a ","type":"text"},{"code":"SocketChannel","type":"codeVoice"},{"text":" when creating network clients.","type":"text"}],"role":"symbol","navigatorTitle":[{"text":"ClientBootstrap","kind":"identifier"}],"type":"topic","kind":"symbol","title":"ClientBootstrap","url":"\/documentation\/nioposix\/clientbootstrap","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/withConnectedSocket(descriptor:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/withconnectedsocket(descriptor:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withConnectedSocket","kind":"identifier"},{"text":"(","kind":"text"},{"text":"descriptor","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CInt","preciseIdentifier":"s:s4CInta","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Channel","preciseIdentifier":"s:7NIOCore7ChannelP","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","title":"withConnectedSocket(descriptor:)","abstract":[{"text":"Use the existing connected socket file descriptor.","type":"text"}],"deprecated":true,"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/withConnectedSocket(descriptor:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/init(validatingGroup:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/init(validatinggroup:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"?(","kind":"text"},{"text":"validatingGroup","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopGroup","preciseIdentifier":"s:7NIOCore14EventLoopGroupP","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","title":"init(validatingGroup:)","abstract":[{"text":"Create a ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":" on the ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":" ","type":"text"},{"code":"group","type":"codeVoice"},{"text":", validating that ","type":"text"},{"code":"group","type":"codeVoice"},{"text":" is compatible.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(validatingGroup:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/nioposix","role":"collection","title":"NIOPosix"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/init(group:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/init(group:)","role":"symbol","fragments":[{"text":"convenience","kind":"keyword"},{"text":" ","kind":"text"},{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"group","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopGroup","preciseIdentifier":"s:7NIOCore14EventLoopGroupP","kind":"typeIdentifier"},{"kind":"text","text":")"}],"kind":"symbol","title":"init(group:)","abstract":[{"text":"Create a ","type":"text"},{"code":"ClientBootstrap","type":"codeVoice"},{"text":" on the ","type":"text"},{"code":"EventLoopGroup","type":"codeVoice"},{"text":" ","type":"text"},{"code":"group","type":"codeVoice"},{"text":".","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/init(group:)"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/connectTimeout(_:)":{"url":"\/documentation\/nioposix\/clientbootstrap\/connecttimeout(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"connectTimeout","kind":"identifier"},{"text":"(","kind":"text"},{"text":"TimeAmount","preciseIdentifier":"s:7NIOCore10TimeAmountV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","title":"connectTimeout(_:)","abstract":[{"text":"Specifies a timeout to apply to a connection attempt.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/connectTimeout(_:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol":{"url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","abstract":[{"code":"NIOClientTCPBootstrapProtocol","type":"codeVoice"},{"text":" is implemented by various underlying transport mechanisms. Typically,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this will be the BSD Sockets API implemented by "},{"type":"codeVoice","code":"ClientBootstrap"},{"text":".","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"type":"topic","title":"NIOClientTCPBootstrapProtocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/resolver(_:)":{"title":"resolver(_:)","type":"topic","url":"\/documentation\/nioposix\/clientbootstrap\/resolver(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"resolver","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:8NIOPosix8ResolverP","kind":"typeIdentifier","text":"Resolver"},{"kind":"text","text":"?) -> "},{"kind":"typeIdentifier","text":"Self"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/resolver(_:)","kind":"symbol","abstract":[{"type":"text","text":"Specifies the "},{"code":"Resolver","type":"codeVoice"},{"type":"text","text":" to use or "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if the default should be used."}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/ClientBootstrap/channelOption(_:value:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/ClientBootstrap\/channelOption(_:value:)","abstract":[{"text":"Specifies a ","type":"text"},{"type":"codeVoice","code":"ChannelOption"},{"text":" to be applied to the ","type":"text"},{"type":"codeVoice","code":"SocketChannel"},{"text":".","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"channelOption","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Option","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"Option"},{"kind":"text","text":", "},{"kind":"externalParam","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Option"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"}],"title":"channelOption(_:value:)","url":"\/documentation\/nioposix\/clientbootstrap\/channeloption(_:value:)","role":"symbol","type":"topic"}}}