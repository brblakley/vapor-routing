{"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore13NIOFileHandleC","text":"NIOFileHandle","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":">","kind":"text"}],"modules":[{"name":"NIOPosix"}],"roleHeading":"Instance Method","symbolKind":"method","role":"symbol","title":"readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","externalID":"s:8NIOPosix17NonBlockingFileIOV11readChunked10fileHandle9byteCount9chunkSize9allocator9eventLoop0L7Handler7NIOCore05EventP6FutureCyytGAK07NIOFileI0C_S2iAK19ByteBufferAllocatorVAK0sP0_pAnK0vW0VctF"},"abstract":[{"type":"text","text":"Read "},{"type":"codeVoice","code":"byteCount"},{"type":"text","text":" bytes in chunks of "},{"type":"codeVoice","code":"chunkSize"},{"type":"text","text":" bytes from "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" in "},{"type":"codeVoice","code":"NonBlockingFileIO"},{"type":"text","text":"â€™s private thread"},{"type":"text","text":" "},{"type":"text","text":"pool which is separate from any "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" thread."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)"},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:bytecount:chunksize:allocator:eventloop:chunkhandler:)"]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOFileHandle","preciseIdentifier":"s:7NIOCore13NIOFileHandleC","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":" = NonBlockingFileIO.defaultChunkSize, ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"ByteBuffer","preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"text":"<","kind":"text"},{"text":"Void","preciseIdentifier":"s:s4Voida","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"NIOFileHandle","type":"codeVoice"},{"type":"text","text":" to read from."}],"type":"paragraph"}],"name":"fileHandle"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The number of bytes to read from "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":"."}]}],"name":"byteCount"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The size of the individual chunks to deliver.","type":"text"}]}],"name":"chunkSize"},{"content":[{"inlineContent":[{"text":"A ","type":"text"},{"code":"ByteBufferAllocator","type":"codeVoice"},{"text":" used to allocate space for the chunks.","type":"text"}],"type":"paragraph"}],"name":"allocator"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" to call ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" on.","type":"text"}]}],"name":"eventLoop"},{"content":[{"inlineContent":[{"text":"Called for every chunk read. The next chunk will be read upon successful completion of the returned ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":". If the returned ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" fails, the overall operation is aborted.","type":"text"}],"type":"paragraph"}],"name":"chunkHandler"}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"inlineContent":[{"text":"An ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" which is the result of the overall operation. If either the reading of ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" fails, the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will fail too. If the reading of ","type":"text"},{"code":"fileHandle","type":"codeVoice"},{"text":" as well as ","type":"text"},{"code":"chunkHandler","type":"codeVoice"},{"text":" always succeeded, the ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" will succeed too.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"codeVoice","code":"chunkHandler"},{"text":" will be called on ","type":"text"},{"type":"codeVoice","code":"eventLoop"},{"text":" for every chunk that was read. Assuming ","type":"text"},{"type":"codeVoice","code":"byteCount"},{"text":" is greater than","type":"text"},{"text":" ","type":"text"},{"text":"zero and there are enough bytes available ","type":"text"},{"type":"codeVoice","code":"chunkHandler"},{"text":" will be called ","type":"text"},{"type":"codeVoice","code":"1 + |_ byteCount \/ chunkSize _|"},{"text":" ","type":"text"},{"text":"times, delivering ","type":"text"},{"type":"codeVoice","code":"chunkSize"},{"text":" bytes each time. If less than ","type":"text"},{"type":"codeVoice","code":"byteCount"},{"text":" bytes can be read from ","type":"text"},{"type":"codeVoice","code":"descriptor"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"chunkHandler"},{"text":" will be called less often with the last invocation possibly being of less than ","type":"text"},{"type":"codeVoice","code":"chunkSize"},{"text":" bytes.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The allocation and reading of a subsequent chunk will only be attempted when ","type":"text"},{"type":"codeVoice","code":"chunkHandler"},{"text":" succeeds.","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"readChunked(fileRegion:chunkSize:allocator:eventLoop:chunkHandler:)"},{"type":"text","text":" should be preferred as it uses"},{"type":"text","text":" "},{"type":"codeVoice","code":"FileRegion"},{"type":"text","text":" object instead of raw "},{"type":"codeVoice","code":"NIOFileHandle"},{"type":"text","text":"s. In case you do want to use raw "},{"type":"codeVoice","code":"NIOFileHandle"},{"type":"text","text":"s,"},{"type":"text","text":" "},{"type":"text","text":"please consider using "},{"type":"codeVoice","code":"readChunked(fileHandle:fromOffset:chunkSize:allocator:eventLoop:chunkHandler:)"},{"type":"text","text":" "},{"type":"text","text":"because it doesnâ€™t use the file descriptorâ€™s seek pointer (which may be shared with other file"},{"type":"text","text":" "},{"type":"text","text":"descriptors and even across processes.)"}],"type":"paragraph"}],"name":"Note","type":"aside"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"url":"\/documentation\/niocore\/bytebuffer","title":"ByteBuffer","kind":"symbol","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/nioposix","role":"collection","title":"NIOPosix"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)":{"url":"\/documentation\/nioposix\/nonblockingfileio\/readchunked(filehandle:bytecount:chunksize:allocator:eventloop:chunkhandler:)","abstract":[{"type":"text","text":"Read "},{"type":"codeVoice","code":"byteCount"},{"type":"text","text":" bytes in chunks of "},{"type":"codeVoice","code":"chunkSize"},{"type":"text","text":" bytes from "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" in "},{"type":"codeVoice","code":"NonBlockingFileIO"},{"type":"text","text":"â€™s private thread"},{"type":"text","text":" "},{"type":"text","text":"pool which is separate from any "},{"type":"codeVoice","code":"EventLoop"},{"text":" thread.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"readChunked","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOFileHandle","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13NIOFileHandleC"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"chunkSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"ByteBufferAllocator","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"text":", ","kind":"text"},{"text":"chunkHandler","kind":"externalParam"},{"text":": (","kind":"text"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"readChunked(fileHandle:byteCount:chunkSize:allocator:eventLoop:chunkHandler:)","type":"topic","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","type":"topic","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s until itâ€™s closed."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"kind":"identifier","text":"NonBlockingFileIO"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NonBlockingFileIO"}],"url":"\/documentation\/nioposix\/nonblockingfileio","kind":"symbol","title":"NonBlockingFileIO","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"type":"text","text":" is a helper that allows you to read files without blocking the calling thread."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"title":"NIOFileHandle","url":"\/documentation\/niocore\/niofilehandle","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"NIOFileHandle"},{"type":"text","text":" is a handle to an open file."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOFileHandle","kind":"identifier"}],"navigatorTitle":[{"text":"NIOFileHandle","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","kind":"symbol","type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"abstract":[{"type":"text","text":"The preferred allocator for "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libcâ€™s"},{"type":"text","text":" "},{"code":"malloc","type":"codeVoice"},{"type":"text","text":", "},{"code":"realloc","type":"codeVoice"},{"type":"text","text":" and "},{"code":"free","type":"codeVoice"},{"text":".","type":"text"}],"title":"ByteBufferAllocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"kind":"symbol","url":"\/documentation\/niocore\/bytebufferallocator","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","role":"symbol"}}}