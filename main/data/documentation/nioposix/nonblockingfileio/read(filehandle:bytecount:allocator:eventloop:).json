{"abstract":[{"type":"text","text":"Read "},{"code":"byteCount","type":"codeVoice"},{"type":"text","text":" bytes from "},{"code":"fileHandle","type":"codeVoice"},{"type":"text","text":" in "},{"code":"NonBlockingFileIO","type":"codeVoice"},{"type":"text","text":"’s private thread pool which is separate from any "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" thread."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"read"},{"kind":"text","text":"("},{"kind":"externalParam","text":"fileHandle"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13NIOFileHandleC","text":"NIOFileHandle"},{"kind":"text","text":", "},{"kind":"externalParam","text":"byteCount"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"allocator"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop"},{"kind":"text","text":") -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore10ByteBufferV","text":"ByteBuffer"},{"kind":"text","text":">"}],"platforms":["Linux"]}]},{"parameters":[{"name":"fileHandle","content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"NIOFileHandle","type":"codeVoice"},{"text":" to read.","type":"text"}],"type":"paragraph"}]},{"name":"byteCount","content":[{"inlineContent":[{"type":"text","text":"The number of bytes to read from "},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":"."}],"type":"paragraph"}]},{"name":"allocator","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"code":"ByteBufferAllocator","type":"codeVoice"},{"type":"text","text":" used to allocate space for the returned "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"."}]}]},{"name":"eventLoop","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":" to create the returned "},{"code":"EventLoopFuture","type":"codeVoice"},{"type":"text","text":" from."}]}]}],"kind":"parameters"},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":" which delivers a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" if the read was successful or a failure on error.","type":"text"}]}],"kind":"content"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"The returned ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will not have less than ","type":"text"},{"code":"byteCount","type":"codeVoice"},{"text":" bytes unless we hit end-of-file in which","type":"text"},{"text":" ","type":"text"},{"text":"case the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" will contain the bytes available to read.","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Only use this function for small enough "},{"type":"codeVoice","code":"byteCount"},{"type":"text","text":"s as it will need to allocate enough memory to hold "},{"type":"codeVoice","code":"byteCount"},{"type":"text","text":" bytes."}],"type":"paragraph"}],"name":"Note","style":"note"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"type":"codeVoice","code":"read(fileRegion:allocator:eventLoop:)"},{"text":" should be preferred as it uses ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":" object instead of","type":"text"},{"text":" ","type":"text"},{"text":"raw ","type":"text"},{"type":"codeVoice","code":"NIOFileHandle"},{"text":"s. In case you do want to use raw ","type":"text"},{"type":"codeVoice","code":"NIOFileHandle"},{"text":"s,","type":"text"},{"text":" ","type":"text"},{"text":"please consider using ","type":"text"},{"type":"codeVoice","code":"read(fileHandle:fromOffset:byteCount:allocator:eventLoop:)"},{"text":" ","type":"text"},{"text":"because it doesn’t use the file descriptor’s seek pointer (which may be shared with other file","type":"text"},{"text":" ","type":"text"},{"text":"descriptors and even across processes.)","type":"text"}]}],"name":"Note","style":"note"}],"kind":"content"}],"metadata":{"role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"read","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NIOFileHandle","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore13NIOFileHandleC"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","text":"ByteBufferAllocator","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"eventLoop","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","text":"ByteBuffer"},{"kind":"text","text":">"}],"externalID":"s:8NIOPosix17NonBlockingFileIOV4read10fileHandle9byteCount9allocator9eventLoop7NIOCore05EventM6FutureCyAI10ByteBufferVGAI07NIOFileH0C_SiAI0qR9AllocatorVAI0oM0_ptF","symbolKind":"method","modules":[{"name":"NIOPosix"}],"roleHeading":"Instance Method","title":"read(fileHandle:byteCount:allocator:eventLoop:)"},"kind":"symbol","variants":[{"paths":["\/documentation\/nioposix\/nonblockingfileio\/read(filehandle:bytecount:allocator:eventloop:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/read(fileHandle:byteCount:allocator:eventLoop:)"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","type":"topic","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s until it’s closed."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"abstract":[{"type":"text","text":"The preferred allocator for "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"code":"malloc","type":"codeVoice"},{"type":"text","text":", "},{"code":"realloc","type":"codeVoice"},{"type":"text","text":" and "},{"code":"free","type":"codeVoice"},{"text":".","type":"text"}],"title":"ByteBufferAllocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"kind":"symbol","url":"\/documentation\/niocore\/bytebufferallocator","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO/read(fileHandle:byteCount:allocator:eventLoop:)":{"abstract":[{"type":"text","text":"Read "},{"type":"codeVoice","code":"byteCount"},{"text":" bytes from ","type":"text"},{"type":"codeVoice","code":"fileHandle"},{"type":"text","text":" in "},{"code":"NonBlockingFileIO","type":"codeVoice"},{"type":"text","text":"’s private thread pool which is separate from any "},{"code":"EventLoop","type":"codeVoice"},{"text":" thread.","type":"text"}],"url":"\/documentation\/nioposix\/nonblockingfileio\/read(filehandle:bytecount:allocator:eventloop:)","type":"topic","role":"symbol","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"read","kind":"identifier"},{"text":"(","kind":"text"},{"text":"fileHandle","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore13NIOFileHandleC","text":"NIOFileHandle","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"byteCount","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"allocator","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore19ByteBufferAllocatorV","kind":"typeIdentifier","text":"ByteBufferAllocator"},{"kind":"text","text":", "},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:7NIOCore10ByteBufferV","kind":"typeIdentifier","text":"ByteBuffer"},{"kind":"text","text":">"}],"title":"read(fileHandle:byteCount:allocator:eventLoop:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO\/read(fileHandle:byteCount:allocator:eventLoop:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"url":"\/documentation\/niocore\/bytebuffer","title":"ByteBuffer","kind":"symbol","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"kind":"identifier","text":"NonBlockingFileIO"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NonBlockingFileIO"}],"url":"\/documentation\/nioposix\/nonblockingfileio","kind":"symbol","title":"NonBlockingFileIO","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"type":"text","text":" is a helper that allows you to read files without blocking the calling thread."}]},"doc://co.pointfree.VaporRouting/documentation/NIOPosix":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix","type":"topic","abstract":[],"kind":"symbol","url":"\/documentation\/nioposix","role":"collection","title":"NIOPosix"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"title":"NIOFileHandle","url":"\/documentation\/niocore\/niofilehandle","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"NIOFileHandle"},{"type":"text","text":" is a handle to an open file."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOFileHandle","kind":"identifier"}],"navigatorTitle":[{"text":"NIOFileHandle","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","kind":"symbol","type":"topic","role":"symbol"}}}