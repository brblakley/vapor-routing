{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/WebSocketFrameDecoder"]]},"kind":"symbol","schemaVersion":{"patch":0,"minor":3,"major":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"init"},{"text":"(","kind":"text"},{"text":"maxFrameSize","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","kind":"typeIdentifier","preciseIdentifier":"s:Si"},{"text":" = 1 << 14)","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The maximum frame size the decoder is willing to tolerate from the"},{"type":"text","text":" "},{"text":"remote peer. WebSockets in principle allows frame sizes up to ","type":"text"},{"type":"codeVoice","code":"2**64"},{"text":" bytes, but","type":"text"},{"text":" ","type":"text"},{"text":"this is an objectively unreasonable maximum value (on AMD64 systems it is not","type":"text"},{"text":" ","type":"text"},{"text":"possible to even allocate a buffer large enough to handle this size), so we","type":"text"},{"text":" ","type":"text"},{"text":"set a lower one. The default value is the same as the default HTTP\/2 max frame","type":"text"},{"text":" ","type":"text"},{"text":"size, ","type":"text"},{"type":"codeVoice","code":"2**14"},{"text":" bytes. Users may override this to any value up to ","type":"text"},{"type":"codeVoice","code":"UInt32.max"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Users are strongly encouraged not to increase this value unless they absolutely","type":"text"},{"text":" ","type":"text"},{"text":"must, as the decoder will not produce partial frames, meaning that it will hold","type":"text"},{"text":" ","type":"text"},{"text":"on to data until the ","type":"text"},{"inlineContent":[{"type":"text","text":"entire"}],"type":"emphasis"},{"text":" body is received.","type":"text"}],"type":"paragraph"}],"name":"maxFrameSize"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Whether this "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" should automatically handle"},{"type":"text","text":" "},{"type":"text","text":"protocol errors in frame serialization, or whether it should allow the pipeline"},{"type":"text","text":" "},{"type":"text","text":"to handle them."}]}],"name":"automaticErrorHandling"}],"kind":"parameters"}],"abstract":[{"text":"Construct a new ","type":"text"},{"code":"WebSocketFrameDecoder","type":"codeVoice"}],"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/WebSocketFrameDecoder\/init(maxFrameSize:)"},"metadata":{"externalID":"s:12NIOWebSocket03WebB12FrameDecoderC03maxD4SizeACSi_tcfc","title":"init(maxFrameSize:)","roleHeading":"Initializer","symbolKind":"init","modules":[{"name":"NIOWebSocket"}],"role":"symbol","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxFrameSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":")"}]},"variants":[{"paths":["\/documentation\/niowebsocket\/websocketframedecoder\/init(maxframesize:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket":{"url":"\/documentation\/niowebsocket","type":"topic","role":"collection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket","title":"NIOWebSocket","abstract":[],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/WebSocketFrameDecoder/init(maxFrameSize:)":{"title":"init(maxFrameSize:)","kind":"symbol","abstract":[{"type":"text","text":"Construct a new "},{"code":"WebSocketFrameDecoder","type":"codeVoice"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/WebSocketFrameDecoder\/init(maxFrameSize:)","type":"topic","url":"\/documentation\/niowebsocket\/websocketframedecoder\/init(maxframesize:)","role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"maxFrameSize"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":")"}]},"doc://co.pointfree.VaporRouting/documentation/NIOWebSocket/WebSocketFrameDecoder":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WebSocketFrameDecoder","kind":"identifier"}],"url":"\/documentation\/niowebsocket\/websocketframedecoder","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOWebSocket\/WebSocketFrameDecoder","title":"WebSocketFrameDecoder","navigatorTitle":[{"text":"WebSocketFrameDecoder","kind":"identifier"}],"abstract":[{"text":"An inbound ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":" that deserializes websocket frames into a structured","type":"text"},{"text":" ","type":"text"},{"text":"format for further processing.","type":"text"}],"kind":"symbol"}}}