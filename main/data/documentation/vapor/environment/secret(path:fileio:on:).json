{"metadata":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"secret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"path","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileIO","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NonBlockingFileIO","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":"?>","kind":"text"}],"symbolKind":"method","title":"secret(path:fileIO:on:)","roleHeading":"Type Method","externalID":"s:5Vapor11EnvironmentV6secret4path6fileIO2on7NIOCore15EventLoopFutureCySSSgGSS_8NIOPosix015NonBlockingFileF0VAH0iJ0_ptFZ","modules":[{"name":"Vapor"}],"extendedModule":"Vapor","role":"symbol"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/vapor\/environment\/secret(path:fileio:on:)"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(path:fileIO:on:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"secret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"path","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":", ","kind":"text"},{"text":"fileIO","kind":"externalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","text":"NonBlockingFileIO","kind":"typeIdentifier","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"eventLoop","kind":"internalParam"},{"text":": ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","text":"EventLoop","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"text":") -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":"?>","kind":"text"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"name":"path","content":[{"inlineContent":[{"text":"Path to the file containing the secret","type":"text"}],"type":"paragraph"}]},{"name":"fileIO","content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"NonBlockingFileIO"},{"type":"text","text":" handler provided by NIO"}],"type":"paragraph"}]},{"name":"eventLoop","content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" for NIO to use for working with the file"}],"type":"paragraph"}]}]},{"kind":"content","content":[{"text":"Return Value","anchor":"return-value","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}]}],"sections":[],"abstract":[{"text":"Load the content of a file at a given path as a secret.","type":"text"}],"references":{"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"kind":"identifier","text":"NonBlockingFileIO"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NonBlockingFileIO"}],"url":"\/documentation\/nioposix\/nonblockingfileio","kind":"symbol","title":"NonBlockingFileIO","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"type":"text","text":" is a helper that allows you to read files without blocking the calling thread."}]},"doc://co.pointfree.VaporRouting/documentation/Vapor":{"title":"Vapor","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","kind":"symbol","url":"\/documentation\/vapor","type":"topic","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment/secret(path:fileIO:on:)":{"kind":"symbol","url":"\/documentation\/vapor\/environment\/secret(path:fileio:on:)","abstract":[{"text":"Load the content of a file at a given path as a secret.","type":"text"}],"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"secret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"path","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileIO","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"NonBlockingFileIO","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"text":"?>","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(path:fileIO:on:)","role":"symbol","title":"secret(path:fileIO:on:)"},"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment":{"abstract":[{"type":"text","text":"The environment the application is running in, i.e., production, dev, etc. All "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"s will have"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" that can be used to dynamically register and configure services."}],"kind":"symbol","title":"Environment","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment","url":"\/documentation\/vapor\/environment","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Environment","kind":"identifier"}],"navigatorTitle":[{"text":"Environment","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","type":"topic","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s until itâ€™s closed."}]}}}