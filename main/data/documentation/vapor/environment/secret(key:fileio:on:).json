{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"secret"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileIO"},{"kind":"text","text":": "},{"preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV","kind":"typeIdentifier","text":"NonBlockingFileIO","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":" "},{"kind":"internalParam","text":"eventLoop"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture"},{"kind":"text","text":"<"},{"preciseIdentifier":"s:SS","kind":"typeIdentifier","text":"String"},{"kind":"text","text":"?>"}],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"The environment variable name","type":"text"}],"type":"paragraph"}],"name":"key"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"},{"code":"NonBlockingFileIO","type":"codeVoice"},{"text":" handler provided by NIO","type":"text"}]}],"name":"fileIO"},{"content":[{"inlineContent":[{"type":"text","text":""},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":" for NIO to use for working with the file"}],"type":"paragraph"}],"name":"eventLoop"}],"kind":"parameters"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Example usage:","type":"text"}]},{"type":"codeListing","syntax":null,"code":["func configure(_ app: Application) {","    \/\/ ...","","    let databasePassword = try Environment.secret(","        key: \"DATABASE_PASSWORD_FILE\",","        fileIO: app.fileio,","        on: app.eventLoopGroup.next()","    ).wait()",""]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Do "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" use "},{"type":"codeVoice","code":".wait()"},{"type":"text","text":" if loading a secret at any time after the app has booted, such as while"},{"type":"text","text":" "},{"type":"text","text":"handling a "},{"type":"codeVoice","code":"Request"},{"type":"text","text":". Chain the result as you would any other future instead."}]}],"name":"Important","style":"important"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/vapor\/environment\/secret(key:fileio:on:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"secret"},{"kind":"text","text":"("},{"kind":"externalParam","text":"key"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileIO"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV","text":"NonBlockingFileIO"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:SS","text":"String"},{"kind":"text","text":"?>"}],"role":"symbol","title":"secret(key:fileIO:on:)","modules":[{"name":"Vapor"}],"externalID":"s:5Vapor11EnvironmentV6secret3key6fileIO2on7NIOCore15EventLoopFutureCySSSgGSS_8NIOPosix015NonBlockingFileF0VAH0iJ0_ptFZ","symbolKind":"method","extendedModule":"Vapor","roleHeading":"Type Method"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment"]]},"sections":[],"abstract":[{"type":"text","text":"Reads a file’s content for a secret. The secret key is the name of the environment variable that is expected to"},{"type":"text","text":" "},{"type":"text","text":"specify the path of the file containing the secret."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(key:fileIO:on:)"},"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment":{"abstract":[{"type":"text","text":"The environment the application is running in, i.e., production, dev, etc. All "},{"type":"codeVoice","code":"Container"},{"type":"text","text":"s will have"},{"type":"text","text":" "},{"type":"text","text":"an "},{"type":"codeVoice","code":"Environment"},{"type":"text","text":" that can be used to dynamically register and configure services."}],"kind":"symbol","title":"Environment","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment","url":"\/documentation\/vapor\/environment","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"Environment","kind":"identifier"}],"navigatorTitle":[{"text":"Environment","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Vapor/Environment/secret(key:fileIO:on:)":{"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"secret","kind":"identifier"},{"text":"(","kind":"text"},{"text":"key","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileIO","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"NonBlockingFileIO","preciseIdentifier":"s:8NIOPosix17NonBlockingFileIOV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"on"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"String","preciseIdentifier":"s:SS"},{"kind":"text","text":"?>"}],"role":"symbol","title":"secret(key:fileIO:on:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor\/Environment\/secret(key:fileIO:on:)","abstract":[{"type":"text","text":"Reads a file’s content for a secret. The secret key is the name of the environment variable that is expected to"},{"type":"text","text":" "},{"type":"text","text":"specify the path of the file containing the secret."}],"url":"\/documentation\/vapor\/environment\/secret(key:fileio:on:)"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","type":"topic","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s until it’s closed."}]},"doc://co.pointfree.VaporRouting/documentation/Vapor":{"title":"Vapor","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Vapor","kind":"symbol","url":"\/documentation\/vapor","type":"topic","role":"collection"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOPosix/NonBlockingFileIO":{"navigatorTitle":[{"kind":"identifier","text":"NonBlockingFileIO"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOPosix\/NonBlockingFileIO","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NonBlockingFileIO"}],"url":"\/documentation\/nioposix\/nonblockingfileio","kind":"symbol","title":"NonBlockingFileIO","abstract":[{"code":"NonBlockingFileIO","type":"codeVoice"},{"type":"text","text":" is a helper that allows you to read files without blocking the calling thread."}]}}}