{"metadata":{"externalID":"s:s20LazySequenceProtocolP10AlgorithmsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC05SplitB0Vy8ElementsQzGAE_SiSbtF::SYNTHESIZED::s:10Algorithms23JoinedByClosureSequenceV","extendedModule":"Swift","title":"split(separator:maxSplits:omittingEmptySubsequences:)","modules":[{"name":"Algorithms"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}]},"symbolKind":"method","roleHeading":"Instance Method"},"sections":[],"abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"type":"text","text":" "},{"type":"text","text":"order, around elements equal to the given element."}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence\/LazySequenceProtocol-Implementations"]]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":" = true) -> "},{"preciseIdentifier":"s:10Algorithms13SplitSequenceV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"typeIdentifier","text":"SplitSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"name":"separator","content":[{"inlineContent":[{"type":"text","text":"The element that should be split upon."}],"type":"paragraph"}]},{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to split the sequence, or"},{"type":"text","text":" "},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"code":"maxSplits + 1","type":"codeVoice"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"type":"text","text":" "},{"type":"text","text":"of the original sequence containing the remaining elements."},{"type":"text","text":" "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"code":"Int.max","type":"codeVoice"},{"type":"text","text":"."}]}]},{"name":"omittingEmptySubsequences","content":[{"inlineContent":[{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" ","type":"text"},{"text":"elements in the sequence and for each instance of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" at","type":"text"},{"text":" ","type":"text"},{"text":"the start or end of the sequence. If ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", only nonempty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences are returned. The default value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"anchor":"return-value","text":"Return Value","type":"heading","level":2},{"inlineContent":[{"text":"A lazy sequence of subsequences, split from this sequenceâ€™s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"text":"The resulting lazy sequence consists of at most ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the sequence are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"sequence).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when splitting a sequence of"},{"type":"text","text":" "},{"type":"text","text":"integers at each zero ("},{"type":"codeVoice","code":"0"},{"type":"text","text":"). The first use of "},{"type":"codeVoice","code":"split"},{"type":"text","text":" returns each"},{"type":"text","text":" "},{"type":"text","text":"subsequence that was originally separated by one or more zeros."}],"type":"paragraph"},{"syntax":null,"code":["let numbers = AnySequence([1, 2, 0, 3, 4, 0, 0, 5])","for subsequence in numbers.lazy.split(separator: 0) {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[5]","*\/"],"type":"codeListing"},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original sequence is split just once, into two subsequences.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    maxSplits: 1",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4, 0, 0, 5]","*\/"],"type":"codeListing"},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"text":"parameter, so the sequence of returned subsequences contains empty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences where zeros were repeated.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    omittingEmptySubsequences: false",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[]","[5]","*\/"],"type":"codeListing"},{"name":"Complexity","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the sequence.","type":"text"}]}]}],"kind":"content"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence\/split(separator:maxSplits:omittingEmptySubsequences:)-6r7fn"},"kind":"symbol","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/joinedbyclosuresequence\/split(separator:maxsplits:omittingemptysubsequences:)-6r7fn"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"Algorithms","url":"\/documentation\/algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureSequence/split(separator:maxSplits:omittingEmptySubsequences:)-6r7fn":{"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"split(separator:maxSplits:omittingEmptySubsequences:)","abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"type":"text","text":" "},{"type":"text","text":"order, around elements equal to the given element."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence\/split(separator:maxSplits:omittingEmptySubsequences:)-6r7fn","type":"topic","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","url":"\/documentation\/algorithms\/joinedbyclosuresequence\/split(separator:maxsplits:omittingemptysubsequences:)-6r7fn"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureSequence":{"kind":"symbol","title":"JoinedByClosureSequence","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence","url":"\/documentation\/algorithms\/joinedbyclosuresequence","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"JoinedByClosureSequence"}],"abstract":[{"text":"A sequence that presents the elements of a base sequence of sequences","type":"text"},{"text":" ","type":"text"},{"text":"concatenated using a given separator that depends on the sequences right","type":"text"},{"type":"text","text":" "},{"type":"text","text":"before and after it."}],"navigatorTitle":[{"kind":"identifier","text":"JoinedByClosureSequence"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureSequence/LazySequenceProtocol-Implementations":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureSequence\/LazySequenceProtocol-Implementations","role":"collectionGroup","type":"topic","title":"LazySequenceProtocol Implementations","url":"\/documentation\/algorithms\/joinedbyclosuresequence\/lazysequenceprotocol-implementations","kind":"article","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"type":"topic","url":"\/documentation\/algorithms\/splitsequence","title":"SplitSequence","navigatorTitle":[{"text":"SplitSequence","kind":"identifier"}],"abstract":[{"type":"text","text":"A sequence that lazily splits a base sequence into subsequences separated by"},{"type":"text","text":" "},{"type":"text","text":"elements that satisfy the given "},{"type":"codeVoice","code":"whereSeparator"},{"type":"text","text":" predicate."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SplitSequence","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"symbol","role":"symbol"}}}