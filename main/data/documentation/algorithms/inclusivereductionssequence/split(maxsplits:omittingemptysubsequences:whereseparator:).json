{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/LazySequenceProtocol-Implementations"]]},"sections":[],"variants":[{"paths":["\/documentation\/algorithms\/inclusivereductionssequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"type":"text","text":" "},{"type":"text","text":"order, that don’t contain elements satisfying the given predicate."}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","interfaceLanguage":"swift"},"metadata":{"externalID":"s:s20LazySequenceProtocolP10AlgorithmsE5split9maxSplits25omittingEmptySubsequences14whereSeparatorAC05SplitB0Vy8ElementsQzGSi_S2b7ElementQzctF::SYNTHESIZED::s:10Algorithms27InclusiveReductionsSequenceV","modules":[{"name":"Algorithms"}],"role":"symbol","roleHeading":"Instance Method","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"extendedModule":"Swift"},"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":" = true, ","kind":"text"},{"text":"whereSeparator","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"isSeparator","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"platforms":["Linux"],"languages":["swift"]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the sequence, or","type":"text"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original sequence containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"type":"codeVoice","code":"Int.max"},{"text":".","type":"text"}]}],"name":"maxSplits"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"type":"text","text":" "},{"type":"text","text":"satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" predicate and for each element at the"},{"type":"text","text":" "},{"type":"text","text":"start or end of the sequence satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" "},{"type":"text","text":"predicate. The default value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}]}],"name":"omittingEmptySubsequences"},{"content":[{"inlineContent":[{"text":"A closure that takes an element as an argument and","type":"text"},{"text":" ","type":"text"},{"text":"returns a Boolean value indicating whether the sequence should be","type":"text"},{"text":" ","type":"text"},{"text":"split at that element.","type":"text"}],"type":"paragraph"}],"name":"whereSeparator"}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"text":"A lazy sequence of subsequences, split from this sequence’s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}]}]},{"kind":"content","content":[{"type":"heading","text":"Discussion","anchor":"discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The resulting lazy sequence consists of at most "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" "},{"type":"text","text":"subsequences. Elements that are used to split the sequence are not"},{"type":"text","text":" "},{"type":"text","text":"returned as part of any subsequence (except possibly the last one, in the"},{"type":"text","text":" "},{"type":"text","text":"case where "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" is less than the number of separators in the"},{"type":"text","text":" "},{"type":"text","text":"sequence)."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" and"},{"type":"text","text":" "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"type":"text","text":" parameters when lazily splitting a sequence of"},{"type":"text","text":" "},{"type":"text","text":"integers using a closure that matches numbers evenly divisible by 3 or 5."},{"type":"text","text":" "},{"type":"text","text":"The first use of "},{"code":"split","type":"codeVoice"},{"type":"text","text":" returns each subsequence that was originally"},{"type":"text","text":" "},{"type":"text","text":"separated by one or more such numbers."}]},{"syntax":null,"type":"codeListing","code":["let numbers = stride(from: 1, through: 16, by: 1)","for subsequence in numbers.lazy.split(","  whereSeparator: { $0 % 3 == 0 || $0 % 5 == 0 }",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[4]","[7, 8]","[11]","[13, 14]","[16]","*\/"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second example passes "},{"code":"1","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"maxSplits","type":"codeVoice"},{"type":"text","text":" parameter, so the"},{"type":"text","text":" "},{"type":"text","text":"original sequence is split just once, into two subsequences."}]},{"syntax":null,"type":"codeListing","code":["for subsequence in numbers.lazy.split(","  maxSplits: 1,","  whereSeparator: { $0 % 3 == 0 || $0 % 5 == 0 }",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]","*\/"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final example passes "},{"code":"false","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the sequence of returned subsequences contains empty"},{"type":"text","text":" "},{"type":"text","text":"subsequences where numbers evenly divisible by 3 or 5 were repeated."}]},{"syntax":null,"type":"codeListing","code":["for subsequence in numbers.lazy.split(","    omittingEmptySubsequences: false,","    whereSeparator: { $0 % 3 == 0 || $0 % 5 == 0 }",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[4]","[]","[7, 8]","[]","[11]","[13, 14]","[16]","*\/"]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"O("},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"type":"text","text":" is the length of the sequence."}]}],"name":"Complexity","style":"note"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"Algorithms","url":"\/documentation\/algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/InclusiveReductionsSequence":{"title":"InclusiveReductionsSequence","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InclusiveReductionsSequence"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"InclusiveReductionsSequence"}],"url":"\/documentation\/algorithms\/inclusivereductionssequence","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/InclusiveReductionsSequence/LazySequenceProtocol-Implementations":{"url":"\/documentation\/algorithms\/inclusivereductionssequence\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/LazySequenceProtocol-Implementations","kind":"article","role":"collectionGroup","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"type":"topic","url":"\/documentation\/algorithms\/splitsequence","title":"SplitSequence","navigatorTitle":[{"text":"SplitSequence","kind":"identifier"}],"abstract":[{"type":"text","text":"A sequence that lazily splits a base sequence into subsequences separated by"},{"type":"text","text":" "},{"type":"text","text":"elements that satisfy the given "},{"type":"codeVoice","code":"whereSeparator"},{"type":"text","text":" predicate."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SplitSequence","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/InclusiveReductionsSequence/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"type":"topic","abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"type":"text","text":" "},{"type":"text","text":"order, that don’t contain elements satisfying the given predicate."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InclusiveReductionsSequence\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","url":"\/documentation\/algorithms\/inclusivereductionssequence\/split(maxsplits:omittingemptysubsequences:whereseparator:)","role":"symbol","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","kind":"symbol"}}}