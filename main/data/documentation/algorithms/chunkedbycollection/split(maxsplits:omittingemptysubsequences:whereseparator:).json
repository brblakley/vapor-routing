{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/chunkedbycollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)"]}],"metadata":{"roleHeading":"Instance Method","title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:10Algorithms15SplitCollectionV","kind":"typeIdentifier","text":"SplitCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Self","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Elements","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Collection","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"extendedModule":"Swift","modules":[{"name":"Algorithms"}],"externalID":"s:s20LazySequenceProtocolP10AlgorithmsSlRzSl8ElementsABRpzrlE5split9maxSplits25omittingEmptySubsequences14whereSeparatorAC15SplitCollectionVyAEGSi_S2b7ElementSTQzctF::SYNTHESIZED::s:10Algorithms19ChunkedByCollectionV"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" = true, "},{"kind":"externalParam","text":"whereSeparator"},{"kind":"text","text":" "},{"kind":"internalParam","text":"isSeparator"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","preciseIdentifier":"s:10Algorithms15SplitCollectionV","text":"SplitCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"platforms":["Linux"]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The maximum number of times to split the collection, or"},{"type":"text","text":" "},{"type":"text","text":"one less than the number of subsequences to return. If"},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits + 1"},{"type":"text","text":" subsequences are returned, the last one is a suffix"},{"type":"text","text":" "},{"type":"text","text":"of the original collection containing the remaining elements."},{"type":"text","text":" "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" must be greater than or equal to zero. The default value"},{"type":"text","text":" "},{"type":"text","text":"is "},{"type":"codeVoice","code":"Int.max"},{"type":"text","text":"."}]}],"name":"maxSplits"},{"content":[{"inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"false"},{"type":"text","text":", an empty subsequence is"},{"type":"text","text":" "},{"type":"text","text":"returned in the result for each pair of consecutive elements"},{"type":"text","text":" "},{"type":"text","text":"satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" predicate and for each element at the"},{"type":"text","text":" "},{"type":"text","text":"start or end of the collection satisfying the "},{"type":"codeVoice","code":"isSeparator"},{"type":"text","text":" "},{"type":"text","text":"predicate. The default value is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"omittingEmptySubsequences"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that takes an element as an argument and"},{"type":"text","text":" "},{"type":"text","text":"returns a Boolean value indicating whether the collection should be"},{"type":"text","text":" "},{"type":"text","text":"split at that element."}]}],"name":"whereSeparator"}]},{"content":[{"text":"Return Value","level":2,"type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"A lazy collection of subsequences, split from this collection’s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}],"type":"paragraph"}],"kind":"content"},{"content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"inlineContent":[{"text":"The resulting lazy collection consists of at most ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the collection are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"collection).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following examples show the effects of the "},{"type":"codeVoice","code":"maxSplits"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"type":"text","text":" parameters when lazily splitting a string"},{"type":"text","text":" "},{"type":"text","text":"using a closure that matches spaces. The first use of "},{"type":"codeVoice","code":"split"},{"type":"text","text":" returns each"},{"type":"text","text":" "},{"type":"text","text":"word that was originally separated by one or more spaces."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let line = \"BLANCHE:   I don't want realism. I want magic!\"","for spaceless in line.lazy.split(whereSeparator: { $0 == \" \" }) {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"]},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original string is split just once, into two new strings.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["for spaceless in line.lazy.split(","  maxSplits: 1,","  whereSeparator: { $0 == \" \" }",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/ I don't want realism. I want magic!"]},{"inlineContent":[{"type":"text","text":"The final example passes "},{"code":"false","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"parameter, so the returned array contains empty strings where spaces"},{"type":"text","text":" "},{"type":"text","text":"were repeated."}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["for spaceless in line.lazy.split(","  omittingEmptySubsequences: false,","  whereSeparator: { $0 == \" \" }",") {","  print(spaceless)","}","\/\/ Prints","\/\/ BLANCHE:","\/\/","\/\/","\/\/ I","\/\/ don't","\/\/ want","\/\/ realism.","\/\/ I","\/\/ want","\/\/ magic!"]},{"name":"Complexity","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"), where ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"text":" is the length of the collection.","type":"text"}]}],"type":"aside","style":"note"}],"kind":"content"}],"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection\/LazySequenceProtocol-Implementations"]]},"abstract":[{"text":"Lazily returns the longest possible subsequences of the collection, in","type":"text"},{"text":" ","type":"text"},{"text":"order, that don’t contain elements satisfying the given predicate.","type":"text"}],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitCollection":{"title":"SplitCollection","navigatorTitle":[{"kind":"identifier","text":"SplitCollection"}],"url":"\/documentation\/algorithms\/splitcollection","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"SplitCollection"}],"abstract":[{"text":"A collection that lazily splits a base collection into subsequences","type":"text"},{"text":" ","type":"text"},{"text":"separated by elements that satisfy the given ","type":"text"},{"code":"whereSeparator","type":"codeVoice"},{"text":" predicate.","type":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitCollection","role":"symbol","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunkedByCollection/split(maxSplits:omittingEmptySubsequences:whereSeparator:)":{"title":"split(maxSplits:omittingEmptySubsequences:whereSeparator:)","conformance":{"constraints":[{"code":"Self","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Collection","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Elements","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Collection"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection\/split(maxSplits:omittingEmptySubsequences:whereSeparator:)","url":"\/documentation\/algorithms\/chunkedbycollection\/split(maxsplits:omittingemptysubsequences:whereseparator:)","abstract":[{"text":"Lazily returns the longest possible subsequences of the collection, in","type":"text"},{"text":" ","type":"text"},{"text":"order, that don’t contain elements satisfying the given predicate.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Si","kind":"typeIdentifier","text":"Int"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", "},{"kind":"externalParam","text":"whereSeparator"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10Algorithms15SplitCollectionV","text":"SplitCollection","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunkedByCollection":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection","kind":"symbol","title":"ChunkedByCollection","url":"\/documentation\/algorithms\/chunkedbycollection","abstract":[{"type":"text","text":"A collection wrapper that breaks a collection into chunks based on a"},{"type":"text","text":" "},{"type":"text","text":"predicate."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChunkedByCollection"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChunkedByCollection"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"Algorithms","url":"\/documentation\/algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/ChunkedByCollection/LazySequenceProtocol-Implementations":{"url":"\/documentation\/algorithms\/chunkedbycollection\/lazysequenceprotocol-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/ChunkedByCollection\/LazySequenceProtocol-Implementations","title":"LazySequenceProtocol Implementations","type":"topic","kind":"article","role":"collectionGroup","abstract":[]}}}