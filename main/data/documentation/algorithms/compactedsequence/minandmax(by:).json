{"kind":"symbol","abstract":[{"type":"text","text":"Returns both the minimum and maximum elements in the sequence, using the"},{"type":"text","text":" "},{"type":"text","text":"given predicate as the comparison between elements."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedSequence\/minAndMax(by:)"},"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"variants":[{"paths":["\/documentation\/algorithms\/compactedsequence\/minandmax(by:)"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedSequence\/Sequence-Implementations"]]},"metadata":{"role":"symbol","symbolKind":"method","externalID":"s:ST10AlgorithmsE9minAndMax2by7ElementQz0B0_AE3maxtSgSbAE_AEtKXE_tKF::SYNTHESIZED::s:10Algorithms17CompactedSequenceV","extendedModule":"Swift","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"minAndMax"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> (min"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", max"},{"kind":"text","text":": "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":")?","kind":"text"}],"modules":[{"name":"Algorithms"}],"roleHeading":"Instance Method","title":"minAndMax(by:)"},"primaryContentSections":[{"declarations":[{"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"minAndMax","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"areInIncreasingOrder","kind":"internalParam"},{"text":": (","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> (min","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", max","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":")?","kind":"text"}],"platforms":["Linux"]}],"kind":"declarations"},{"parameters":[{"name":"areInIncreasingOrder","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A predicate that returns "},{"code":"true","type":"codeVoice"},{"type":"text","text":" if its"},{"type":"text","text":" "},{"type":"text","text":"first argument should be ordered before its second argument; otherwise,"},{"type":"text","text":" "},{"code":"false","type":"codeVoice"},{"type":"text","text":"."}]}]}],"kind":"parameters"},{"content":[{"level":2,"anchor":"return-value","type":"heading","text":"Return Value"},{"inlineContent":[{"type":"text","text":"A tuple with the sequenceâ€™s minimum element, followed by its"},{"type":"text","text":" "},{"type":"text","text":"maximum element. If the sequence provides multiple qualifying minimum"},{"type":"text","text":" "},{"type":"text","text":"elements, the first equivalent element is returned; of multiple maximum"},{"type":"text","text":" "},{"type":"text","text":"elements, the last is returned. If the sequence has no elements, the"},{"type":"text","text":" "},{"type":"text","text":"method returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}],"kind":"content"},{"content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The predicate must be a ","type":"text"},{"inlineContent":[{"type":"text","text":"strict weak ordering"}],"type":"emphasis"},{"text":" over the elements. That is,","type":"text"},{"text":" ","type":"text"},{"text":"for any elements ","type":"text"},{"code":"a","type":"codeVoice"},{"text":", ","type":"text"},{"code":"b","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"c","type":"codeVoice"},{"text":", the following conditions must hold:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"areInIncreasingOrder(a, a)"},{"type":"text","text":" is always "},{"type":"codeVoice","code":"false"},{"type":"text","text":". (Irreflexivity)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"areInIncreasingOrder(a, b)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"areInIncreasingOrder(b, c)"},{"type":"text","text":" are"},{"type":"text","text":" "},{"type":"text","text":"both "},{"type":"codeVoice","code":"true"},{"type":"text","text":", then "},{"type":"codeVoice","code":"areInIncreasingOrder(a, c)"},{"type":"text","text":" is also"},{"type":"text","text":" "},{"type":"codeVoice","code":"true"},{"type":"text","text":". (Transitive comparability)"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Two elements are "},{"inlineContent":[{"type":"text","text":"incomparable"}],"type":"emphasis"},{"type":"text","text":" if neither is ordered before the other"},{"type":"text","text":" "},{"type":"text","text":"according to the predicate. If "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" are incomparable, and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" "},{"type":"text","text":"and "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are incomparable, then "},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"c"},{"type":"text","text":" are also incomparable."},{"type":"text","text":" "},{"type":"text","text":"(Transitive incomparability)"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"This example shows how to use the ","type":"text"},{"type":"codeVoice","code":"minAndMax(by:)"},{"text":" method on a dictionary","type":"text"},{"text":" ","type":"text"},{"text":"to find the key-value pair with the lowest value and the pair with the","type":"text"},{"text":" ","type":"text"},{"text":"highest value.","type":"text"}]},{"syntax":null,"type":"codeListing","code":["let hues = [\"Heliotrope\": 296, \"Coral\": 16, \"Aquamarine\": 156]","if let extremeHues = hues.minAndMax(by: {$0.value < $1.value}) {","    print(extremeHues.min, extremeHues.max)","} else {","    print(\"There are no hues\")","}","\/\/ Prints: \"(key: \"Coral\", value: 16) (key: \"Heliotrope\", value: 296)\""]},{"content":[{"inlineContent":[{"type":"text","text":"The sequence is finite."}],"type":"paragraph"}],"type":"aside","name":"Precondition","style":"note"},{"content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}],"type":"aside","name":"Complexity","style":"note"}],"kind":"content"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/CompactedSequence/minAndMax(by:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedSequence\/minAndMax(by:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"minAndMax"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> (min"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", max"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"text":"Element","kind":"typeIdentifier"},{"text":")?","kind":"text"}],"type":"topic","kind":"symbol","title":"minAndMax(by:)","role":"symbol","abstract":[{"type":"text","text":"Returns both the minimum and maximum elements in the sequence, using the"},{"type":"text","text":" "},{"type":"text","text":"given predicate as the comparison between elements."}],"url":"\/documentation\/algorithms\/compactedsequence\/minandmax(by:)"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CompactedSequence/Sequence-Implementations":{"role":"collectionGroup","type":"topic","title":"Sequence Implementations","url":"\/documentation\/algorithms\/compactedsequence\/sequence-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedSequence\/Sequence-Implementations","kind":"article","abstract":[]},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"Algorithms","url":"\/documentation\/algorithms"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/CompactedSequence":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"CompactedSequence"}],"navigatorTitle":[{"kind":"identifier","text":"CompactedSequence"}],"role":"symbol","type":"topic","title":"CompactedSequence","url":"\/documentation\/algorithms\/compactedsequence","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/CompactedSequence","kind":"symbol","abstract":[{"type":"text","text":"A "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" that iterates over every non-nil element from the original"},{"type":"text","text":" "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":"."}]}}}