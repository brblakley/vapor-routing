{"metadata":{"title":"split(separator:maxSplits:omittingEmptySubsequences:)","symbolKind":"method","role":"symbol","extendedModule":"Swift","externalID":"s:s20LazySequenceProtocolP10AlgorithmsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC05SplitB0Vy8ElementsQzGAE_SiSbtF::SYNTHESIZED::s:10Algorithms20InterspersedSequenceV","roleHeading":"Instance Method","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Element"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Int","preciseIdentifier":"s:Si"},{"kind":"text","text":", "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"modules":[{"name":"Algorithms"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/interspersedsequence\/split(separator:maxsplits:omittingemptysubsequences:)-6l1wp"]}],"abstract":[{"type":"text","text":"Lazily returns the longest possible subsequences of the sequence, in"},{"type":"text","text":" "},{"type":"text","text":"order, around elements equal to the given element."}],"sections":[],"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"split"},{"kind":"text","text":"("},{"kind":"externalParam","text":"separator"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element"},{"kind":"text","text":", "},{"kind":"externalParam","text":"maxSplits"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Si","text":"Int"},{"kind":"text","text":" = Int.max, "},{"kind":"externalParam","text":"omittingEmptySubsequences"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":" = true) -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"typeIdentifier","preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"The element that should be split upon."}],"type":"paragraph"}],"name":"separator"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the sequence, or","type":"text"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original sequence containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"code":"Int.max","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"maxSplits"},{"content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" ","type":"text"},{"text":"elements in the sequence and for each instance of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" at","type":"text"},{"text":" ","type":"text"},{"text":"the start or end of the sequence. If ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", only nonempty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences are returned. The default value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"omittingEmptySubsequences"}]},{"kind":"content","content":[{"text":"Return Value","type":"heading","anchor":"return-value","level":2},{"type":"paragraph","inlineContent":[{"text":"A lazy sequence of subsequences, split from this sequenceâ€™s","type":"text"},{"text":" ","type":"text"},{"text":"elements.","type":"text"}]}]},{"kind":"content","content":[{"anchor":"discussion","type":"heading","level":2,"text":"Discussion"},{"inlineContent":[{"text":"The resulting lazy sequence consists of at most ","type":"text"},{"code":"maxSplits + 1","type":"codeVoice"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the sequence are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"sequence).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"integers at each zero (","type":"text"},{"code":"0","type":"codeVoice"},{"text":"). The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"text":" returns each","type":"text"},{"text":" ","type":"text"},{"text":"subsequence that was originally separated by one or more zeros.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["let numbers = AnySequence([1, 2, 0, 3, 4, 0, 0, 5])","for subsequence in numbers.lazy.split(separator: 0) {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[5]","*\/"]},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original sequence is split just once, into two subsequences.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    maxSplits: 1",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4, 0, 0, 5]","*\/"]},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" ","type":"text"},{"text":"parameter, so the sequence of returned subsequences contains empty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences where zeros were repeated.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    omittingEmptySubsequences: false",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[]","[5]","*\/"]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"O("},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":"), where "},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"type":"text","text":" is the length of the sequence."}],"type":"paragraph"}],"name":"Complexity","style":"note"}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InterspersedSequence","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InterspersedSequence\/LazySequenceProtocol-Implementations"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"symbol","identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InterspersedSequence\/split(separator:maxSplits:omittingEmptySubsequences:)-6l1wp","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/InterspersedSequence":{"title":"InterspersedSequence","navigatorTitle":[{"kind":"identifier","text":"InterspersedSequence"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InterspersedSequence","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"InterspersedSequence"}],"type":"topic","kind":"symbol","url":"\/documentation\/algorithms\/interspersedsequence","abstract":[{"type":"text","text":"A sequence that presents the elements of a base sequence of elements with a"},{"type":"text","text":" "},{"type":"text","text":"separator between each of those elements."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/InterspersedSequence/LazySequenceProtocol-Implementations":{"role":"collectionGroup","type":"topic","kind":"article","abstract":[],"url":"\/documentation\/algorithms\/interspersedsequence\/lazysequenceprotocol-implementations","title":"LazySequenceProtocol Implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InterspersedSequence\/LazySequenceProtocol-Implementations"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/InterspersedSequence/split(separator:maxSplits:omittingEmptySubsequences:)-6l1wp":{"title":"split(separator:maxSplits:omittingEmptySubsequences:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/InterspersedSequence\/split(separator:maxSplits:omittingEmptySubsequences:)-6l1wp","url":"\/documentation\/algorithms\/interspersedsequence\/split(separator:maxsplits:omittingemptysubsequences:)-6l1wp","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"text":".","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"type":"topic","abstract":[{"text":"Lazily returns the longest possible subsequences of the sequence, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"type":"topic","url":"\/documentation\/algorithms\/splitsequence","title":"SplitSequence","navigatorTitle":[{"text":"SplitSequence","kind":"identifier"}],"abstract":[{"type":"text","text":"A sequence that lazily splits a base sequence into subsequences separated by"},{"type":"text","text":" "},{"type":"text","text":"elements that satisfy the given "},{"type":"codeVoice","code":"whereSeparator"},{"type":"text","text":" predicate."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SplitSequence","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"Algorithms","url":"\/documentation\/algorithms"}}}