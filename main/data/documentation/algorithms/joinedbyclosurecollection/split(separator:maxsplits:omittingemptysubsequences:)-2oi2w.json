{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-2oi2w"},"metadata":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Elements"},{"kind":"text","text":">"}],"externalID":"s:s20LazySequenceProtocolP10AlgorithmsSQ7ElementRpzrlE5split9separator9maxSplits25omittingEmptySubsequencesAC05SplitB0Vy8ElementsQzGAE_SiSbtF::SYNTHESIZED::s:10Algorithms25JoinedByClosureCollectionV","modules":[{"name":"Algorithms"}],"conformance":{"constraints":[{"code":"Element","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"title":"split(separator:maxSplits:omittingEmptySubsequences:)","symbolKind":"method","extendedModule":"Swift","role":"symbol","roleHeading":"Instance Method"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection","doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection\/LazySequenceProtocol-Implementations"]]},"sections":[],"abstract":[{"text":"Lazily returns the longest possible subsequences of the sequence, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/algorithms\/joinedbyclosurecollection\/split(separator:maxsplits:omittingemptysubsequences:)-2oi2w"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"kind":"symbol","primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Si","text":"Int","kind":"typeIdentifier"},{"text":" = Int.max, ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":" = true) -> ","kind":"text"},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV","text":"SplitSequence","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"separator","content":[{"inlineContent":[{"type":"text","text":"The element that should be split upon."}],"type":"paragraph"}]},{"name":"maxSplits","content":[{"type":"paragraph","inlineContent":[{"text":"The maximum number of times to split the sequence, or","type":"text"},{"text":" ","type":"text"},{"text":"one less than the number of subsequences to return. If","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" subsequences are returned, the last one is a suffix","type":"text"},{"text":" ","type":"text"},{"text":"of the original sequence containing the remaining elements.","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" must be greater than or equal to zero. The default value","type":"text"},{"text":" ","type":"text"},{"text":"is ","type":"text"},{"type":"codeVoice","code":"Int.max"},{"text":".","type":"text"}]}]},{"name":"omittingEmptySubsequences","content":[{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", an empty subsequence is","type":"text"},{"text":" ","type":"text"},{"text":"returned in the result for each consecutive pair of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" ","type":"text"},{"text":"elements in the sequence and for each instance of ","type":"text"},{"code":"separator","type":"codeVoice"},{"text":" at","type":"text"},{"text":" ","type":"text"},{"text":"the start or end of the sequence. If ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", only nonempty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences are returned. The default value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}]}]}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A lazy sequence of subsequences, split from this sequenceâ€™s"},{"type":"text","text":" "},{"type":"text","text":"elements."}]}]},{"kind":"content","content":[{"level":2,"anchor":"discussion","text":"Discussion","type":"heading"},{"inlineContent":[{"text":"The resulting lazy sequence consists of at most ","type":"text"},{"type":"codeVoice","code":"maxSplits + 1"},{"text":" ","type":"text"},{"text":"subsequences. Elements that are used to split the sequence are not","type":"text"},{"text":" ","type":"text"},{"text":"returned as part of any subsequence (except possibly the last one, in the","type":"text"},{"text":" ","type":"text"},{"text":"case where ","type":"text"},{"type":"codeVoice","code":"maxSplits"},{"text":" is less than the number of separators in the","type":"text"},{"text":" ","type":"text"},{"text":"sequence).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following examples show the effects of the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" and","type":"text"},{"text":" ","type":"text"},{"code":"omittingEmptySubsequences","type":"codeVoice"},{"text":" parameters when splitting a sequence of","type":"text"},{"text":" ","type":"text"},{"text":"integers at each zero (","type":"text"},{"code":"0","type":"codeVoice"},{"text":"). The first use of ","type":"text"},{"code":"split","type":"codeVoice"},{"text":" returns each","type":"text"},{"text":" ","type":"text"},{"text":"subsequence that was originally separated by one or more zeros.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["let numbers = AnySequence([1, 2, 0, 3, 4, 0, 0, 5])","for subsequence in numbers.lazy.split(separator: 0) {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[5]","*\/"],"type":"codeListing"},{"inlineContent":[{"text":"The second example passes ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" for the ","type":"text"},{"code":"maxSplits","type":"codeVoice"},{"text":" parameter, so the","type":"text"},{"text":" ","type":"text"},{"text":"original sequence is split just once, into two subsequences.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    maxSplits: 1",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4, 0, 0, 5]","*\/"],"type":"codeListing"},{"inlineContent":[{"text":"The final example passes ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" for the ","type":"text"},{"type":"codeVoice","code":"omittingEmptySubsequences"},{"text":" ","type":"text"},{"text":"parameter, so the sequence of returned subsequences contains empty","type":"text"},{"text":" ","type":"text"},{"text":"subsequences where zeros were repeated.","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["for subsequence in numbers.lazy.split(","    separator: 0,","    omittingEmptySubsequences: false",") {","  print(subsequence)","}","\/* Prints:","[1, 2]","[3, 4]","[]","[5]","*\/"],"type":"codeListing"},{"style":"note","name":"Complexity","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"O(","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":"), where ","type":"text"},{"inlineContent":[{"text":"n","type":"text"}],"type":"emphasis"},{"text":" is the length of the sequence.","type":"text"}]}]}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Algorithms/SplitSequence":{"type":"topic","url":"\/documentation\/algorithms\/splitsequence","title":"SplitSequence","navigatorTitle":[{"text":"SplitSequence","kind":"identifier"}],"abstract":[{"type":"text","text":"A sequence that lazily splits a base sequence into subsequences separated by"},{"type":"text","text":" "},{"type":"text","text":"elements that satisfy the given "},{"type":"codeVoice","code":"whereSeparator"},{"type":"text","text":" predicate."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SplitSequence","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/SplitSequence","kind":"symbol","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureCollection":{"abstract":[{"type":"text","text":"A collection that presents the elements of a base collection of collections"},{"type":"text","text":" "},{"type":"text","text":"concatenated using a given separator that depends on the collections right"},{"type":"text","text":" "},{"type":"text","text":"before and after it."}],"kind":"symbol","url":"\/documentation\/algorithms\/joinedbyclosurecollection","role":"symbol","navigatorTitle":[{"text":"JoinedByClosureCollection","kind":"identifier"}],"title":"JoinedByClosureCollection","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"JoinedByClosureCollection","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureCollection/LazySequenceProtocol-Implementations":{"title":"LazySequenceProtocol Implementations","kind":"article","role":"collectionGroup","url":"\/documentation\/algorithms\/joinedbyclosurecollection\/lazysequenceprotocol-implementations","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection\/LazySequenceProtocol-Implementations","abstract":[],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Algorithms/JoinedByClosureCollection/split(separator:maxSplits:omittingEmptySubsequences:)-2oi2w":{"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms\/JoinedByClosureCollection\/split(separator:maxSplits:omittingEmptySubsequences:)-2oi2w","title":"split(separator:maxSplits:omittingEmptySubsequences:)","abstract":[{"text":"Lazily returns the longest possible subsequences of the sequence, in","type":"text"},{"text":" ","type":"text"},{"text":"order, around elements equal to the given element.","type":"text"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"split","kind":"identifier"},{"text":"(","kind":"text"},{"text":"separator","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Element","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"maxSplits","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Int","preciseIdentifier":"s:Si","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"omittingEmptySubsequences","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"SplitSequence","preciseIdentifier":"s:10Algorithms13SplitSequenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Elements","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","kind":"symbol","url":"\/documentation\/algorithms\/joinedbyclosurecollection\/split(separator:maxsplits:omittingemptysubsequences:)-2oi2w","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Element","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]}},"doc://co.pointfree.VaporRouting/documentation/Algorithms":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Algorithms","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"Algorithms","url":"\/documentation\/algorithms"}}}