{"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"requestConnection","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"logger"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier","text":"Logger"},{"kind":"text","text":"? = nil, "},{"kind":"externalParam","text":"on"},{"kind":"text","text":" "},{"kind":"internalParam","text":"eventLoop"},{"kind":"text","text":": "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier","text":"EventLoop"},{"kind":"text","text":"? = nil) -> "},{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Source"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Connection"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"kind":"parameters","parameters":[{"name":"logger","content":[{"inlineContent":[{"text":"For trace and debug logs.","type":"text"}],"type":"paragraph"}]},{"name":"eventLoop","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Preferred event loop for the new connection."}]}]}]},{"kind":"content","content":[{"level":2,"anchor":"return-value","text":"Return Value","type":"heading"},{"inlineContent":[{"text":"A future containing the requested connection.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"The connection returned by this method should be released when you are finished using it.","type":"text"}]},{"type":"codeListing","syntax":null,"code":["let conn = try pool.requestConnection(...).wait()","defer { pool.releaseConnection(conn) }","\/\/ use the connection"]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"type":"codeVoice","code":"withConnection(_:)"},{"text":" for a callback-based method that automatically releases the connection.","type":"text"}]}]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopGroupConnectionPool"]]},"kind":"symbol","sections":[],"abstract":[{"type":"text","text":"Requests a pooled connection."}],"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopGroupConnectionPool\/requestConnection(logger:on:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/asynckit\/eventloopgroupconnectionpool\/requestconnection(logger:on:)"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"role":"symbol","symbolKind":"method","modules":[{"name":"AsyncKit"}],"externalID":"s:8AsyncKit28EventLoopGroupConnectionPoolC07requestF06logger2on7NIOCore0cD6FutureCy0F0QzG7Logging6LoggerVSg_AG0cD0_pSgtF","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"requestConnection","kind":"identifier"},{"text":"(","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Logging6LoggerV","text":"Logger","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7NIOCore9EventLoopP","text":"EventLoop","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Connection","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"requestConnection(logger:on:)"},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","type":"topic","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s until itâ€™s closed."}]},"doc://co.pointfree.VaporRouting/documentation/AsyncKit":{"abstract":[],"kind":"symbol","url":"\/documentation\/asynckit","role":"collection","title":"AsyncKit","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopGroupConnectionPool/requestConnection(logger:on:)":{"url":"\/documentation\/asynckit\/eventloopgroupconnectionpool\/requestconnection(logger:on:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"requestConnection","kind":"identifier"},{"text":"(","kind":"text"},{"text":"logger","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Logger","preciseIdentifier":"s:7Logging6LoggerV","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"text":"on","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Source","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Connection","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","title":"requestConnection(logger:on:)","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopGroupConnectionPool\/requestConnection(logger:on:)","type":"topic","abstract":[{"text":"Requests a pooled connection.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopGroupConnectionPool":{"title":"EventLoopGroupConnectionPool","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopGroupConnectionPool","navigatorTitle":[{"text":"EventLoopGroupConnectionPool","kind":"identifier"}],"abstract":[{"text":"Holds a collection of connection pools for each ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" on an ","type":"text"},{"type":"codeVoice","code":"EventLoopGroup"},{"text":".","type":"text"}],"url":"\/documentation\/asynckit\/eventloopgroupconnectionpool","kind":"symbol","type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopGroupConnectionPool","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Logging/Logger":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Logger"}],"url":"\/documentation\/logging\/logger","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Logging\/Logger","title":"Logger","navigatorTitle":[{"kind":"identifier","text":"Logger"}],"abstract":[{"text":"A ","type":"text"},{"code":"Logger","type":"codeVoice"},{"text":" is the central type in ","type":"text"},{"code":"SwiftLog","type":"codeVoice"},{"text":". Its central function is to emit log messages using one of the methods","type":"text"},{"text":" ","type":"text"},{"text":"corresponding to a log level.","type":"text"}],"kind":"symbol"}}}