{"abstract":[{"text":"Create a new ","type":"text"},{"code":"EventLoopFutureQueue","type":"codeVoice"},{"type":"text","text":" on a given event loop."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asynckit\/eventloopfuturequeue\/init(eventloop:)"]}],"sections":[],"metadata":{"externalID":"s:8AsyncKit20EventLoopFutureQueueC05eventD0AC7NIOCore0cD0_p_tcfc","title":"init(eventLoop:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":")"}],"roleHeading":"Initializer","symbolKind":"init","modules":[{"name":"AsyncKit"}],"role":"symbol"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/init(eventLoop:)"},"schemaVersion":{"major":0,"patch":0,"minor":3},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue"]]},"kind":"symbol","primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore9EventLoopP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","text":"EventLoop"},{"kind":"text","text":")"}]}]},{"kind":"parameters","parameters":[{"name":"eventLoop","content":[{"type":"paragraph","inlineContent":[{"text":"The event loop that all the futures’s completions are handled on.","type":"text"}]}]}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue":{"kind":"symbol","title":"EventLoopFutureQueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFutureQueue"}],"role":"symbol","abstract":[{"type":"text","text":"Allows you to queue closures that produce an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":", so each future only gets run if the previous ones complete, succeed, or fail."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue","url":"\/documentation\/asynckit\/eventloopfuturequeue","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EventLoopFutureQueue"}]},"doc://co.pointfree.VaporRouting/documentation/AsyncKit":{"abstract":[],"kind":"symbol","url":"\/documentation\/asynckit","role":"collection","title":"AsyncKit","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/init(eventLoop:)":{"url":"\/documentation\/asynckit\/eventloopfuturequeue\/init(eventloop:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/init(eventLoop:)","abstract":[{"text":"Create a new ","type":"text"},{"code":"EventLoopFutureQueue","type":"codeVoice"},{"text":" on a given event loop.","type":"text"}],"type":"topic","kind":"symbol","title":"init(eventLoop:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"eventLoop"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"EventLoop","preciseIdentifier":"s:7NIOCore9EventLoopP"},{"kind":"text","text":")"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","type":"topic","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s until it’s closed."}]}}}