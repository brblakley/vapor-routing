{"kind":"symbol","sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue"]]},"metadata":{"role":"symbol","symbolKind":"method","externalID":"s:8AsyncKit20EventLoopFutureQueueC6append_9runningOn7NIOCore0cdE0CyxGAIyXA_AC17ContinueConditionOtlF","title":"append(_:runningOn:)","roleHeading":"Instance Method","modules":[{"name":"AsyncKit"}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(() -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"runningOn","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopFutureQueue","kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC"},{"text":".","kind":"text"},{"text":"ContinueCondition","kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(_:runningOn:)"},"abstract":[{"text":"An overload for ","type":"text"},{"type":"codeVoice","code":"append(generator:runningOn:)"},{"text":" that takes in an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" as an auto closure to provide a better 1-liner API.","type":"text"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"append"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"generator"},{"kind":"text","text":": "},{"kind":"attribute","text":"@autoclosure "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" () -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"runningOn"},{"kind":"text","text":" "},{"kind":"internalParam","text":"next"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC","text":"EventLoopFutureQueue"},{"kind":"text","text":"."},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO","text":"ContinueCondition"},{"kind":"text","text":" = .complete) -> "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","preciseIdentifier":"s:7NIOCore15EventLoopFutureC","text":"EventLoopFuture"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"The statement that will produce an ","type":"text"},{"code":"EventLoopFuture","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"This will automatically get wrapped in a closure.","type":"text"}],"type":"paragraph"}],"name":"generator"},{"content":[{"inlineContent":[{"type":"text","text":"The condition that the previous future(s) must meet on their completion for the appended future to be run."},{"type":"text","text":" "},{"type":"text","text":"The default value is "},{"code":".complete","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"next"}],"kind":"parameters"},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"inlineContent":[{"text":"The future passed into the ","type":"text"},{"type":"codeVoice","code":"generator"},{"text":" parameter.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","type":"heading","level":2},{"type":"codeListing","syntax":null,"code":["let model: EventLoopFuture<Model> = queue.append(Model.query(on: database).first())"]}]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/asynckit\/eventloopfuturequeue\/append(_:runningon:)"]}],"references":{"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/ContinueCondition":{"kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ContinueCondition","kind":"identifier"}],"title":"EventLoopFutureQueue.ContinueCondition","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/ContinueCondition","navigatorTitle":[{"text":"ContinueCondition","kind":"identifier"}],"abstract":[{"text":"Under what conditions an appended closure should be run.","type":"text"}],"role":"symbol","url":"\/documentation\/asynckit\/eventloopfuturequeue\/continuecondition","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue/append(_:runningOn:)":{"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"append","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(() -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"runningOn","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"EventLoopFutureQueue","kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC"},{"text":".","kind":"text"},{"text":"ContinueCondition","kind":"typeIdentifier","preciseIdentifier":"s:8AsyncKit20EventLoopFutureQueueC17ContinueConditionO"},{"text":") -> ","kind":"text"},{"text":"EventLoopFuture","kind":"typeIdentifier","preciseIdentifier":"s:7NIOCore15EventLoopFutureC"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"append(_:runningOn:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue\/append(_:runningOn:)","abstract":[{"text":"An overload for ","type":"text"},{"type":"codeVoice","code":"append(generator:runningOn:)"},{"text":" that takes in an ","type":"text"},{"type":"codeVoice","code":"EventLoopFuture"},{"text":" as an auto closure to provide a better 1-liner API.","type":"text"}],"role":"symbol","url":"\/documentation\/asynckit\/eventloopfuturequeue\/append(_:runningon:)","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit":{"abstract":[],"kind":"symbol","url":"\/documentation\/asynckit","role":"collection","title":"AsyncKit","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/AsyncKit/EventLoopFutureQueue":{"kind":"symbol","title":"EventLoopFutureQueue","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFutureQueue"}],"role":"symbol","abstract":[{"type":"text","text":"Allows you to queue closures that produce an "},{"type":"codeVoice","code":"EventLoopFuture"},{"type":"text","text":", so each future only gets run if the previous ones complete, succeed, or fail."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/AsyncKit\/EventLoopFutureQueue","url":"\/documentation\/asynckit\/eventloopfuturequeue","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EventLoopFutureQueue"}]}}}