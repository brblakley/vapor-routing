{"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"metadata":{"modules":[{"name":"NIOCore"}],"title":"NIOCore","role":"collection","externalID":"NIOCore","symbolKind":"module","roleHeading":"Framework"},"schemaVersion":{"major":0,"patch":0,"minor":3},"variants":[{"paths":["\/documentation\/niocore"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Classes","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask"]},{"title":"Protocols","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPreconcurrencySendable","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder"]},{"title":"Structures","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount"]},{"title":"Type Aliases","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPOSIXFileMode","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption"]},{"title":"Enumerations","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramChannelError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System"]}],"hierarchy":{"paths":[[]]},"references":{"doc://co.pointfree.VaporRouting/documentation/NIOCore/System":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/System","abstract":[],"title":"System","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/system","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"System","kind":"identifier"}],"navigatorTitle":[{"text":"System","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSendable":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSendable","abstract":[],"title":"NIOSendable","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/niosendable","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSendable","kind":"identifier"}],"navigatorTitle":[{"text":"NIOSendable","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteSpinOption":{"deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteSpinOption","abstract":[],"title":"WriteSpinOption","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/writespinoption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"WriteSpinOption","kind":"identifier"}],"navigatorTitle":[{"text":"WriteSpinOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOEventLoopGroupProvider":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOEventLoopGroupProvider","abstract":[{"text":"This type is intended to be used by libraries which use NIO, and offer their users either the option","type":"text"},{"text":" ","type":"text"},{"text":"to ","type":"text"},{"code":".share","type":"codeVoice"},{"text":" an existing event loop group or create (and manage) a new one (","type":"text"},{"code":".createNew","type":"codeVoice"},{"type":"text","text":") and let it be"},{"type":"text","text":" "},{"type":"text","text":"managed by given library and its lifecycle."}],"title":"NIOEventLoopGroupProvider","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/nioeventloopgroupprovider","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"NIOEventLoopGroupProvider","kind":"identifier"}],"navigatorTitle":[{"text":"NIOEventLoopGroupProvider","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionProvider":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionProvider","navigatorTitle":[{"kind":"identifier","text":"SocketOptionProvider"}],"title":"SocketOptionProvider","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketOptionProvider"}],"type":"topic","url":"\/documentation\/niocore\/socketoptionprovider","abstract":[{"type":"text","text":"This protocol defines an object, most commonly a "},{"type":"codeVoice","code":"Channel"},{"text":", that supports","type":"text"},{"text":" ","type":"text"},{"text":"setting and getting socket options (via ","type":"text"},{"code":"setsockopt","type":"codeVoice"},{"text":"\/","type":"text"},{"type":"codeVoice","code":"getsockopt"},{"type":"text","text":" or similar)."},{"type":"text","text":" "},{"type":"text","text":"It provides a strongly typed API that makes working with larger, less-common"},{"type":"text","text":" "},{"type":"text","text":"socket options easier than the "},{"type":"codeVoice","code":"ChannelOption"},{"type":"text","text":" API allows."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AcceptBackoffHandler":{"navigatorTitle":[{"text":"AcceptBackoffHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/acceptbackoffhandler","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AcceptBackoffHandler","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":" that implements a backoff for a "},{"type":"codeVoice","code":"ServerChannel"},{"type":"text","text":" when accept produces an "},{"type":"codeVoice","code":"IOError"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"These errors are often recoverable by reducing the rate at which we call accept."}],"title":"AcceptBackoffHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AcceptBackoffHandler","kind":"identifier"}],"type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileRegion":{"navigatorTitle":[{"kind":"identifier","text":"FileRegion"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileRegion","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"FileRegion"}],"url":"\/documentation\/niocore\/fileregion","kind":"symbol","title":"FileRegion","abstract":[{"type":"text","text":"A "},{"code":"FileRegion","type":"codeVoice"},{"type":"text","text":" represent a readable portion usually created to be sent over the network."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AddressedEnvelope":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AddressedEnvelope","abstract":[{"text":"A data structure for processing addressed datagrams, such as those used by UDP.","type":"text"}],"title":"AddressedEnvelope","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/addressedenvelope","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AddressedEnvelope","kind":"identifier"}],"navigatorTitle":[{"text":"AddressedEnvelope","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopError","abstract":[{"text":"Different ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":"s that are specific to ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":" operations \/ implementations.","type":"text"}],"title":"EventLoopError","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/eventlooperror","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoopError","kind":"identifier"}],"navigatorTitle":[{"text":"EventLoopError","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AdaptiveRecvByteBufferAllocator":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AdaptiveRecvByteBufferAllocator"}],"url":"\/documentation\/niocore\/adaptiverecvbytebufferallocator","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AdaptiveRecvByteBufferAllocator","title":"AdaptiveRecvByteBufferAllocator","role":"symbol","kind":"symbol","abstract":[{"code":"RecvByteBufferAllocator","type":"codeVoice"},{"text":" which will gracefully increment or decrement the buffer size on the feedback that was recorded.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"AdaptiveRecvByteBufferAllocator"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/TimeAmount":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/TimeAmount","title":"TimeAmount","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TimeAmount"}],"abstract":[{"text":"Represents a time ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"interval","type":"text"}]},{"text":".","type":"text"}],"role":"symbol","url":"\/documentation\/niocore\/timeamount","type":"topic","navigatorTitle":[{"kind":"identifier","text":"TimeAmount"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAny":{"role":"symbol","kind":"symbol","abstract":[{"code":"NIOAny","type":"codeVoice"},{"text":" is an opaque container for values of ","type":"text"},{"inlineContent":[{"text":"any","type":"text"}],"type":"emphasis"},{"text":" type, similar to Swift’s builtin ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type. Contrary to","type":"text"},{"text":" ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" the overhead of ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" depends on the the type of the wrapped value. Certain types that are important","type":"text"},{"text":" ","type":"text"},{"text":"for the performance of a SwiftNIO application like ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"FileRegion","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"AddressEnvelope<ByteBuffer>","type":"codeVoice"},{"text":" can be expected","type":"text"},{"text":" ","type":"text"},{"text":"to be wrapped almost without overhead. All others will have similar performance as if they were passed as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" as","type":"text"},{"text":" ","type":"text"},{"code":"NIOAny","type":"codeVoice"},{"text":" just like ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" will contain them within an existential container.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAny","url":"\/documentation\/niocore\/nioany","navigatorTitle":[{"kind":"identifier","text":"NIOAny"}],"title":"NIOAny","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOAny"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllocatorOption":{"deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllocatorOption","abstract":[],"title":"AllocatorOption","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/allocatoroption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AllocatorOption","kind":"identifier"}],"navigatorTitle":[{"text":"AllocatorOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BackPressureHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BackPressureHandler","url":"\/documentation\/niocore\/backpressurehandler","type":"topic","kind":"symbol","role":"symbol","title":"BackPressureHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BackPressureHandler","kind":"identifier"}],"abstract":[{"text":"ChannelHandler implementation which enforces back-pressure by stopping to read from the remote peer when it cannot write back fast enough.","type":"text"},{"text":" ","type":"text"},{"text":"It will start reading again once pending data was written.","type":"text"}],"navigatorTitle":[{"text":"BackPressureHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionName":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionName","abstract":[],"title":"SocketOptionName","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/socketoptionname","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionName","kind":"identifier"}],"navigatorTitle":[{"text":"SocketOptionName","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOExplicitCongestionNotificationState":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOExplicitCongestionNotificationState","title":"NIOExplicitCongestionNotificationState","kind":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOExplicitCongestionNotificationState","kind":"identifier"}],"abstract":[{"text":"Possible Explicit Congestion Notification States","type":"text"}],"role":"symbol","url":"\/documentation\/niocore\/nioexplicitcongestionnotificationstate","type":"topic","navigatorTitle":[{"text":"NIOExplicitCongestionNotificationState","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBuffer":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBuffer"}],"url":"\/documentation\/niocore\/bytebuffer","title":"ByteBuffer","kind":"symbol","type":"topic","abstract":[{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":" stores contiguously allocated raw bytes. It is a random and sequential accessible sequence of zero or"},{"type":"text","text":" "},{"type":"text","text":"more bytes (octets)."}],"navigatorTitle":[{"kind":"identifier","text":"ByteBuffer"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoder":{"url":"\/documentation\/niocore\/bytetomessagedecoder","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"ByteToMessageDecoder","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoder","navigatorTitle":[{"text":"ByteToMessageDecoder","kind":"identifier"}],"abstract":[{"code":"ByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":"s decode bytes in a stream-like fashion from "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" to another message type."}],"type":"topic","title":"ByteToMessageDecoder","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DatagramChannelError":{"type":"topic","abstract":[],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramChannelError","navigatorTitle":[{"kind":"identifier","text":"DatagramChannelError"}],"url":"\/documentation\/niocore\/datagramchannelerror","title":"DatagramChannelError","kind":"symbol","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"DatagramChannelError"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DecodingState":{"role":"symbol","abstract":[{"text":"State of the current decoding process.","type":"text"}],"kind":"symbol","title":"DecodingState","type":"topic","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DecodingState","kind":"identifier"}],"navigatorTitle":[{"text":"DecodingState","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DecodingState","url":"\/documentation\/niocore\/decodingstate"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/DatagramVectorReadMessageCountOption":{"deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/DatagramVectorReadMessageCountOption","abstract":[],"title":"DatagramVectorReadMessageCountOption","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/datagramvectorreadmessagecountoption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DatagramVectorReadMessageCountOption","kind":"identifier"}],"navigatorTitle":[{"text":"DatagramVectorReadMessageCountOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FixedSizeRecvByteBufferAllocator":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FixedSizeRecvByteBufferAllocator","abstract":[{"code":"RecvByteBufferAllocator","type":"codeVoice"},{"text":" which will always return a ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" with the same fixed size no matter what was recorded.","type":"text"}],"title":"FixedSizeRecvByteBufferAllocator","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/fixedsizerecvbytebufferallocator","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FixedSizeRecvByteBufferAllocator"}],"navigatorTitle":[{"kind":"identifier","text":"FixedSizeRecvByteBufferAllocator"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Endianness":{"abstract":[{"text":"Endianness refers to the sequential order in which bytes are arranged into larger numerical values when stored in","type":"text"},{"text":" ","type":"text"},{"text":"memory or when transmitted over digital links.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/endianness","title":"Endianness","navigatorTitle":[{"text":"Endianness","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Endianness","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Endianness","kind":"identifier"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOError","abstract":[{"text":"An ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":" for an IO operation.","type":"text"}],"title":"IOError","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/ioerror","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IOError","kind":"identifier"}],"navigatorTitle":[{"text":"IOError","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoop":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EventLoop","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoop","type":"topic","navigatorTitle":[{"text":"EventLoop","kind":"identifier"}],"title":"EventLoop","role":"symbol","url":"\/documentation\/niocore\/eventloop","abstract":[{"text":"An EventLoop processes IO \/ tasks in an endless loop for ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"s until it’s closed."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOInsecureNoTLS":{"url":"\/documentation\/niocore\/nioinsecurenotls","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOInsecureNoTLS","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOInsecureNoTLS","kind":"symbol","type":"topic","role":"symbol","title":"NIOInsecureNoTLS","navigatorTitle":[{"text":"NIOInsecureNoTLS","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageProcessor":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageProcessor","abstract":[{"code":"NIOSingleStepByteToMessageProcessor","type":"codeVoice"},{"text":" uses a ","type":"text"},{"code":"NIOSingleStepByteToMessageDecoder","type":"codeVoice"},{"text":" to produce messages","type":"text"},{"text":" ","type":"text"},{"text":"from a stream of incoming bytes. It works like ","type":"text"},{"code":"ByteToMessageHandler","type":"codeVoice"},{"text":" but may be used outside of the channel pipeline. This allows","type":"text"},{"text":" ","type":"text"},{"text":"processing of wrapped protocols in a general way.","type":"text"}],"title":"NIOSingleStepByteToMessageProcessor","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/niosinglestepbytetomessageprocessor","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}],"navigatorTitle":[{"text":"NIOSingleStepByteToMessageProcessor","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundInvoker":{"kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelInboundInvoker","kind":"identifier"}],"url":"\/documentation\/niocore\/channelinboundinvoker","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundInvoker","title":"ChannelInboundInvoker","navigatorTitle":[{"text":"ChannelInboundInvoker","kind":"identifier"}],"type":"topic","abstract":[{"text":"Fire inbound events related to a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" through the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" until its end is reached or it’s consumed by a ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundInvoker":{"title":"ChannelOutboundInvoker","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOutboundInvoker"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundInvoker","kind":"symbol","abstract":[{"type":"text","text":"Allows users to invoke an “outbound” operation related to a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" that will flow through the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" until"},{"type":"text","text":" "},{"type":"text","text":"it will finally be executed by the the "},{"code":"ChannelCore","type":"codeVoice"},{"type":"text","text":" implementation."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelOutboundInvoker"}],"url":"\/documentation\/niocore\/channeloutboundinvoker","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ConnectTimeoutOption":{"deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ConnectTimeoutOption","abstract":[],"title":"ConnectTimeoutOption","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/connecttimeoutoption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ConnectTimeoutOption","kind":"identifier"}],"navigatorTitle":[{"text":"ConnectTimeoutOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore","role":"collection","kind":"symbol","type":"topic","abstract":[],"title":"NIOCore","url":"\/documentation\/niocore"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipelineError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipelineError","abstract":[{"code":"Error","type":"codeVoice"},{"text":" that is used by the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" to inform the user of an error.","type":"text"}],"title":"ChannelPipelineError","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/channelpipelineerror","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ChannelPipelineError"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelPipelineError"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MarkedCircularBuffer":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MarkedCircularBuffer","role":"symbol","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"MarkedCircularBuffer"}],"abstract":[{"type":"text","text":"A circular buffer that allows one object at a time to be “marked” and easily identified and retrieved later."}],"navigatorTitle":[{"kind":"identifier","text":"MarkedCircularBuffer"}],"title":"MarkedCircularBuffer","url":"\/documentation\/niocore\/markedcircularbuffer"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RepeatedTask":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RepeatedTask","abstract":[{"text":"Returned once a task was scheduled to be repeatedly executed on the ","type":"text"},{"code":"EventLoop","type":"codeVoice"},{"text":".","type":"text"}],"title":"RepeatedTask","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/repeatedtask","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"RepeatedTask","kind":"identifier"}],"navigatorTitle":[{"text":"RepeatedTask","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionLevel":{"fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOptionLevel","kind":"identifier"}],"url":"\/documentation\/niocore\/socketoptionlevel","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionLevel","abstract":[],"type":"topic","title":"SocketOptionLevel","role":"symbol","navigatorTitle":[{"text":"SocketOptionLevel","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInboundHandler":{"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ChannelInboundHandler"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInboundHandler","title":"ChannelInboundHandler","url":"\/documentation\/niocore\/channelinboundhandler","role":"symbol","kind":"symbol","abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" which handles inbound I\/O events for a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"ChannelInboundHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOption":{"deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOption","abstract":[],"title":"SocketOption","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/socketoption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"SocketOption","kind":"identifier"}],"navigatorTitle":[{"text":"SocketOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Scheduled":{"navigatorTitle":[{"text":"Scheduled","kind":"identifier"}],"role":"symbol","type":"topic","url":"\/documentation\/niocore\/scheduled","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Scheduled","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Scheduled","abstract":[{"text":"Returned once a task was scheduled on the ","type":"text"},{"type":"codeVoice","code":"EventLoop"},{"text":" for later execution.","type":"text"}],"kind":"symbol","title":"Scheduled"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddressError":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddressError","abstract":[{"text":"Special ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":" that may be thrown if we fail to create a ","type":"text"},{"code":"SocketAddress","type":"codeVoice"},{"text":".","type":"text"}],"title":"SocketAddressError","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/socketaddresserror","fragments":[{"text":"enum","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketAddressError"}],"navigatorTitle":[{"kind":"identifier","text":"SocketAddressError"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AutoReadOption":{"deprecated":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AutoReadOption","abstract":[],"title":"AutoReadOption","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/autoreadoption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AutoReadOption","kind":"identifier"}],"navigatorTitle":[{"text":"AutoReadOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/Channel":{"url":"\/documentation\/niocore\/channel","navigatorTitle":[{"kind":"identifier","text":"Channel"}],"title":"Channel","role":"symbol","abstract":[{"type":"text","text":"A "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" is easiest thought of as a network socket. But it can be anything that is capable of I\/O operations such"},{"type":"text","text":" "},{"type":"text","text":"as read, write, connect, and bind."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/Channel","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Channel"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopIterator":{"url":"\/documentation\/niocore\/eventloopiterator","title":"EventLoopIterator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopIterator"}],"abstract":[{"type":"text","text":"An iterator over the "},{"code":"EventLoop","type":"codeVoice"},{"type":"text","text":"s forming an "},{"code":"EventLoopGroup","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"EventLoopIterator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopIterator","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSingleStepByteToMessageDecoder":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSingleStepByteToMessageDecoder","abstract":[{"text":"A simplified version of ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":" that can generate zero or one messages for each invocation of ","type":"text"},{"code":"decode","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"decodeLast","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Having ","type":"text"},{"code":"decode","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"decodeLast"},{"type":"text","text":" return an optional message avoids re-entrancy problems, since the functions relinquish exclusive access"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":" when returning. This allows for greatly simplified processing.","type":"text"}],"title":"NIOSingleStepByteToMessageDecoder","kind":"symbol","role":"symbol","type":"topic","url":"\/documentation\/niocore\/niosinglestepbytetomessagedecoder","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOSingleStepByteToMessageDecoder","kind":"identifier"}],"navigatorTitle":[{"text":"NIOSingleStepByteToMessageDecoder","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrap":{"url":"\/documentation\/niocore\/nioclienttcpbootstrap","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrap","abstract":[{"code":"NIOClientTCPBootstrap","type":"codeVoice"},{"text":" is a bootstrap that allows you to bootstrap client TCP connections using NIO on BSD Sockets,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"NIO Transport Services, or other ways."}],"kind":"symbol","navigatorTitle":[{"text":"NIOClientTCPBootstrap","kind":"identifier"}],"type":"topic","title":"NIOClientTCPBootstrap","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrap","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvByteBufferAllocator":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RecvByteBufferAllocator"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvByteBufferAllocator","type":"topic","url":"\/documentation\/niocore\/recvbytebufferallocator","kind":"symbol","title":"RecvByteBufferAllocator","navigatorTitle":[{"kind":"identifier","text":"RecvByteBufferAllocator"}],"abstract":[{"text":"Allocates ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"text":"s to be used to read bytes from a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" and records the number of the actual bytes that were used.","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferView":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferView"}],"url":"\/documentation\/niocore\/bytebufferview","title":"ByteBufferView","kind":"symbol","type":"topic","abstract":[{"type":"text","text":"A view into a portion of a "},{"type":"codeVoice","code":"ByteBuffer"},{"type":"text","text":"."}],"navigatorTitle":[{"kind":"identifier","text":"ByteBufferView"}],"role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferView"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelShouldQuiesceEvent":{"url":"\/documentation\/niocore\/channelshouldquiesceevent","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelShouldQuiesceEvent","abstract":[{"text":"A ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" user event that is sent when the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" has been asked to quiesce."}],"kind":"symbol","navigatorTitle":[{"text":"ChannelShouldQuiesceEvent","kind":"identifier"}],"type":"topic","title":"ChannelShouldQuiesceEvent","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelShouldQuiesceEvent","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOption":{"title":"ChannelOption","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOption"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOption","kind":"symbol","abstract":[{"type":"text","text":"A configuration option that can be set on a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" to configure different behaviour."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelOption"}],"url":"\/documentation\/niocore\/channeloption","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketOptionValue":{"url":"\/documentation\/niocore\/socketoptionvalue","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketOptionValue","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"SocketOptionValue","kind":"identifier"}],"type":"topic","title":"SocketOptionValue","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"SocketOptionValue","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteEncoder":{"url":"\/documentation\/niocore\/messagetobyteencoder","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteEncoder","abstract":[{"text":"A protocol for straightforward encoders which encode custom messages to ","type":"text"},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":"s."},{"type":"text","text":" "},{"type":"text","text":"To add a "},{"code":"MessageToByteEncoder","type":"codeVoice"},{"text":" to a ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":", use","type":"text"},{"text":" ","type":"text"},{"code":"channel.pipeline.addHandler(MessageToByteHandler(myEncoder)","type":"codeVoice"},{"text":".","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"MessageToByteEncoder"}],"type":"topic","title":"MessageToByteEncoder","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"MessageToByteEncoder"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOPreconcurrencySendable":{"title":"NIOPreconcurrencySendable","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOPreconcurrencySendable"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPreconcurrencySendable","kind":"symbol","abstract":[],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOPreconcurrencySendable"}],"url":"\/documentation\/niocore\/niopreconcurrencysendable","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOAttemptedToRemoveHandlerMultipleTimesError":{"url":"\/documentation\/niocore\/nioattemptedtoremovehandlermultipletimeserror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOAttemptedToRemoveHandlerMultipleTimesError","abstract":[{"text":"The removal of a ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" using "},{"type":"codeVoice","code":"ChannelPipeline.removeHandler"},{"type":"text","text":" has been attempted more than once."}],"kind":"symbol","navigatorTitle":[{"text":"NIOAttemptedToRemoveHandlerMultipleTimesError","kind":"identifier"}],"type":"topic","title":"NIOAttemptedToRemoveHandlerMultipleTimesError","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOAttemptedToRemoveHandlerMultipleTimesError","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MaxMessagesPerReadOption":{"url":"\/documentation\/niocore\/maxmessagesperreadoption","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MaxMessagesPerReadOption","abstract":[],"kind":"symbol","deprecated":true,"navigatorTitle":[{"text":"MaxMessagesPerReadOption","kind":"identifier"}],"type":"topic","title":"MaxMessagesPerReadOption","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"MaxMessagesPerReadOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelError":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelError"}],"url":"\/documentation\/niocore\/channelerror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelError","title":"ChannelError","role":"symbol","kind":"symbol","abstract":[{"text":"An error that can occur on ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" operations.","type":"text"}],"type":"topic","navigatorTitle":[{"kind":"identifier","text":"ChannelError"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CircularBuffer":{"abstract":[{"text":"An automatically expanding ring buffer implementation backed by a ","type":"text"},{"code":"ContiguousArray","type":"codeVoice"},{"text":". Even though this implementation","type":"text"},{"text":" ","type":"text"},{"text":"will automatically expand if more elements than ","type":"text"},{"code":"initialCapacity","type":"codeVoice"},{"type":"text","text":" are stored, it’s advantageous to prevent"},{"type":"text","text":" "},{"type":"text","text":"expansions from happening frequently. Expansions will always force an allocation and a copy to happen."}],"kind":"symbol","title":"CircularBuffer","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CircularBuffer","url":"\/documentation\/niocore\/circularbuffer","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"CircularBuffer"}],"navigatorTitle":[{"kind":"identifier","text":"CircularBuffer"}],"type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkInterface":{"url":"\/documentation\/niocore\/nionetworkinterface","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkInterface","kind":"symbol","abstract":[{"type":"text","text":"A representation of a single network interface on a system."}],"deprecated":true,"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIONetworkInterface"}],"title":"NIONetworkInterface","type":"topic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIONetworkInterface"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTLSProvider":{"url":"\/documentation\/niocore\/nioclienttlsprovider","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTLSProvider","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"NIOClientTLSProvider","kind":"identifier"}],"type":"topic","title":"NIOClientTLSProvider","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"NIOClientTLSProvider","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/FileDescriptor":{"url":"\/documentation\/niocore\/filedescriptor","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/FileDescriptor","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"FileDescriptor","kind":"identifier"}],"type":"topic","title":"FileDescriptor","role":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"text":"FileDescriptor","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RemovableChannelHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RemovableChannelHandler","title":"RemovableChannelHandler","kind":"symbol","type":"topic","url":"\/documentation\/niocore\/removablechannelhandler","role":"symbol","abstract":[{"type":"text","text":"A "},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"ChannelHandler","type":"codeVoice"},{"text":" that can be dynamically removed from a ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" whilst","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" is operating normally.","type":"text"},{"text":" ","type":"text"},{"text":"A ","type":"text"},{"code":"RemovableChannelHandler","type":"codeVoice"},{"text":" is required to remove itself from the ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":" (using","type":"text"},{"text":" ","type":"text"},{"code":"ChannelHandlerContext.removeHandler","type":"codeVoice"},{"text":") as soon as possible.","type":"text"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"RemovableChannelHandler"}],"navigatorTitle":[{"kind":"identifier","text":"RemovableChannelHandler"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOptions":{"type":"topic","abstract":[{"text":"Provides ","type":"text"},{"type":"codeVoice","code":"ChannelOption"},{"type":"text","text":"s to be used with a "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":", "},{"type":"codeVoice","code":"Bootstrap"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ServerBootstrap"},{"type":"text","text":"."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOptions","navigatorTitle":[{"kind":"identifier","text":"ChannelOptions"}],"url":"\/documentation\/niocore\/channeloptions","title":"ChannelOptions","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOptions"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOPOSIXFileMode":{"url":"\/documentation\/niocore\/nioposixfilemode","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPOSIXFileMode","abstract":[],"kind":"symbol","navigatorTitle":[{"text":"NIOPOSIXFileMode","kind":"identifier"}],"type":"topic","title":"NIOPOSIXFileMode","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"NIOPOSIXFileMode","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelPipeline":{"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelPipeline"}],"abstract":[{"type":"text","text":"A list of "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s that handle or intercept inbound events and outbound operations of a"},{"type":"text","text":" "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":". "},{"type":"codeVoice","code":"ChannelPipeline"},{"type":"text","text":" implements an advanced form of the Intercepting Filter pattern"},{"type":"text","text":" "},{"type":"text","text":"to give a user full control over how an event is handled and how the "},{"type":"codeVoice","code":"ChannelHandler"},{"type":"text","text":"s in a pipeline"},{"type":"text","text":" "},{"type":"text","text":"interact with each other."}],"navigatorTitle":[{"kind":"identifier","text":"ChannelPipeline"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelPipeline","title":"ChannelPipeline","role":"symbol","type":"topic","url":"\/documentation\/niocore\/channelpipeline","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelInvoker":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelInvoker"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelInvoker","title":"ChannelInvoker","url":"\/documentation\/niocore\/channelinvoker","role":"symbol","kind":"symbol","abstract":[{"text":"A protocol that signals that outbound and inbound events are triggered by this invoker.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"ChannelInvoker"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelDuplexHandler":{"url":"\/documentation\/niocore\/channelduplexhandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelDuplexHandler","abstract":[{"text":"A combination of ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"ChannelOutboundHandler"},{"type":"text","text":"."}],"kind":"symbol","navigatorTitle":[{"text":"ChannelDuplexHandler","kind":"identifier"}],"type":"topic","title":"ChannelDuplexHandler","role":"symbol","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelDuplexHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotSupportedError":{"url":"\/documentation\/niocore\/niomulticastnotsupportederror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotSupportedError","abstract":[{"text":"Multicast is not supported on this interface.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"NIOMulticastNotSupportedError","kind":"identifier"}],"type":"topic","title":"NIOMulticastNotSupportedError","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"NIOMulticastNotSupportedError","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageHandler":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageHandler","kind":"identifier"}],"url":"\/documentation\/niocore\/bytetomessagehandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageHandler","title":"ByteToMessageHandler","role":"symbol","kind":"symbol","abstract":[{"text":"A handler which turns a given ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":" into a ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"type":"text","text":" that can then be added to a"},{"type":"text","text":" "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":"."}],"type":"topic","navigatorTitle":[{"text":"ByteToMessageHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelEvent":{"abstract":[{"type":"text","text":"An "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" related event that is passed through the "},{"code":"ChannelPipeline","type":"codeVoice"},{"type":"text","text":" to notify the user."}],"title":"ChannelEvent","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelEvent"}],"type":"topic","kind":"symbol","role":"symbol","url":"\/documentation\/niocore\/channelevent","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelEvent","navigatorTitle":[{"kind":"identifier","text":"ChannelEvent"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelCore":{"url":"\/documentation\/niocore\/channelcore","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelCore","abstract":[{"text":"The core ","type":"text"},{"code":"Channel","type":"codeVoice"},{"type":"text","text":" methods that are for internal use of the "},{"type":"codeVoice","code":"Channel"},{"type":"text","text":" implementation only."}],"kind":"symbol","navigatorTitle":[{"text":"ChannelCore","kind":"identifier"}],"type":"topic","title":"ChannelCore","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelCore","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOClientTCPBootstrapProtocol":{"url":"\/documentation\/niocore\/nioclienttcpbootstrapprotocol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOClientTCPBootstrapProtocol","abstract":[{"code":"NIOClientTCPBootstrapProtocol","type":"codeVoice"},{"text":" is implemented by various underlying transport mechanisms. Typically,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this will be the BSD Sockets API implemented by "},{"type":"codeVoice","code":"ClientBootstrap"},{"text":".","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}],"type":"topic","title":"NIOClientTCPBootstrapProtocol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOClientTCPBootstrapProtocol","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOCloseOnErrorHandler":{"url":"\/documentation\/niocore\/niocloseonerrorhandler","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOCloseOnErrorHandler","abstract":[{"text":"A ","type":"text"},{"code":"ChannelInboundHandler","type":"codeVoice"},{"type":"text","text":" that closes the channel when an error is caught"}],"kind":"symbol","navigatorTitle":[{"text":"NIOCloseOnErrorHandler","kind":"identifier"}],"type":"topic","title":"NIOCloseOnErrorHandler","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOCloseOnErrorHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMark":{"url":"\/documentation\/niocore\/writebufferwatermark","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMark","abstract":[],"kind":"symbol","deprecated":true,"navigatorTitle":[{"text":"WriteBufferWaterMark","kind":"identifier"}],"type":"topic","title":"WriteBufferWaterMark","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"WriteBufferWaterMark","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MulticastChannel":{"url":"\/documentation\/niocore\/multicastchannel","type":"topic","title":"MulticastChannel","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MulticastChannel","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"MulticastChannel"}],"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"MulticastChannel"}],"abstract":[{"text":"A ","type":"text"},{"code":"MulticastChannel","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"Channel","type":"codeVoice"},{"text":" that supports IP multicast operations: that is, a channel that can join multicast","type":"text"},{"text":" ","type":"text"},{"text":"groups.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIODeadline":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIODeadline"}],"title":"NIODeadline","url":"\/documentation\/niocore\/niodeadline","type":"topic","navigatorTitle":[{"kind":"identifier","text":"NIODeadline"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIODeadline","abstract":[{"type":"text","text":"Represents a point in time."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/RecvAllocatorOption":{"url":"\/documentation\/niocore\/recvallocatoroption","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/RecvAllocatorOption","abstract":[],"kind":"symbol","deprecated":true,"navigatorTitle":[{"text":"RecvAllocatorOption","kind":"identifier"}],"type":"topic","title":"RecvAllocatorOption","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"RecvAllocatorOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteToMessageDecoderError":{"url":"\/documentation\/niocore\/bytetomessagedecodererror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteToMessageDecoderError","abstract":[{"text":"Common errors thrown by ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"type":"text","text":"s."}],"kind":"symbol","navigatorTitle":[{"text":"ByteToMessageDecoderError","kind":"identifier"}],"type":"topic","title":"ByteToMessageDecoderError","role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ByteToMessageDecoderError","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IdleStateHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IdleStateHandler","url":"\/documentation\/niocore\/idlestatehandler","type":"topic","kind":"symbol","role":"symbol","title":"IdleStateHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IdleStateHandler","kind":"identifier"}],"abstract":[{"text":"Triggers an IdleStateEvent when a Channel has not performed read, write, or both operation for a while.","type":"text"}],"navigatorTitle":[{"text":"IdleStateHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOBSDSocket":{"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"NIOBSDSocket"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOBSDSocket","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOBSDSocket"}],"abstract":[],"kind":"symbol","url":"\/documentation\/niocore\/niobsdsocket","title":"NIOBSDSocket"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOFileHandle":{"title":"NIOFileHandle","url":"\/documentation\/niocore\/niofilehandle","abstract":[{"type":"text","text":"A "},{"type":"codeVoice","code":"NIOFileHandle"},{"type":"text","text":" is a handle to an open file."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOFileHandle","kind":"identifier"}],"navigatorTitle":[{"text":"NIOFileHandle","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOFileHandle","kind":"symbol","type":"topic","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopGroup":{"type":"topic","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"EventLoopGroup"}],"url":"\/documentation\/niocore\/eventloopgroup","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"EventLoopGroup"}],"title":"EventLoopGroup","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopGroup","abstract":[{"type":"text","text":"Provides an endless stream of "},{"type":"codeVoice","code":"EventLoop"},{"type":"text","text":"s to use."}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOMulticastNotImplementedError":{"url":"\/documentation\/niocore\/niomulticastnotimplementederror","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOMulticastNotImplementedError","abstract":[{"text":"Multicast has not been properly implemented on this channel.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"NIOMulticastNotImplementedError","kind":"identifier"}],"type":"topic","title":"NIOMulticastNotImplementedError","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"NIOMulticastNotImplementedError","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOPacketInfo":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIOPacketInfo","kind":"identifier"}],"title":"NIOPacketInfo","abstract":[],"url":"\/documentation\/niocore\/niopacketinfo","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOPacketInfo","role":"symbol","type":"topic","navigatorTitle":[{"text":"NIOPacketInfo","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIOSynchronousChannelOptions":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIOSynchronousChannelOptions","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"NIOSynchronousChannelOptions"}],"kind":"symbol","type":"topic","role":"symbol","title":"NIOSynchronousChannelOptions","url":"\/documentation\/niocore\/niosynchronouschanneloptions","abstract":[],"navigatorTitle":[{"kind":"identifier","text":"NIOSynchronousChannelOptions"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/CloseMode":{"url":"\/documentation\/niocore\/closemode","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/CloseMode","abstract":[{"text":"Specify what kind of close operation is requested.","type":"text"}],"kind":"symbol","navigatorTitle":[{"text":"CloseMode","kind":"identifier"}],"type":"topic","title":"CloseMode","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"CloseMode","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelOutboundHandler":{"title":"ChannelOutboundHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelOutboundHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelOutboundHandler","kind":"symbol","abstract":[{"code":"ChannelHandler","type":"codeVoice"},{"type":"text","text":" which handles outbound I\/O events or intercept an outbound I\/O operation for a "},{"code":"Channel","type":"codeVoice"},{"type":"text","text":"."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelOutboundHandler"}],"url":"\/documentation\/niocore\/channeloutboundhandler","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/SocketAddress":{"type":"topic","abstract":[{"text":"Represent a socket address to which we may want to connect or bind.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/SocketAddress","navigatorTitle":[{"kind":"identifier","text":"SocketAddress"}],"url":"\/documentation\/niocore\/socketaddress","title":"SocketAddress","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"SocketAddress"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/BacklogOption":{"navigatorTitle":[{"text":"BacklogOption","kind":"identifier"}],"url":"\/documentation\/niocore\/backlogoption","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/BacklogOption","abstract":[],"title":"BacklogOption","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BacklogOption","kind":"identifier"}],"type":"topic","role":"symbol","deprecated":true},"doc://co.pointfree.VaporRouting/documentation/NIOCore/AllowRemoteHalfClosureOption":{"url":"\/documentation\/niocore\/allowremotehalfclosureoption","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/AllowRemoteHalfClosureOption","abstract":[],"kind":"symbol","deprecated":true,"navigatorTitle":[{"text":"AllowRemoteHalfClosureOption","kind":"identifier"}],"type":"topic","title":"AllowRemoteHalfClosureOption","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"AllowRemoteHalfClosureOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopPromise":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopPromise"}],"abstract":[{"type":"text","text":"A promise to provide a result later."}],"navigatorTitle":[{"kind":"identifier","text":"EventLoopPromise"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopPromise","title":"EventLoopPromise","role":"symbol","type":"topic","url":"\/documentation\/niocore\/eventlooppromise","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/MessageToByteHandler":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/MessageToByteHandler","url":"\/documentation\/niocore\/messagetobytehandler","type":"topic","kind":"symbol","role":"symbol","title":"MessageToByteHandler","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"MessageToByteHandler","kind":"identifier"}],"abstract":[{"text":"A handler which turns a given ","type":"text"},{"code":"MessageToByteEncoder","type":"codeVoice"},{"text":" into a ","type":"text"},{"code":"ChannelOutboundHandler","type":"codeVoice"},{"text":" that can then be added to a","type":"text"},{"text":" ","type":"text"},{"code":"ChannelPipeline","type":"codeVoice"},{"text":".","type":"text"}],"navigatorTitle":[{"text":"MessageToByteHandler","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteBufferWaterMarkOption":{"url":"\/documentation\/niocore\/writebufferwatermarkoption","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteBufferWaterMarkOption","abstract":[],"kind":"symbol","deprecated":true,"navigatorTitle":[{"text":"WriteBufferWaterMarkOption","kind":"identifier"}],"type":"topic","title":"WriteBufferWaterMarkOption","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"text":"WriteBufferWaterMarkOption","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/NIONetworkDevice":{"kind":"symbol","role":"symbol","title":"NIONetworkDevice","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/NIONetworkDevice","abstract":[{"text":"A representation of a single network device on a system.","type":"text"}],"url":"\/documentation\/niocore\/nionetworkdevice","type":"topic","navigatorTitle":[{"text":"NIONetworkDevice","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"NIONetworkDevice","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/EventLoopFuture":{"navigatorTitle":[{"kind":"identifier","text":"EventLoopFuture"}],"abstract":[{"text":"Holder for a result that will be provided later.","type":"text"}],"fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"EventLoopFuture"}],"kind":"symbol","url":"\/documentation\/niocore\/eventloopfuture","role":"symbol","title":"EventLoopFuture","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/EventLoopFuture","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/IOData":{"kind":"symbol","title":"IOData","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/IOData","abstract":[{"type":"codeVoice","code":"IOData"},{"text":" unifies standard SwiftNIO types that are raw bytes of data; currently ","type":"text"},{"type":"codeVoice","code":"ByteBuffer"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"FileRegion"},{"text":".","type":"text"}],"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"IOData"}],"navigatorTitle":[{"kind":"identifier","text":"IOData"}],"type":"topic","url":"\/documentation\/niocore\/iodata"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandler":{"title":"ChannelHandler","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"ChannelHandler"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandler","kind":"symbol","abstract":[{"type":"text","text":"You should "},{"inlineContent":[{"text":"never","type":"text"}],"type":"emphasis"},{"type":"text","text":" implement this protocol directly. Please implement one of its sub-protocols."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"ChannelHandler"}],"url":"\/documentation\/niocore\/channelhandler","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ChannelHandlerContext":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ChannelHandlerContext","kind":"identifier"}],"url":"\/documentation\/niocore\/channelhandlercontext","type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ChannelHandlerContext","title":"ChannelHandlerContext","navigatorTitle":[{"text":"ChannelHandlerContext","kind":"identifier"}],"abstract":[{"text":"Every ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":" has – when added to a ","type":"text"},{"type":"codeVoice","code":"ChannelPipeline"},{"text":" – a corresponding ","type":"text"},{"type":"codeVoice","code":"ChannelHandlerContext"},{"text":" which is","type":"text"},{"text":" ","type":"text"},{"text":"the way ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":"s can interact with other ","type":"text"},{"type":"codeVoice","code":"ChannelHandler"},{"text":"s in the pipeline.","type":"text"}],"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/NIOCore/WriteObservingByteToMessageDecoder":{"abstract":[{"text":"Some ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":"s need to observe ","type":"text"},{"code":"write","type":"codeVoice"},{"text":"s (which are outbound events). ","type":"text"},{"code":"ByteToMessageDecoder","type":"codeVoice"},{"text":"s which","type":"text"},{"text":" ","type":"text"},{"text":"implement the ","type":"text"},{"type":"codeVoice","code":"WriteObservingByteToMessageDecoder"},{"type":"text","text":" protocol will be notified about every outbound write."}],"role":"symbol","kind":"symbol","title":"WriteObservingByteToMessageDecoder","navigatorTitle":[{"kind":"identifier","text":"WriteObservingByteToMessageDecoder"}],"url":"\/documentation\/niocore\/writeobservingbytetomessagedecoder","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/WriteObservingByteToMessageDecoder","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"WriteObservingByteToMessageDecoder"}]},"doc://co.pointfree.VaporRouting/documentation/NIOCore/ByteBufferAllocator":{"abstract":[{"type":"text","text":"The preferred allocator for "},{"code":"ByteBuffer","type":"codeVoice"},{"type":"text","text":" values. The allocation strategy is opaque but is currently libc’s"},{"type":"text","text":" "},{"code":"malloc","type":"codeVoice"},{"type":"text","text":", "},{"code":"realloc","type":"codeVoice"},{"type":"text","text":" and "},{"code":"free","type":"codeVoice"},{"text":".","type":"text"}],"title":"ByteBufferAllocator","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ByteBufferAllocator"}],"navigatorTitle":[{"kind":"identifier","text":"ByteBufferAllocator"}],"kind":"symbol","url":"\/documentation\/niocore\/bytebufferallocator","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/NIOCore\/ByteBufferAllocator","role":"symbol"}}}