{"schemaVersion":{"patch":0,"major":0,"minor":3},"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeIfNilThenLoad"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Instance"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"anchor":"discussion","text":"Discussion","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The following example demonstrates how this can be used to implement a"},{"type":"text","text":" "},{"type":"text","text":"thread-safe lazily initialized reference:"}],"type":"paragraph"},{"code":["class Image {","  var _histogram: UnsafeAtomicLazyReference<Histogram> = ...","","  \/\/ This is safe to call concurrently from multiple threads.","  var atomicLazyHistogram: Histogram {","    if let histogram = _histogram.load() { return foo }","    \/\/ Note that code here may run concurrently on","    \/\/ multiple threads, but only one of them will get to","    \/\/ succeed setting the reference.","    let histogram = ...","    return _histogram.storeIfNilThenLoad(foo)","}"],"syntax":null,"type":"codeListing"},{"inlineContent":[{"text":"This operation uses acquiring-and-releasing memory ordering.","type":"text"}],"type":"paragraph"}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)","interfaceLanguage":"swift"},"abstract":[{"text":"Atomically initializes this reference if its current value is nil, then","type":"text"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"text":" ","type":"text"},{"text":"then ","type":"text"},{"code":"storeIfNilThenLoad(_:)","type":"codeVoice"},{"text":" discards its supplied argument and returns","type":"text"},{"text":" ","type":"text"},{"text":"the current value without updating it.","type":"text"}],"kind":"symbol","metadata":{"extendedModule":"Atomics","modules":[{"name":"Atomics"}],"title":"storeIfNilThenLoad(_:)","role":"symbol","roleHeading":"Instance Method","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeIfNilThenLoad"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Instance"}],"externalID":"s:7Atomics25UnsafeAtomicLazyReferenceV18storeIfNilThenLoadyxxnF"},"variants":[{"paths":["\/documentation\/atomics\/unsafeatomiclazyreference\/storeifnilthenload(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference":{"url":"\/documentation\/atomics\/unsafeatomiclazyreference","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An unsafe reference type holding a lazily initializable atomic","type":"text"},{"text":" ","type":"text"},{"text":"strong reference, requiring manual memory management of the","type":"text"},{"text":" ","type":"text"},{"text":"underlying storage representation.","type":"text"}],"title":"UnsafeAtomicLazyReference","type":"topic","navigatorTitle":[{"text":"UnsafeAtomicLazyReference","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference/storeIfNilThenLoad(_:)":{"title":"storeIfNilThenLoad(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeIfNilThenLoad"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Instance"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)","abstract":[{"text":"Atomically initializes this reference if its current value is nil, then","type":"text"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"then "},{"code":"storeIfNilThenLoad(_:)","type":"codeVoice"},{"type":"text","text":" discards its supplied argument and returns"},{"type":"text","text":" "},{"type":"text","text":"the current value without updating it."}],"kind":"symbol","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/storeifnilthenload(_:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics":{"type":"topic","abstract":[],"kind":"symbol","role":"collection","title":"Atomics","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","url":"\/documentation\/atomics"}}}