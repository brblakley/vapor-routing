{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/ManagedAtomic"]]},"sections":[],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/ManagedAtomic\/compareExchange(expected:desired:ordering:)"},"metadata":{"roleHeading":"Instance Method","extendedModule":"Atomics","title":"compareExchange(expected:desired:ordering:)","externalID":"s:7Atomics13ManagedAtomicC15compareExchange8expected7desired8orderingSb9exchanged_x8originaltx_xnAA0C14UpdateOrderingVtF","modules":[{"name":"Atomics"}],"symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"AtomicValue","type":"codeVoice"},{"text":".","type":"text"}]},"role":"symbol"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/managedatomic\/compareexchange(expected:desired:ordering:)"]}],"abstract":[{"type":"text","text":"Perform an atomic compare and exchange operation on the current value,"},{"type":"text","text":" "},{"type":"text","text":"applying the specified memory ordering."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}]}]},{"parameters":[{"name":"expected","content":[{"inlineContent":[{"type":"text","text":"The expected current value."}],"type":"paragraph"}]},{"name":"desired","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The desired new value."}]}]},{"name":"ordering","content":[{"inlineContent":[{"text":"The memory ordering to apply on this operation.","type":"text"}],"type":"paragraph"}]}],"kind":"parameters"},{"content":[{"text":"Return Value","anchor":"return-value","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"A tuple "},{"code":"(exchanged, original)","type":"codeVoice"},{"type":"text","text":", where "},{"code":"exchanged","type":"codeVoice"},{"type":"text","text":" is true if"},{"type":"text","text":" "},{"type":"text","text":"the exchange was successful, and "},{"code":"original","type":"codeVoice"},{"type":"text","text":" is the original value."}],"type":"paragraph"}],"kind":"content"},{"content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"inlineContent":[{"type":"text","text":"This operation performs the following algorithm as a single atomic"},{"type":"text","text":" "},{"type":"text","text":"transaction:"}],"type":"paragraph"},{"type":"codeListing","syntax":null,"code":["atomic(self) { currentValue in","  let original = currentValue","  guard original == expected else { return (false, original) }","  currentValue = desired","  return (true, original)","}"]},{"inlineContent":[{"text":"This method implements a “strong” compare and exchange operation","type":"text"},{"text":" ","type":"text"},{"text":"that does not permit spurious failures.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"schemaVersion":{"patch":0,"major":0,"minor":3},"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics/ManagedAtomic/compareExchange(expected:desired:ordering:)":{"title":"compareExchange(expected:desired:ordering:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/ManagedAtomic\/compareExchange(expected:desired:ordering:)","role":"symbol","conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"AtomicValue","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"Perform an atomic compare and exchange operation on the current value,"},{"type":"text","text":" "},{"type":"text","text":"applying the specified memory ordering."}],"type":"topic","url":"\/documentation\/atomics\/managedatomic\/compareexchange(expected:desired:ordering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/ManagedAtomic":{"kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/ManagedAtomic","navigatorTitle":[{"kind":"identifier","text":"ManagedAtomic"}],"title":"ManagedAtomic","fragments":[{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"kind":"identifier","text":"ManagedAtomic"}],"type":"topic","url":"\/documentation\/atomics\/managedatomic","abstract":[{"text":"A reference type holding an atomic value, with automatic memory management.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics":{"type":"topic","abstract":[],"kind":"symbol","role":"collection","title":"Atomics","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","url":"\/documentation\/atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicUpdateOrdering":{"title":"AtomicUpdateOrdering","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic read-modify-write","type":"text"},{"text":" ","type":"text"},{"text":"operation.","type":"text"}],"url":"\/documentation\/atomics\/atomicupdateordering","type":"topic","role":"symbol","navigatorTitle":[{"text":"AtomicUpdateOrdering","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"identifier"}]}}}