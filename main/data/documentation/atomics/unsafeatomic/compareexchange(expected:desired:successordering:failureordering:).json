{"metadata":{"title":"compareExchange(expected:desired:successOrdering:failureOrdering:)","conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"AtomicValue","type":"codeVoice"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"modules":[{"name":"Atomics"}],"role":"symbol","extendedModule":"Atomics","externalID":"s:7Atomics12UnsafeAtomicV15compareExchange8expected7desired15successOrdering07failureI0Sb9exchanged_x8originaltx_xnAA0c6UpdateI0VAA0c4LoadI0VtF","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"successOrdering"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier","text":"AtomicUpdateOrdering"},{"kind":"text","text":", "},{"kind":"externalParam","text":"failureOrdering"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","kind":"typeIdentifier","text":"AtomicLoadOrdering"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"roleHeading":"Instance Method"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:successOrdering:failureOrdering:)"},"schemaVersion":{"minor":3,"major":0,"patch":0},"abstract":[{"text":"Perform an atomic compare and exchange operation on the current value,","type":"text"},{"text":" ","type":"text"},{"text":"applying the specified success\/failure memory orderings.","type":"text"}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/unsafeatomic\/compareexchange(expected:desired:successordering:failureordering:)"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"successOrdering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"failureOrdering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicLoadOrdering","text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}]}]},{"parameters":[{"content":[{"inlineContent":[{"text":"The expected current value.","type":"text"}],"type":"paragraph"}],"name":"expected"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The desired new value."}]}],"name":"desired"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The memory ordering to apply if this","type":"text"},{"text":" ","type":"text"},{"text":"operation performs the exchange.","type":"text"}]}],"name":"successOrdering"},{"content":[{"inlineContent":[{"text":"The memory ordering to apply on this","type":"text"},{"text":" ","type":"text"},{"text":"operation does not perform the exchange.","type":"text"}],"type":"paragraph"}],"name":"failureOrdering"}],"kind":"parameters"},{"kind":"content","content":[{"level":2,"text":"Return Value","anchor":"return-value","type":"heading"},{"inlineContent":[{"text":"A tuple ","type":"text"},{"code":"(exchanged, original)","type":"codeVoice"},{"text":", where ","type":"text"},{"code":"exchanged","type":"codeVoice"},{"text":" is true if","type":"text"},{"text":" ","type":"text"},{"text":"the exchange was successful, and ","type":"text"},{"code":"original","type":"codeVoice"},{"text":" is the original value.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","level":2,"text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"This operation performs the following algorithm as a single atomic","type":"text"},{"text":" ","type":"text"},{"text":"transaction:","type":"text"}]},{"code":["atomic(self) { currentValue in","  let original = currentValue","  guard original == expected else { return (false, original) }","  currentValue = desired","  return (true, original)","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"successOrdering","type":"codeVoice"},{"text":" argument specifies the memory ordering to use when","type":"text"},{"text":" ","type":"text"},{"text":"the operation manages to update the current value, while ","type":"text"},{"code":"failureOrdering","type":"codeVoice"},{"text":" ","type":"text"},{"text":"will be used when the operation leaves the value intact.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method implements a “strong” compare and exchange operation"},{"type":"text","text":" "},{"type":"text","text":"that does not permit spurious failures."}]}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/compareExchange(expected:desired:successOrdering:failureOrdering:)":{"kind":"symbol","type":"topic","url":"\/documentation\/atomics\/unsafeatomic\/compareexchange(expected:desired:successordering:failureordering:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicValue"},{"text":".","type":"text"}]},"title":"compareExchange(expected:desired:successOrdering:failureOrdering:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:successOrdering:failureOrdering:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Perform an atomic compare and exchange operation on the current value,","type":"text"},{"text":" ","type":"text"},{"text":"applying the specified success\/failure memory orderings.","type":"text"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics":{"type":"topic","abstract":[],"kind":"symbol","role":"collection","title":"Atomics","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","url":"\/documentation\/atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic":{"abstract":[{"text":"An unsafe reference type holding an atomic value, requiring manual memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"management of the underlying storage representation."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeAtomic"}],"kind":"symbol","title":"UnsafeAtomic","url":"\/documentation\/atomics\/unsafeatomic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeAtomic"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicLoadOrdering":{"abstract":[{"type":"text","text":"Specifies the memory ordering semantics of an atomic load operation."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomicLoadOrdering"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicLoadOrdering","url":"\/documentation\/atomics\/atomicloadordering","title":"AtomicLoadOrdering","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicLoadOrdering"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicUpdateOrdering":{"title":"AtomicUpdateOrdering","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic read-modify-write","type":"text"},{"text":" ","type":"text"},{"text":"operation.","type":"text"}],"url":"\/documentation\/atomics\/atomicupdateordering","type":"topic","role":"symbol","navigatorTitle":[{"text":"AtomicUpdateOrdering","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"identifier"}]}}}