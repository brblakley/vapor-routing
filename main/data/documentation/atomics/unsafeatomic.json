{"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics"]]},"sections":[],"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"text":"An unsafe reference type holding an atomic value, requiring manual memory","type":"text"},{"text":" ","type":"text"},{"text":"management of the underlying storage representation.","type":"text"}],"relationshipsSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/s8SendableP"],"kind":"relationships","title":"Conforms To","type":"conformsTo"}],"kind":"symbol","variants":[{"paths":["\/documentation\/atomics\/unsafeatomic"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic","interfaceLanguage":"swift"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/init(at:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/bitwiseAndThenLoad(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/bitwiseOrThenLoad(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/bitwiseXorThenLoad(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:successOrdering:failureOrdering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/destroy()","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/exchange(_:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/load(ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenBitwiseAnd(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenBitwiseOr(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenBitwiseXor(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenLogicalAnd(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenLogicalOr(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenLogicalXor(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenWrappingDecrement(by:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenWrappingIncrement(by:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/logicalAndThenLoad(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/logicalOrThenLoad(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/logicalXorThenLoad(with:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/store(_:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/wrappingDecrement(by:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/wrappingDecrementThenLoad(by:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/wrappingIncrement(by:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/wrappingIncrementThenLoad(by:ordering:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/Storage"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/create(_:)"],"title":"Type Methods"}],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@frozen"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeAtomic"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":"> "},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":" : "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics11AtomicValueP","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicValue","text":"AtomicValue"}]}],"kind":"declarations"}],"metadata":{"modules":[{"name":"Atomics"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeAtomic","kind":"identifier"}],"symbolKind":"struct","externalID":"s:7Atomics12UnsafeAtomicV","title":"UnsafeAtomic","role":"symbol","navigatorTitle":[{"text":"UnsafeAtomic","kind":"identifier"}],"roleHeading":"Structure"},"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/Storage":{"abstract":[],"type":"topic","fragments":[{"text":"typealias","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Storage"}],"kind":"symbol","title":"UnsafeAtomic.Storage","url":"\/documentation\/atomics\/unsafeatomic\/storage","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/Storage","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Storage"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/logicalXorThenLoad(with:ordering:)":{"abstract":[{"type":"text","text":"Perform an atomic logical XOR operation and return the original value, applying"},{"type":"text","text":" "},{"type":"text","text":"the specified memory ordering."}],"kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/logicalXorThenLoad(with:ordering:)","title":"logicalXorThenLoad(with:ordering:)","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"logicalXorThenLoad"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"url":"\/documentation\/atomics\/unsafeatomic\/logicalxorthenload(with:ordering:)","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic":{"abstract":[{"text":"An unsafe reference type holding an atomic value, requiring manual memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"management of the underlying storage representation."}],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"UnsafeAtomic"}],"kind":"symbol","title":"UnsafeAtomic","url":"\/documentation\/atomics\/unsafeatomic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic","role":"symbol","navigatorTitle":[{"kind":"identifier","text":"UnsafeAtomic"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/load(ordering:)":{"abstract":[{"type":"text","text":"Atomically loads and returns the current value, applying the specified"},{"type":"text","text":" "},{"type":"text","text":"memory ordering."}],"type":"topic","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"AtomicValue","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"load"},{"kind":"text","text":"("},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"}],"title":"load(ordering:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/load(ordering:)","kind":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/load(ordering:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/wrappingIncrement(by:ordering:)":{"abstract":[{"type":"text","text":"Perform an atomic wrapping increment operation applying the"},{"type":"text","text":" "},{"type":"text","text":"specified memory ordering."}],"title":"wrappingIncrement(by:ordering:)","role":"symbol","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicInteger"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappingIncrement"},{"kind":"text","text":"("},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/wrappingIncrement(by:ordering:)","url":"\/documentation\/atomics\/unsafeatomic\/wrappingincrement(by:ordering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/init(at:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/init(at:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics12UnsafeAtomicV","text":"UnsafeAtomic"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">."},{"text":"Storage","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"kind":"symbol","role":"symbol","abstract":[{"type":"text","text":"Initialize an unsafe atomic value that uses the supplied memory location"},{"type":"text","text":" "},{"type":"text","text":"for storage. The storage location must already be initialized to"},{"type":"text","text":" "},{"type":"text","text":"represent a valid atomic value."}],"type":"topic","url":"\/documentation\/atomics\/unsafeatomic\/init(at:)","title":"init(at:)"},"doc://co.pointfree.VaporRouting/s8SendableP":{"type":"unresolvable","identifier":"doc:\/\/co.pointfree.VaporRouting\/s8SendableP","title":"Swift.Sendable"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/loadThenLogicalOr(with:ordering:)":{"role":"symbol","title":"loadThenLogicalOr(with:ordering:)","abstract":[{"type":"text","text":"Perform an atomic logical OR operation and return the original value, applying"},{"type":"text","text":" "},{"type":"text","text":"the specified memory ordering."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"loadThenLogicalOr"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"}],"type":"topic","conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenLogicalOr(with:ordering:)","url":"\/documentation\/atomics\/unsafeatomic\/loadthenlogicalor(with:ordering:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/loadThenLogicalXor(with:ordering:)":{"abstract":[{"text":"Perform an atomic logical XOR operation and return the original value, applying","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the specified memory ordering."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"loadThenLogicalXor"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenLogicalXor(with:ordering:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"}]},"title":"loadThenLogicalXor(with:ordering:)","kind":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/loadthenlogicalxor(with:ordering:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/compareExchange(expected:desired:ordering:)":{"title":"compareExchange(expected:desired:ordering:)","abstract":[{"text":"Perform an atomic compare and exchange operation on the current value,","type":"text"},{"text":" ","type":"text"},{"text":"applying the specified memory ordering.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:ordering:)","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"compareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"role":"symbol","conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"AtomicValue","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/compareexchange(expected:desired:ordering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/loadThenLogicalAnd(with:ordering:)":{"abstract":[{"text":"Perform an atomic logical AND operation and return the original value, applying","type":"text"},{"text":" ","type":"text"},{"text":"the specified memory ordering.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"loadThenLogicalAnd"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenLogicalAnd(with:ordering:)","title":"loadThenLogicalAnd(with:ordering:)","role":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/loadthenlogicaland(with:ordering:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" is ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/loadThenWrappingDecrement(by:ordering:)":{"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"loadThenWrappingDecrement"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering"},{"kind":"text","text":") -> "},{"text":"Value","kind":"typeIdentifier"}],"title":"loadThenWrappingDecrement(by:ordering:)","abstract":[{"type":"text","text":"Perform an atomic wrapping subtract operation and return the original value, applying"},{"type":"text","text":" "},{"type":"text","text":"the specified memory ordering."}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicInteger"},{"type":"text","text":"."}]},"url":"\/documentation\/atomics\/unsafeatomic\/loadthenwrappingdecrement(by:ordering:)","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenWrappingDecrement(by:ordering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicValue":{"url":"\/documentation\/atomics\/atomicvalue","title":"AtomicValue","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicValue","kind":"symbol","type":"topic","abstract":[{"text":"A type that supports atomic operations through a separate atomic storage","type":"text"},{"text":" ","type":"text"},{"text":"representation.","type":"text"}],"navigatorTitle":[{"text":"AtomicValue","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicValue","kind":"identifier"}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/store(_:ordering:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/store(_:ordering:)","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"store"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics19AtomicStoreOrderingV","kind":"typeIdentifier","text":"AtomicStoreOrdering"},{"kind":"text","text":")"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicValue"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"abstract":[{"type":"text","text":"Atomically sets the current value to "},{"type":"codeVoice","code":"desired"},{"type":"text","text":", applying the specified"},{"type":"text","text":" "},{"type":"text","text":"memory ordering."}],"kind":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/store(_:ordering:)","title":"store(_:ordering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/loadThenBitwiseAnd(with:ordering:)":{"kind":"symbol","abstract":[{"text":"Perform an atomic bitwise AND operation and return the original value, applying","type":"text"},{"text":" ","type":"text"},{"text":"the specified memory ordering.","type":"text"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicInteger"},{"type":"text","text":"."}]},"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenBitwiseAnd(with:ordering:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"loadThenBitwiseAnd","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"url":"\/documentation\/atomics\/unsafeatomic\/loadthenbitwiseand(with:ordering:)","role":"symbol","title":"loadThenBitwiseAnd(with:ordering:)","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/logicalOrThenLoad(with:ordering:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"logicalOrThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":".","type":"text"}]},"type":"topic","title":"logicalOrThenLoad(with:ordering:)","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/logicalOrThenLoad(with:ordering:)","role":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/logicalorthenload(with:ordering:)","abstract":[{"text":"Perform an atomic logical OR operation and return the original value, applying","type":"text"},{"text":" ","type":"text"},{"text":"the specified memory ordering.","type":"text"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/bitwiseOrThenLoad(with:ordering:)":{"role":"symbol","title":"bitwiseOrThenLoad(with:ordering:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bitwiseOrThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"AtomicInteger","type":"codeVoice"},{"type":"text","text":"."}]},"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/bitwiseOrThenLoad(with:ordering:)","kind":"symbol","type":"topic","url":"\/documentation\/atomics\/unsafeatomic\/bitwiseorthenload(with:ordering:)","abstract":[{"type":"text","text":"Perform an atomic bitwise OR operation and return the new value, applying"},{"type":"text","text":" "},{"type":"text","text":"the specified memory ordering."}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/loadThenBitwiseOr(with:ordering:)":{"url":"\/documentation\/atomics\/unsafeatomic\/loadthenbitwiseor(with:ordering:)","role":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"loadThenBitwiseOr","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"title":"loadThenBitwiseOr(with:ordering:)","abstract":[{"text":"Perform an atomic bitwise OR operation and return the original value, applying","type":"text"},{"text":" ","type":"text"},{"text":"the specified memory ordering.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenBitwiseOr(with:ordering:)","conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicInteger"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/destroy()":{"title":"destroy()","url":"\/documentation\/atomics\/unsafeatomic\/destroy()","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/destroy()","kind":"symbol","type":"topic","abstract":[{"text":"Disposes of the current value of the storage location corresponding to","type":"text"},{"text":" ","type":"text"},{"text":"this unsafe atomic value, then deinitializes and deallocates the storage.","type":"text"}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"destroy"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Value"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/weakCompareExchange(expected:desired:successOrdering:failureOrdering:)","kind":"symbol","role":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/weakcompareexchange(expected:desired:successordering:failureordering:)","type":"topic","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicValue"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"abstract":[{"type":"text","text":"Perform an atomic weak compare and exchange operation on the current"},{"type":"text","text":" "},{"type":"text","text":"value, applying the specified success\/failure memory orderings. This"},{"type":"text","text":" "},{"type":"text","text":"compare-exchange variant is allowed to spuriously fail; it is designed to"},{"type":"text","text":" "},{"type":"text","text":"be called in a loop until it indicates a successful exchange has happened."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"weakCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"weakCompareExchange(expected:desired:successOrdering:failureOrdering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/wrappingIncrementThenLoad(by:ordering:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappingIncrementThenLoad"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier","text":"AtomicUpdateOrdering"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"}],"abstract":[{"type":"text","text":"Perform an atomic wrapping add operation and return the new value, applying"},{"type":"text","text":" "},{"type":"text","text":"the specified memory ordering."}],"type":"topic","title":"wrappingIncrementThenLoad(by:ordering:)","role":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/wrappingincrementthenload(by:ordering:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/wrappingIncrementThenLoad(by:ordering:)","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"AtomicInteger","type":"codeVoice"},{"text":".","type":"text"}]}},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/bitwiseXorThenLoad(with:ordering:)":{"type":"topic","url":"\/documentation\/atomics\/unsafeatomic\/bitwisexorthenload(with:ordering:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bitwiseXorThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Perform an atomic bitwise XOR operation and return the new value, applying"},{"type":"text","text":" "},{"type":"text","text":"the specified memory ordering."}],"role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"AtomicInteger","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/bitwiseXorThenLoad(with:ordering:)","title":"bitwiseXorThenLoad(with:ordering:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/logicalAndThenLoad(with:ordering:)":{"role":"symbol","conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Bool"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"type":"topic","abstract":[{"text":"Perform an atomic logical AND operation and return the original value, applying","type":"text"},{"text":" ","type":"text"},{"text":"the specified memory ordering.","type":"text"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"logicalAndThenLoad"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/logicalAndThenLoad(with:ordering:)","title":"logicalAndThenLoad(with:ordering:)","url":"\/documentation\/atomics\/unsafeatomic\/logicalandthenload(with:ordering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/loadThenWrappingIncrement(by:ordering:)":{"abstract":[{"type":"text","text":"Perform an atomic wrapping add operation and return the original value, applying"},{"type":"text","text":" "},{"type":"text","text":"the specified memory ordering."}],"type":"topic","kind":"symbol","url":"\/documentation\/atomics\/unsafeatomic\/loadthenwrappingincrement(by:ordering:)","role":"symbol","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicInteger"},{"type":"text","text":"."}]},"title":"loadThenWrappingIncrement(by:ordering:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"loadThenWrappingIncrement"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenWrappingIncrement(by:ordering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/loadThenBitwiseXor(with:ordering:)":{"url":"\/documentation\/atomics\/unsafeatomic\/loadthenbitwisexor(with:ordering:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/loadThenBitwiseXor(with:ordering:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"loadThenBitwiseXor","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"abstract":[{"text":"Perform an atomic bitwise XOR operation and return the original value, applying","type":"text"},{"text":" ","type":"text"},{"text":"the specified memory ordering.","type":"text"}],"role":"symbol","type":"topic","kind":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicInteger"},{"text":".","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"title":"loadThenBitwiseXor(with:ordering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/bitwiseAndThenLoad(with:ordering:)":{"conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"AtomicInteger","type":"codeVoice"},{"text":".","type":"text"}]},"kind":"symbol","type":"topic","title":"bitwiseAndThenLoad(with:ordering:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"bitwiseAndThenLoad","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"with"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"abstract":[{"text":"Perform an atomic bitwise AND operation and return the new value, applying","type":"text"},{"text":" ","type":"text"},{"text":"the specified memory ordering.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/bitwiseAndThenLoad(with:ordering:)","url":"\/documentation\/atomics\/unsafeatomic\/bitwiseandthenload(with:ordering:)","role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics":{"type":"topic","abstract":[],"kind":"symbol","role":"collection","title":"Atomics","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","url":"\/documentation\/atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/wrappingDecrement(by:ordering:)":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicInteger"},{"text":".","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappingDecrement"},{"kind":"text","text":"("},{"kind":"externalParam","text":"by"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":")"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/wrappingDecrement(by:ordering:)","role":"symbol","abstract":[{"text":"Perform an atomic wrapping decrement operation applying the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"specified memory ordering."}],"type":"topic","url":"\/documentation\/atomics\/unsafeatomic\/wrappingdecrement(by:ordering:)","title":"wrappingDecrement(by:ordering:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/exchange(_:ordering:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"exchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Value","kind":"typeIdentifier"}],"conformance":{"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicValue"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"role":"symbol","title":"exchange(_:ordering:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/exchange(_:ordering:)","type":"topic","url":"\/documentation\/atomics\/unsafeatomic\/exchange(_:ordering:)","kind":"symbol","abstract":[{"text":"Atomically sets the current value to ","type":"text"},{"code":"desired","type":"codeVoice"},{"text":" and returns the original","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"value, applying the specified memory ordering."}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/create(_:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"create","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"UnsafeAtomic","preciseIdentifier":"s:7Atomics12UnsafeAtomicV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"title":"create(_:)","url":"\/documentation\/atomics\/unsafeatomic\/create(_:)","abstract":[{"text":"Create a new ","type":"text"},{"type":"codeVoice","code":"UnsafeAtomic"},{"text":" value with the supplied initial value by","type":"text"},{"text":" ","type":"text"},{"text":"dynamically allocating storage for it.","type":"text"}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/create(_:)","type":"topic"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/wrappingDecrementThenLoad(by:ordering:)":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"Value"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"AtomicInteger"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"url":"\/documentation\/atomics\/unsafeatomic\/wrappingdecrementthenload(by:ordering:)","type":"topic","abstract":[{"type":"text","text":"Perform an atomic wrapping subtract operation and return the new value, applying"},{"type":"text","text":" "},{"type":"text","text":"the specified memory ordering."}],"kind":"symbol","role":"symbol","title":"wrappingDecrementThenLoad(by:ordering:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/wrappingDecrementThenLoad(by:ordering:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrappingDecrementThenLoad","kind":"identifier"},{"text":"(","kind":"text"},{"text":"by","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ordering","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Value"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomic/compareExchange(expected:desired:successOrdering:failureOrdering:)":{"kind":"symbol","type":"topic","url":"\/documentation\/atomics\/unsafeatomic\/compareexchange(expected:desired:successordering:failureordering:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"Value"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"AtomicValue"},{"text":".","type":"text"}]},"title":"compareExchange(expected:desired:successOrdering:failureOrdering:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomic\/compareExchange(expected:desired:successOrdering:failureOrdering:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"compareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"abstract":[{"text":"Perform an atomic compare and exchange operation on the current value,","type":"text"},{"text":" ","type":"text"},{"text":"applying the specified success\/failure memory orderings.","type":"text"}],"role":"symbol"}}}