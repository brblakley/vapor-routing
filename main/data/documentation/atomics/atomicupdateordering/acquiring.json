{"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"symbol","metadata":{"externalID":"s:7Atomics20AtomicUpdateOrderingV9acquiringACvpZ","role":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"acquiring"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering"}],"title":"acquiring","symbolKind":"property","extendedModule":"Atomics","modules":[{"name":"Atomics"}],"roleHeading":"Type Property"},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering"]]},"abstract":[{"text":"An acquiring update synchronizes with a releasing operation","type":"text"},{"text":" ","type":"text"},{"text":"whose value its reads. It ensures that the releasing and","type":"text"},{"text":" ","type":"text"},{"text":"acquiring threads agree that all subsequent variable accesses on","type":"text"},{"text":" ","type":"text"},{"text":"the acquring thread happen after the atomic operation itself.","type":"text"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering\/acquiring"},"sections":[],"primaryContentSections":[{"declarations":[{"platforms":["Linux"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"acquiring","kind":"identifier"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":" { ","kind":"text"},{"text":"get","kind":"keyword"},{"text":" }","kind":"text"}],"languages":["swift"]}],"kind":"declarations"},{"content":[{"text":"Discussion","anchor":"discussion","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"This value corresponds to "},{"type":"codeVoice","code":"std::memory_order_acquire"},{"type":"text","text":" in C++."}],"type":"paragraph"}],"kind":"content"}],"variants":[{"paths":["\/documentation\/atomics\/atomicupdateordering\/acquiring"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics":{"type":"topic","abstract":[],"kind":"symbol","role":"collection","title":"Atomics","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","url":"\/documentation\/atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicUpdateOrdering":{"title":"AtomicUpdateOrdering","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic read-modify-write","type":"text"},{"text":" ","type":"text"},{"text":"operation.","type":"text"}],"url":"\/documentation\/atomics\/atomicupdateordering","type":"topic","role":"symbol","navigatorTitle":[{"text":"AtomicUpdateOrdering","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicUpdateOrdering/acquiring":{"kind":"symbol","title":"acquiring","url":"\/documentation\/atomics\/atomicupdateordering\/acquiring","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"acquiring"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier","text":"AtomicUpdateOrdering"}],"role":"symbol","abstract":[{"text":"An acquiring update synchronizes with a releasing operation","type":"text"},{"text":" ","type":"text"},{"text":"whose value its reads. It ensures that the releasing and","type":"text"},{"text":" ","type":"text"},{"text":"acquiring threads agree that all subsequent variable accesses on","type":"text"},{"text":" ","type":"text"},{"text":"the acquring thread happen after the atomic operation itself.","type":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering\/acquiring","type":"topic"}}}