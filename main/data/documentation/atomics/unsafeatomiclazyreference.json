{"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"@frozen","kind":"attribute"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeAtomicLazyReference","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Instance","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":" : AnyObject","kind":"text"}]}],"kind":"declarations"},{"content":[{"type":"heading","text":"Overview","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"text":"These values can be set (initialized) exactly once, but read many","type":"text"},{"text":" ","type":"text"},{"text":"times.","type":"text"}]}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/unsafeatomiclazyreference"]}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics"]]},"relationshipsSections":[{"type":"conformsTo","identifiers":["doc:\/\/co.pointfree.VaporRouting\/s8SendableP"],"title":"Conforms To","kind":"relationships"}],"abstract":[{"type":"text","text":"An unsafe reference type holding a lazily initializable atomic"},{"type":"text","text":" "},{"type":"text","text":"strong reference, requiring manual memory management of the"},{"type":"text","text":" "},{"type":"text","text":"underlying storage representation."}],"sections":[],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference","interfaceLanguage":"swift"},"kind":"symbol","metadata":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"navigatorTitle":[{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"roleHeading":"Structure","externalID":"s:7Atomics25UnsafeAtomicLazyReferenceV","modules":[{"name":"Atomics"}],"title":"UnsafeAtomicLazyReference","role":"symbol","symbolKind":"struct"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/Storage"],"title":"Structures"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/init(at:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/destroy()","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/load()","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)"],"title":"Instance Methods"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/Value"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/create()"],"title":"Type Methods"}],"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference/storeIfNilThenLoad(_:)":{"title":"storeIfNilThenLoad(_:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"storeIfNilThenLoad"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Instance"}],"type":"topic","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/storeIfNilThenLoad(_:)","abstract":[{"text":"Atomically initializes this reference if its current value is nil, then","type":"text"},{"text":" ","type":"text"},{"text":"returns the initialized value. If this reference is already initialized,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"then "},{"code":"storeIfNilThenLoad(_:)","type":"codeVoice"},{"type":"text","text":" discards its supplied argument and returns"},{"type":"text","text":" "},{"type":"text","text":"the current value without updating it."}],"kind":"symbol","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/storeifnilthenload(_:)"},"doc://co.pointfree.VaporRouting/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/co.pointfree.VaporRouting\/s8SendableP"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference/Value":{"fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Value"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"Value"}],"url":"\/documentation\/atomics\/unsafeatomiclazyreference\/value","title":"UnsafeAtomicLazyReference.Value","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/Value","abstract":[{"type":"text","text":"The value logically stored in an atomic lazy reference value."}],"type":"topic","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference/load()":{"abstract":[{"text":"Atomically loads and returns the current value of this reference.","type":"text"}],"role":"symbol","kind":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/load()","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"load","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":"?","kind":"text"}],"title":"load()","url":"\/documentation\/atomics\/unsafeatomiclazyreference\/load()"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference/create()":{"abstract":[{"type":"text","text":"Create a new "},{"type":"codeVoice","code":"UnsafeAtomicLazyReference"},{"type":"text","text":" value by dynamically allocating"},{"type":"text","text":" "},{"type":"text","text":"storage for it."}],"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"create","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"UnsafeAtomicLazyReference","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/atomics\/unsafeatomiclazyreference\/create()","title":"create()","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/create()","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics":{"type":"topic","abstract":[],"kind":"symbol","role":"collection","title":"Atomics","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","url":"\/documentation\/atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference/init(at:)":{"fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"UnsafeAtomicLazyReference","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Instance"},{"kind":"text","text":">."},{"kind":"typeIdentifier","text":"Storage","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV7StorageV"},{"kind":"text","text":">)"}],"url":"\/documentation\/atomics\/unsafeatomiclazyreference\/init(at:)","type":"topic","title":"init(at:)","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/init(at:)","kind":"symbol","abstract":[{"type":"text","text":"Initialize an unsafe atomic lazy reference that uses the supplied memory"},{"type":"text","text":" "},{"type":"text","text":"location for storage. The storage location must already be initialized to"},{"type":"text","text":" "},{"type":"text","text":"represent a valid atomic value."}],"role":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference/destroy()":{"abstract":[{"type":"text","text":"Disposes of the current value of the storage location corresponding to"},{"type":"text","text":" "},{"type":"text","text":"this unsafe atomic lazy reference, then deinitializes and deallocates the"},{"type":"text","text":" "},{"type":"text","text":"storage."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"destroy","kind":"identifier"},{"text":"() -> ","kind":"text"},{"text":"UnsafeAtomicLazyReference","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Instance","kind":"typeIdentifier"},{"text":">.","kind":"text"},{"text":"Value","preciseIdentifier":"s:7Atomics25UnsafeAtomicLazyReferenceV5Valuea","kind":"typeIdentifier"}],"url":"\/documentation\/atomics\/unsafeatomiclazyreference\/destroy()","title":"destroy()","role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/destroy()","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference/Storage":{"url":"\/documentation\/atomics\/unsafeatomiclazyreference\/storage","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference\/Storage","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Storage","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"The storage representation for an atomic lazy reference value.","type":"text"}],"title":"UnsafeAtomicLazyReference.Storage","type":"topic","navigatorTitle":[{"text":"Storage","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/UnsafeAtomicLazyReference":{"url":"\/documentation\/atomics\/unsafeatomiclazyreference","role":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/UnsafeAtomicLazyReference","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"UnsafeAtomicLazyReference","kind":"identifier"}],"kind":"symbol","abstract":[{"text":"An unsafe reference type holding a lazily initializable atomic","type":"text"},{"text":" ","type":"text"},{"text":"strong reference, requiring manual memory management of the","type":"text"},{"text":" ","type":"text"},{"text":"underlying storage representation.","type":"text"}],"title":"UnsafeAtomicLazyReference","type":"topic","navigatorTitle":[{"text":"UnsafeAtomicLazyReference","kind":"identifier"}]}}}