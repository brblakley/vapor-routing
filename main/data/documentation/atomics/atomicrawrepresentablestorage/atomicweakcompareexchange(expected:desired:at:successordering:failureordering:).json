{"sections":[],"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"platforms":["Linux"],"tokens":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicWeakCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"pointer","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"AtomicRawRepresentableStorage","preciseIdentifier":"s:7Atomics29AtomicRawRepresentableStorageV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicLoadOrdering"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}]}]},{"kind":"parameters","parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The expected current value."}]}],"name":"expected"},{"content":[{"inlineContent":[{"type":"text","text":"The desired new value."}],"type":"paragraph"}],"name":"desired"},{"content":[{"type":"paragraph","inlineContent":[{"text":"A memory location previously initialized with a value","type":"text"},{"text":" ","type":"text"},{"text":"returned by ","type":"text"},{"code":"prepareAtomicRepresentation(for:)","type":"codeVoice"},{"text":".","type":"text"}]}],"name":"pointer"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The memory ordering to apply if this","type":"text"},{"text":" ","type":"text"},{"text":"operation performs the exchange.","type":"text"}]}],"name":"successOrdering"},{"content":[{"inlineContent":[{"type":"text","text":"The memory ordering to apply on this"},{"type":"text","text":" "},{"type":"text","text":"operation does not perform the exchange."}],"type":"paragraph"}],"name":"failureOrdering"}]},{"kind":"content","content":[{"anchor":"return-value","type":"heading","level":2,"text":"Return Value"},{"inlineContent":[{"text":"A tuple ","type":"text"},{"type":"codeVoice","code":"(exchanged, original)"},{"text":", where ","type":"text"},{"type":"codeVoice","code":"exchanged"},{"text":" is true if","type":"text"},{"text":" ","type":"text"},{"text":"the exchange was successful, and ","type":"text"},{"type":"codeVoice","code":"original"},{"text":" is the original value.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"text":"Discussion","anchor":"discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This operation performs the following algorithm as a single atomic"},{"type":"text","text":" "},{"type":"text","text":"transaction:"}]},{"code":["atomic(self) { currentValue in","  let original = currentValue","  guard original == expected else { return (false, original) }","  currentValue = desired","  return (true, original)","}"],"type":"codeListing","syntax":null},{"type":"paragraph","inlineContent":[{"type":"text","text":"(In this weak form, transient conditions may cause the "},{"type":"codeVoice","code":"original == expected"},{"type":"text","text":" check to sometimes return false when the two values are in fact"},{"type":"text","text":" "},{"type":"text","text":"the same.)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"successOrdering"},{"type":"text","text":" argument specifies the memory ordering to use when the"},{"type":"text","text":" "},{"type":"text","text":"operation manages to update the current value, while "},{"type":"codeVoice","code":"failureOrdering"},{"type":"text","text":" "},{"type":"text","text":"will be used when the operation leaves the value intact."}]}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicWeakCompareExchange","kind":"identifier"},{"text":"(","kind":"text"},{"text":"expected","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"desired","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"AtomicRawRepresentableStorage","preciseIdentifier":"s:7Atomics29AtomicRawRepresentableStorageV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","kind":"typeIdentifier"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"text":"Bool","preciseIdentifier":"s:Sb","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"roleHeading":"Type Method","title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","externalID":"s:7Atomics29AtomicRawRepresentableStorageV25atomicWeakCompareExchange8expected7desired2at15successOrdering07failureN0Sb9exchanged_x8originaltx_xSpyACyxGGAA0b6UpdateN0VAA0b4LoadN0VtFZ","symbolKind":"method","modules":[{"name":"Atomics"}]},"abstract":[{"text":"Perform an atomic weak compare and exchange operation on the value","type":"text"},{"text":" ","type":"text"},{"text":"referenced by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"text":", applying the specified success\/failure memory","type":"text"},{"text":" ","type":"text"},{"text":"orderings. This compare-exchange variant is allowed to spuriously fail; it","type":"text"},{"text":" ","type":"text"},{"text":"is designed to be called in a loop until it indicates a successful","type":"text"},{"text":" ","type":"text"},{"text":"exchange has happened.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/atomicrawrepresentablestorage\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)"]}],"kind":"symbol","references":{"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicRawRepresentableStorage":{"title":"AtomicRawRepresentableStorage","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage","abstract":[{"text":"The default atomic storage representation for an atomic ","type":"text"},{"code":"RawRepresentable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type whose ","type":"text"},{"code":"RawValue","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"AtomicValue","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/atomics\/atomicrawrepresentablestorage","type":"topic","role":"symbol","navigatorTitle":[{"text":"AtomicRawRepresentableStorage","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicRawRepresentableStorage","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicRawRepresentableStorage/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)":{"fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"atomicWeakCompareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sp","kind":"typeIdentifier","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"AtomicRawRepresentableStorage","preciseIdentifier":"s:7Atomics29AtomicRawRepresentableStorageV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">>, "},{"kind":"externalParam","text":"successOrdering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicUpdateOrdering","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"failureOrdering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicLoadOrdering","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","role":"symbol","abstract":[{"text":"Perform an atomic weak compare and exchange operation on the value","type":"text"},{"text":" ","type":"text"},{"text":"referenced by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"text":", applying the specified success\/failure memory","type":"text"},{"text":" ","type":"text"},{"text":"orderings. This compare-exchange variant is allowed to spuriously fail; it","type":"text"},{"text":" ","type":"text"},{"text":"is designed to be called in a loop until it indicates a successful","type":"text"},{"text":" ","type":"text"},{"text":"exchange has happened.","type":"text"}],"url":"\/documentation\/atomics\/atomicrawrepresentablestorage\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)","title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics":{"type":"topic","abstract":[],"kind":"symbol","role":"collection","title":"Atomics","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","url":"\/documentation\/atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicUpdateOrdering":{"title":"AtomicUpdateOrdering","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicUpdateOrdering","abstract":[{"text":"Specifies the memory ordering semantics of an atomic read-modify-write","type":"text"},{"text":" ","type":"text"},{"text":"operation.","type":"text"}],"url":"\/documentation\/atomics\/atomicupdateordering","type":"topic","role":"symbol","navigatorTitle":[{"text":"AtomicUpdateOrdering","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicUpdateOrdering","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicLoadOrdering":{"abstract":[{"type":"text","text":"Specifies the memory ordering semantics of an atomic load operation."}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomicLoadOrdering"}],"type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicLoadOrdering","url":"\/documentation\/atomics\/atomicloadordering","title":"AtomicLoadOrdering","kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicLoadOrdering"}]}}}