{"abstract":[{"text":"The storage representation for an atomic value, providing pointer-based","type":"text"},{"text":" ","type":"text"},{"text":"atomic operations. This is a low-level implementation detail of atomic","type":"text"},{"type":"text","text":" "},{"type":"text","text":"types; instead of directly handling conforming types, it is usually better"},{"type":"text","text":" "},{"type":"text","text":"to use the "},{"type":"codeVoice","code":"UnsafeAtomic"},{"type":"text","text":" or "},{"type":"codeVoice","code":"ManagedAtomic"},{"type":"text","text":" generics – these provide more"},{"type":"text","text":" "},{"type":"text","text":"convenient and safer interfaces while also ensuring that the storage is"},{"type":"text","text":" "},{"type":"text","text":"correctly constructed and destroyed."}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicStorage"}],"platforms":["Linux"],"languages":["swift"]}]},{"kind":"content","content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"text":"Logically, atomic storage representations are neither value- nor reference","type":"text"},{"text":" ","type":"text"},{"text":"types: they should be treated as non-copiable values with a custom","type":"text"},{"text":" ","type":"text"},{"text":"destructor. Such constructs cannot currently be modeled directly in Swift,","type":"text"},{"text":" ","type":"text"},{"text":"so types conforming to this protocol must be handled carefully to prevent","type":"text"},{"text":" ","type":"text"},{"text":"accidental copying. For example, it usually isn’t safe to pass around atomic","type":"text"},{"text":" ","type":"text"},{"text":"storage representations as function arguments or return values. Instead,","type":"text"},{"text":" ","type":"text"},{"text":"they are usually addressed through unsafe pointers.","type":"text"}],"type":"paragraph"}]}],"sections":[],"kind":"symbol","topicSections":[{"title":"Associated Types","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/Value"]},{"title":"Initializers","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/init(_:)"]},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/dispose()"]},{"title":"Type Methods","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicCompareExchange(expected:desired:at:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicExchange(_:at:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicLoad(at:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicStore(_:at:ordering:)","doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/atomics\/atomicstorage"]}],"relationshipsSections":[{"kind":"relationships","title":"Inherited By","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicIntegerStorage"],"type":"inheritedBy"},{"kind":"relationships","title":"Conforming Types","identifiers":["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage"],"type":"conformingTypes"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage"},"metadata":{"modules":[{"name":"Atomics"}],"role":"symbol","roleHeading":"Protocol","symbolKind":"protocol","navigatorTitle":[{"kind":"identifier","text":"AtomicStorage"}],"title":"AtomicStorage","externalID":"s:7Atomics13AtomicStorageP","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"AtomicStorage"}]},"hierarchy":{"paths":[["doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics"]]},"references":{"doc://co.pointfree.VaporRouting/documentation/Atomics":{"type":"topic","abstract":[],"kind":"symbol","role":"collection","title":"Atomics","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics","url":"\/documentation\/atomics"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)":{"title":"atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","role":"symbol","kind":"symbol","url":"\/documentation\/atomics\/atomicstorage\/atomicweakcompareexchange(expected:desired:at:successordering:failureordering:)","abstract":[{"text":"Perform an atomic weak compare and exchange operation on the value","type":"text"},{"text":" ","type":"text"},{"text":"referenced by ","type":"text"},{"type":"codeVoice","code":"pointer"},{"text":", applying the specified success\/failure memory","type":"text"},{"text":" ","type":"text"},{"text":"orderings. This compare-exchange variant is allowed to spuriously fail; it","type":"text"},{"text":" ","type":"text"},{"text":"is designed to be called in a loop until it indicates a successful","type":"text"},{"type":"text","text":" "},{"type":"text","text":"exchange has happened."}],"fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicWeakCompareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"successOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","text":"AtomicLoadOrdering","kind":"typeIdentifier"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicWeakCompareExchange(expected:desired:at:successOrdering:failureOrdering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicIntegerStorage":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicIntegerStorage"}],"url":"\/documentation\/atomics\/atomicintegerstorage","role":"symbol","abstract":[{"type":"text","text":"The storage representation for an atomic integer value, providing"},{"type":"text","text":" "},{"type":"text","text":"pointer-based atomic operations."}],"title":"AtomicIntegerStorage","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicIntegerStorage","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"AtomicIntegerStorage"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicStore(_:at:ordering:)":{"kind":"symbol","role":"symbol","title":"atomicStore(_:at:ordering:)","abstract":[{"type":"text","text":"Atomically sets the value referenced by "},{"type":"codeVoice","code":"pointer"},{"type":"text","text":" to "},{"code":"desired","type":"codeVoice"},{"text":",","type":"text"},{"text":" ","type":"text"},{"text":"applying the specified memory ordering.","type":"text"}],"required":true,"type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicStore"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UnsafeMutablePointer","preciseIdentifier":"s:Sp"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"AtomicStoreOrdering","preciseIdentifier":"s:7Atomics19AtomicStoreOrderingV"},{"text":")","kind":"text"}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicStore(_:at:ordering:)","url":"\/documentation\/atomics\/atomicstorage\/atomicstore(_:at:ordering:)"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicLoad(at:ordering:)":{"abstract":[{"type":"text","text":"Atomically loads and returns the value referenced by the given pointer,"},{"type":"text","text":" "},{"type":"text","text":"applying the specified memory ordering."}],"required":true,"role":"symbol","type":"topic","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicLoad(at:ordering:)","url":"\/documentation\/atomics\/atomicstorage\/atomicload(at:ordering:)","title":"atomicLoad(at:ordering:)","kind":"symbol","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"atomicLoad","kind":"identifier"},{"text":"(","kind":"text"},{"text":"at","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","text":"AtomicLoadOrdering"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)":{"role":"symbol","abstract":[{"type":"text","text":"Perform an atomic compare and exchange operation on the value referenced"},{"text":" ","type":"text"},{"text":"by ","type":"text"},{"code":"pointer","type":"codeVoice"},{"text":", applying the specified success\/failure memory orderings.","type":"text"}],"title":"atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicCompareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"successOrdering"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"failureOrdering","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:7Atomics18AtomicLoadOrderingV","text":"AtomicLoadOrdering","kind":"typeIdentifier"},{"text":") -> (exchanged","kind":"text"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", original","kind":"text"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicCompareExchange(expected:desired:at:successOrdering:failureOrdering:)","url":"\/documentation\/atomics\/atomicstorage\/atomiccompareexchange(expected:desired:at:successordering:failureordering:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/init(_:)":{"role":"symbol","abstract":[{"type":"text","text":"Encode the supplied value into its atomic storage representation."}],"title":"init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"type":"topic","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/init(_:)","url":"\/documentation\/atomics\/atomicstorage\/init(_:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/dispose()":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dispose"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"role":"symbol","title":"dispose()","kind":"symbol","required":true,"type":"topic","url":"\/documentation\/atomics\/atomicstorage\/dispose()","abstract":[{"text":"Prepare this atomic storage value for deinitialization, extracting the","type":"text"},{"text":" ","type":"text"},{"text":"logical value it represents. This invalidates this atomic storage; you","type":"text"},{"text":" ","type":"text"},{"text":"must not perform any operations on it after this call (except for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"deinitialization)."}],"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/dispose()"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicCompareExchange(expected:desired:at:ordering:)":{"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicCompareExchange(expected:desired:at:ordering:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicCompareExchange"},{"kind":"text","text":"("},{"kind":"externalParam","text":"expected"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"desired"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sp","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","text":"AtomicUpdateOrdering"},{"kind":"text","text":") -> (exchanged"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", original"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":")"}],"kind":"symbol","required":true,"type":"topic","role":"symbol","title":"atomicCompareExchange(expected:desired:at:ordering:)","url":"\/documentation\/atomics\/atomicstorage\/atomiccompareexchange(expected:desired:at:ordering:)","abstract":[{"type":"text","text":"Perform an atomic compare and exchange operation on the value referenced"},{"type":"text","text":" "},{"type":"text","text":"by "},{"code":"pointer","type":"codeVoice"},{"type":"text","text":", applying the specified memory ordering."}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/atomicExchange(_:at:ordering:)":{"role":"symbol","abstract":[{"type":"text","text":"Atomically sets the value referenced by "},{"code":"pointer","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"desired","type":"codeVoice"},{"text":" and returns","type":"text"},{"text":" ","type":"text"},{"text":"the original value, applying the specified memory ordering.","type":"text"}],"title":"atomicExchange(_:at:ordering:)","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"atomicExchange"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":", "},{"kind":"externalParam","text":"at"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Sp","kind":"typeIdentifier","text":"UnsafeMutablePointer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"ordering"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7Atomics20AtomicUpdateOrderingV","kind":"typeIdentifier","text":"AtomicUpdateOrdering"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Value"}],"type":"topic","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/atomicExchange(_:at:ordering:)","url":"\/documentation\/atomics\/atomicstorage\/atomicexchange(_:at:ordering:)","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage/Value":{"role":"symbol","abstract":[{"type":"text","text":"The type whose values this storage representation is representing."}],"title":"Value","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"kind":"identifier","text":"Value"}],"type":"topic","required":true,"identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage\/Value","url":"\/documentation\/atomics\/atomicstorage\/value","kind":"symbol"},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicRawRepresentableStorage":{"title":"AtomicRawRepresentableStorage","kind":"symbol","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicRawRepresentableStorage","abstract":[{"text":"The default atomic storage representation for an atomic ","type":"text"},{"code":"RawRepresentable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type whose ","type":"text"},{"code":"RawValue","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"AtomicValue","type":"codeVoice"},{"text":".","type":"text"}],"url":"\/documentation\/atomics\/atomicrawrepresentablestorage","type":"topic","role":"symbol","navigatorTitle":[{"text":"AtomicRawRepresentableStorage","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AtomicRawRepresentableStorage","kind":"identifier"}]},"doc://co.pointfree.VaporRouting/documentation/Atomics/AtomicStorage":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"AtomicStorage"}],"navigatorTitle":[{"kind":"identifier","text":"AtomicStorage"}],"url":"\/documentation\/atomics\/atomicstorage","type":"topic","role":"symbol","kind":"symbol","title":"AtomicStorage","identifier":"doc:\/\/co.pointfree.VaporRouting\/documentation\/Atomics\/AtomicStorage","abstract":[{"type":"text","text":"The storage representation for an atomic value, providing pointer-based"},{"type":"text","text":" "},{"type":"text","text":"atomic operations. This is a low-level implementation detail of atomic"},{"type":"text","text":" "},{"text":"types; instead of directly handling conforming types, it is usually better","type":"text"},{"text":" ","type":"text"},{"text":"to use the ","type":"text"},{"code":"UnsafeAtomic","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"ManagedAtomic","type":"codeVoice"},{"type":"text","text":" generics – these provide more"},{"type":"text","text":" "},{"type":"text","text":"convenient and safer interfaces while also ensuring that the storage is"},{"type":"text","text":" "},{"type":"text","text":"correctly constructed and destroyed."}]}}}